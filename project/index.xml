<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DEFAULT Projects | Romain Thomas</title><link>https://www.romainthomas.fr/project/</link><atom:link href="https://www.romainthomas.fr/project/index.xml" rel="self" type="application/rss+xml"/><description>Projects</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Published with Academic Website Builder</copyright><lastBuildDate>Thu, 03 Jun 2021 00:00:00 +0000</lastBuildDate><image><url>https://www.romainthomas.fr/images/icon_hu2654a0fcc87c65a864822ac27b001d3b_698_512x512_fill_lanczos_center_3.png</url><title>Projects</title><link>https://www.romainthomas.fr/project/</link></image><item><title>QBDL</title><link>https://www.romainthomas.fr/project/qbdl/</link><pubDate>Thu, 03 Jun 2021 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/project/qbdl/</guid><description>&lt;p>QBDL (&lt;strong>Q&lt;/strong>uarksla&lt;strong>B&lt;/strong> &lt;strong>D&lt;/strong>ynamic &lt;strong>L&lt;/strong>oader) is a cross-platform library that enables
to load ELF, PE and Mach-O binaries with an abstraction on the targeted system.
It abstracts the memory model on which the binary is loaded
and provides an enhanced API to the user to process symbols resolution.
In a nutshell, it enables to load binaries on foreign systems without reinventing the wheel.&lt;/p>
&lt;p>Here is an
&lt;a href="https://github.com/quarkslab/QBDL/blob/83a64211dae71e870495bc795dd065278f93993f/bindings/python/examples/triton_macho_x64.py" target="_blank" rel="noopener">example&lt;/a> to load a Mach-O in
&lt;a href="https://github.com/JonathanSalwan/Triton" target="_blank" rel="noopener">Triton&lt;/a> with QBDL:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">TritonVM&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pyqbdl&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">TargetMemory&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ctx&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">TritonContext&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">super&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__init__&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ctx&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">mmap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">ptr&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">mprotect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">access&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setConcreteMemoryAreaValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getConcreteMemoryAreaValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">TritonSystem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pyqbdl&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">TargetSystem&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arch&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ctx&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">super&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TritonVM&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">arch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">arch&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ctx&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">symlink&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">loader&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sym&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">impl&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">addr&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">externalFunctions&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">sym&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">addr&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">supports&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bin_&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">pyqbdl&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Arch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">from_bin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bin_&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">arch&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">base_address_hint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bin_ba&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">vsize&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">bin_ba&lt;/span>
&lt;span class="n">x86_64_arch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pyqbdl&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Arch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ARCHITECTURES&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">X86&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ENDIANNESS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">LITTLE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">loader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pyqbdl&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">loaders&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">MachO&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">from_file&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">filename&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x86_64_arch&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">TritonSystem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x86_64_arch&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ctx&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">pyqbdl&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">BIND&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">NOW&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Tencent Legu Unpacker</title><link>https://www.romainthomas.fr/project/legu_unpacker/</link><pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/project/legu_unpacker/</guid><description>&lt;h1 id="legu-unpacker">Legu Unpacker&lt;/h1>
&lt;p>Scripts to unpack Android applications protected by Tencent Legu. It only works with versions
&lt;strong>4.1.0.15&lt;/strong> and &lt;strong>4.1.0.18&lt;/strong> of Legu.&lt;/p>
&lt;p>Blog post:
&lt;a href="https://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html" target="_blank" rel="noopener">https://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html&lt;/a>&lt;/p>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>The original DEX files are located in &lt;code>assets/0OO00l111l1l&lt;/code> with the following layout:&lt;/p>
&lt;p align="center" >
&lt;img src="packed_file.png"/>&lt;br />
&lt;/p>
&lt;p>One can find the details of this structure in the Kaitai file:
&lt;a href="https://github.com/quarkslab/legu_unpacker_2019/tree/7b4aec6d223dfb24a60bb99151b15d0df76ea6fa/legu_packed_file.ksy" target="_blank" rel="noopener">legu_packed_file.ks&lt;/a>&lt;/p>
&lt;p>The &lt;em>hashmap&lt;/em> embedded in the second part is described in the
&lt;a href="https://github.com/quarkslab/legu_unpacker_2019/tree/7b4aec6d223dfb24a60bb99151b15d0df76ea6fa/" target="_blank" rel="noopener">legu_hashmap.ks&lt;/a> file:&lt;/p>
&lt;p align="center" >
&lt;img src="hashmap.png"/>&lt;br />
&lt;/p>
&lt;h2 id="pylegu">pylegu&lt;/h2>
&lt;p>
&lt;a href="https://github.com/quarkslab/legu_unpacker_2019/tree/7b4aec6d223dfb24a60bb99151b15d0df76ea6fa/pylegu" target="_blank" rel="noopener">pylegu&lt;/a> contains the Python bindings to decrypt and uncompress the data embedded in &lt;code>assets/0OO00l111l1l&lt;/code>.&lt;/p>
&lt;p>To compile and install &lt;code>pylegu&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ &lt;span class="nb">cd&lt;/span> pylegu
$ python3.7 ./setup.py build -j4 install --user
$ python -c &lt;span class="s2">&amp;#34;import pylegu&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>One could also use
&lt;a href="https://github.com/jap/pyucl" target="_blank" rel="noopener">jap/pyucl&lt;/a> to decompress the data and
&lt;a href="https://github.com/aguinet/dragonffi" target="_blank" rel="noopener">aguinet/dragonffi&lt;/a> to bind the custom implementation of XTEA.&lt;/p>
&lt;h2 id="get-started">Get Started&lt;/h2>
&lt;p>The sample
&lt;a href="./samples/com.intotherain.voicechange.apk">com.intotherain.voicechange.apk&lt;/a> is a
&lt;a href="https://www.virustotal.com/gui/file/708e6967920dcf2789b7183d714e73ab79a2f8b3ca71929b12aadeb2c58c2867/detection" target="_blank" rel="noopener">suspicious application&lt;/a>
that can be unpacked as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ python ./unpack.py ./samples/com.intotherain.voicechange.apk
&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> Legu version: 4.1.0.15
&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> Password is &lt;span class="s1">&amp;#39;IPk2Hw7AKTuIQBlc&amp;#39;&lt;/span>
&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> Number of dex files: &lt;span class="m">1&lt;/span>
&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> Unpacking &lt;span class="c1">#1 DEX files ...&lt;/span>
&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> dex &lt;span class="m">0&lt;/span> compressed size: 0x1619a3
&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> dex &lt;span class="m">0&lt;/span> uncompressed size: 0x5671f8
&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> Unpacking &lt;span class="c1">#1 hashmap ...&lt;/span>
&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> hashmap &lt;span class="m">0&lt;/span> compressed size: 0x4399c
&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> hashmap &lt;span class="m">0&lt;/span> uncompressed size: 0x95558
&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> Unpacking &lt;span class="c1">#1 packed methods ...&lt;/span>
&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> packed methods &lt;span class="m">0&lt;/span> compressed_size: 0xf4636
&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> packed methods &lt;span class="m">0&lt;/span> uncompressed_size: 0x1e3072
&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> Stage 2: Patching DEX files
&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> Unpacked APK: unpacked.apk
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The unpacked DEX files are located in the &lt;code>unpacked.apk&lt;/code> file.&lt;/p>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>Python &amp;gt;= 3.7&lt;/li>
&lt;li>Kaitai Struct&lt;/li>
&lt;li>LIEF&lt;/li>
&lt;li>pylegu&lt;/li>
&lt;/ul></description></item><item><title>Android Runtime Restrictions Bypass (PoC)</title><link>https://www.romainthomas.fr/project/android-runtime-restrictions-bypass/</link><pubDate>Wed, 27 Mar 2019 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/project/android-runtime-restrictions-bypass/</guid><description>&lt;p>PoC that demonstrates how to disable runtime restrictions (hidden-api and &lt;code>dlopen&lt;/code> namespaces) in user-land.&lt;/p>
&lt;center>
&lt;i class="fab fa-github">&lt;/i> &lt;a href="https://github.com/quarkslab/android-restriction-bypass">https://github.com/quarkslab/android-restriction-bypass&lt;/a>
&lt;/center></description></item><item><title>LIEF</title><link>https://www.romainthomas.fr/project/lief/</link><pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/project/lief/</guid><description>&lt;p>The purpose of this project is to provide a cross platform library to parse, modify and abstract ELF, PE and MachO formats.&lt;/p>
&lt;p>It turns out that many projects need to parse executable formats and they usually re-implement their own parser. Moreover these parsers are usually bound to one language.&lt;/p>
&lt;p>LIEF attempts to fill this void.&lt;/p></description></item></channel></rss>