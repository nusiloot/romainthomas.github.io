<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DEFAULT qbdi | Romain Thomas</title><link>https://www.romainthomas.fr/tags/qbdi/</link><atom:link href="https://www.romainthomas.fr/tags/qbdi/index.xml" rel="self" type="application/rss+xml"/><description>qbdi</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Published with Academic Website Builder</copyright><lastBuildDate>Mon, 03 Jun 2019 00:00:00 +0000</lastBuildDate><image><url>https://www.romainthomas.fr/images/icon_hu2654a0fcc87c65a864822ac27b001d3b_698_512x512_fill_lanczos_center_3.png</url><title>qbdi</title><link>https://www.romainthomas.fr/tags/qbdi/</link></image><item><title>Android Native Library Analysis with QBDI</title><link>https://www.romainthomas.fr/post/android-native-library-analysis-with-qbdi/</link><pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/post/android-native-library-analysis-with-qbdi/</guid><description>&lt;div class="alert alert-note">
&lt;div>
This post has been originally posted on the &lt;a href=https://blog.quarkslab.com/android-native-library-analysis-with-qbdi.html>Quarkslab&amp;rsquo;s Blog&lt;/a>
&lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>During the past few months we improved the ARM support in QBDI. More precisely, we enhanced the QBDI&amp;rsquo;s engine
to support Thumb and Thumb2 instructions as well as Neon registers.&lt;/p>
&lt;p>Development is still in progress and we need to clean the code and add non-regression tests
compared to the x86-64 support.&lt;/p>
&lt;p>To add Thumb and Thumb2 support, we tested the DBI against well-known obfuscators such as
&lt;a href="https://epona.quarkslab.com" target="_blank" rel="noopener">Epona&lt;/a>,
&lt;a href="https://github.com/obfuscator-llvm/obfuscator" target="_blank" rel="noopener">O-LLVM&lt;/a>
or
&lt;a href="https://www.arxan.com/" target="_blank" rel="noopener">Arxan&lt;/a>, as we could expect good instruction coverage, corner cases and nice use cases.
The native code came from Android JNI libraries embedded in different APKs.&lt;/p>
&lt;p>This blog post introduces some QBDI features that could be useful to assess native code
and speedup reverse engineering.
To expose these features, we analyzed an Android SDK that aims to protect applications against API misuse.&lt;/p>
&lt;h2 id="dynamic-instrumentation-on-android">Dynamic Instrumentation on Android&lt;/h2>
&lt;p>
&lt;a href="https://www.frida.re/" target="_blank" rel="noopener">Frida&lt;/a> is one of the Android day-to-day dynamic instrumentation framework widely
used to instrument applications.
It can address both native code with inline hooking and &lt;em>Java&lt;/em> side thanks to ART instrumentation &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Frida works at the function level and in some cases we may need to have a finer granularity
at the basic-block level or at the instruction level (i.e. have &lt;em>hooks&lt;/em> on instructions)&lt;/p>
&lt;p>To address this limitation, one trick commonly used is to combine hooking with emulation.
One can use Frida to hook the function that we are interested in, then we can dump the CPU context
and the memory state of the process and eventually continue the execution through an emulator like
&lt;a href="https://miasm.re/blog/" target="_blank" rel="noopener">Miasm&lt;/a>
or
&lt;a href="https://www.unicorn-engine.org/" target="_blank" rel="noopener">Unicorn&lt;/a>&lt;/p>
&lt;p>This approach works pretty well but has a few limitations:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Speed&lt;/strong>: For large sets of functions.&lt;/li>
&lt;li>&lt;strong>External calls&lt;/strong>: One needs to mock external calls behavior (e.g. &lt;code>strlen&lt;/code>, &lt;code>malloc&lt;/code>, &amp;hellip;).&lt;/li>
&lt;li>&lt;strong>Some behaviors can be difficult to emulate&lt;/strong>: Thread, Android internal frameworks, &amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>Moreover, while it is quite simple to mock the behavior of &lt;code>strlen&lt;/code>, it may be more challenging to mock
JNI functions behavior like &lt;code>FindClass()&lt;/code>, &lt;code>GetMethodID()&lt;/code>, &lt;code>RegisterNatives()&lt;/code>, &amp;hellip;&lt;/p>
&lt;p>The design of QBDI provides a good trade-off between full instrumentation and partial emulation thanks to
the &lt;code>ExecBrocker&lt;/code> that enables to switch between instrumented code — our function — and non-instrumented
code: &lt;code>strlen()&lt;/code>, &lt;code>FindClass()&lt;/code>, &lt;code>pthread_call_once()&lt;/code>, &amp;hellip;&lt;/p>
&lt;p>This diagram represents the instrumentation flow for the different scenarios:&lt;/p>
&lt;p>&lt;img src="qbdi_flow.png" alt="">&lt;/p>
&lt;p>For those who are interested in QBDI internals you can look at the 34C3 talk by Charles and Cédric &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.
There are also examples in the GitHub repository &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>To summarize, we can bootstrap QBDI as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="c1">// QBDI main interface
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">QBDI&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">VM&lt;/span> &lt;span class="n">vm&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// QBDI CPU state for GPR registers
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">GPRState&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getGPRState&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// Setup virtual stack
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">uint8_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fakestack&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">QBDI&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">allocateVirtualStack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* size */&lt;/span>&lt;span class="mh">0x100000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">fakestack&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// {
&lt;/span>&lt;span class="c1">// Setup instrumentation ranges, callbacks etc, ...
&lt;/span>&lt;span class="c1">// }
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// Start Instrumentation:
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">uintptr_t&lt;/span> &lt;span class="n">retval&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">bool&lt;/span> &lt;span class="n">ok&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">retval&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* Address of the function to instrument */&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Instrumentation Finished
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="sdk-overview">SDK Overview&lt;/h2>
&lt;p>Among the QBDI tests, we analyzed an SDK that aims to protect applications against API abuses.
This kind of protection is used to protect API endpoints against illegitimate uses: emulator, bots, &amp;hellip;&lt;/p>
&lt;p>To protect the main application, the solution collects information about the device state: rooted, debugged,
custom, then encodes this information with a &lt;em>proprietary&lt;/em> algorithm and sends the encoded data to a server.&lt;/p>
&lt;p>The &lt;strong>server&lt;/strong> decodes the information sent by the device collector, performs analyses to check the device
integrity and sends back a token that handles the information about whether the device is corrupted or not.&lt;/p>
&lt;p>The following figure summarizes this process:&lt;/p>
&lt;p>&lt;img src="overview.png" alt="">&lt;/p>
&lt;p>Such architecture is robust and similar to the one in
&lt;a href="https://developer.android.com/training/safetynet/attestation" target="_blank" rel="noopener">Safetynet&lt;/a> &lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>. On the other hand,
the SDK has fewer permissions than Safetynet, therefore it cannot collect as much data about
the device as SafetyNet does.&lt;/p>
&lt;p>We started the analysis by monitoring the network traffic between the SDK and its server. At some point,
we can observe the following request:&lt;/p>
&lt;p>&lt;img src="network.png" alt="">&lt;/p>
&lt;p>It is JSON encoded and the characters that look like random values are the encoded information sent
by the device collector.&lt;/p>
&lt;p>The analysis of the SDK aims to address these questions:&lt;/p>
&lt;ul>
&lt;li>How the SDK checks if the device is rooted or not ?&lt;/li>
&lt;li>How the SDK detects if the application is being debugged ?&lt;/li>
&lt;li>What kind of information is collected from the device and how it is encoded ?&lt;/li>
&lt;/ul>
&lt;p>After a look at the Java layer, we found that the logic of the solution is implemented
in a JNI library that will be named &lt;code>libApp.so&lt;/code> &lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>. The library exposes the following JNI functions:&lt;/p>
&lt;p>! 
&lt;a href="exports.png">&lt;/a>&lt;/p>
&lt;p>With static analysis, we can identify that the function &lt;code>Java_XXX_JNIWrapper_ca3_14008()&lt;/code> is the one
involved in the generation of the sequence &lt;code>&amp;quot;QJRR{JJJGQJ~|MJJJ...&amp;quot;&lt;/code>. It returns the encoded data as a
&lt;code>java.lang.String&lt;/code> and takes two parameters that are not mandatory: &lt;code>bArr&lt;/code>, &lt;code>iArr&lt;/code> &lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>&lt;img src="java.png" alt="">&lt;/p>
&lt;p>The library as a whole is not especially obfuscated. Nonetheless, we find strings encoding
and syscall replacement on well-known &lt;code>libc&lt;/code> functions:&lt;/p>
&lt;ul>
&lt;li>&lt;code>read&lt;/code>&lt;/li>
&lt;li>&lt;code>openat&lt;/code>&lt;/li>
&lt;li>&lt;code>close&lt;/code>&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>This technique is commonly used to avoid hooking but the fact is that the given syscalls are wrapped
in functions that are not inlined. Hence, one can hook the functions that wrap
the associated syscall.&lt;/p>
&lt;h2 id="get-started-with-qbdi">Get Started with QBDI&lt;/h2>
&lt;p>In order to fully understand the logic of this function, we instrumented the function through QBDI &lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup> associated
with a set of instrumentation callbacks.&lt;/p>
&lt;p>These callbacks aim to provide different kinds of information that will be useful to the analyst to understand the
function logic. For instance, we can setup a first callback that records
all the syscall instructions, we can also add a callback that records memory access.&lt;/p>
&lt;p>The purpose of this blog post is to show how few — but well chosen — callbacks enable to understand the
logic of the function.&lt;/p>
&lt;p>First of all, the native library embedded in the SDK can be loaded outside of the original APK using
&lt;code>dlopen()&lt;/code> / &lt;code>dlsym()&lt;/code>.
Moreover, one can instantiate a JVM thanks to the ART runtime (&lt;code>libart.so&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">**&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">static&lt;/span> &lt;span class="k">constexpr&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">TARGET_LIB&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;libApp.so&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">hdl&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">dlopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TARGET_LIB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RTLD_NOW&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="n">jni_func_t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jstring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">JNIEnv&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="cm">/* Other parameters are not required */&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">jni_func&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">jni_func_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dlsym&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hdl&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Java_XXX_JNIWrapper_ca3_14008&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">JavaVM&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">jvm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">JNIEnv&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ART_Kitchen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jvm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// Instantiate the JVM and initialize the jvm and env pointers
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>At this point, the &lt;code>jni_func()&lt;/code> function is tied to &lt;code>Java_XXX_JNIWrapper_ca3_14008&lt;/code> and ready to be
executed in &lt;code>main()&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">jstring&lt;/span> &lt;span class="n">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jni_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">cstring&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetStringUTFChars&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">console&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Real Output: {}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cstring&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="real_output.png" alt="">&lt;/p>
&lt;p>The output seems consistent with the network capture and the value &lt;code>&amp;quot;root: 1&amp;quot;&lt;/code> too since we are on a rooted device &lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup>&lt;/p>
&lt;p>Now, let&amp;rsquo;s run the function through QBDI:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">console&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Initializing VM ...&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">QBDI&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">VM&lt;/span> &lt;span class="n">vm&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">GPRState&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getGPRState&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kt">uint8_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fakestack&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">QBDI&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">allocateVirtualStack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x100000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">fakestack&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">console&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Instument module: {}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TARGET_LIB&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">addInstrumentedModule&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TARGET_LIB&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">console&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Simulate call in QBDI&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">jstring&lt;/span> &lt;span class="n">dbioutput&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">bool&lt;/span> &lt;span class="n">ok&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">dbioutput&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">rword&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jni_func&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">rword&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="p">)});&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ok&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">dbioutput&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">console&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;DBI output {:x}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetStringUTFChars&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dbioutput&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This code provides the following output:&lt;/p>
&lt;p>&lt;img src="dbi_output.png" alt="">&lt;/p>
&lt;p>Everything looks good, QBDI managed to &lt;strong>fully&lt;/strong> instrument the function (which includes ARM / Thumb switch)
and the result is similar to the real execution.&lt;/p>
&lt;h1 id="analysis">Analysis&lt;/h1>
&lt;p>Now that we are able to run and instrument the function,
we can start to add instrumentation callbacks to analyze its behavior.&lt;/p>
&lt;p>One of the first callbacks that is useful to setup is a callback that instruments syscall
instructions (i.e. &lt;code>svc #0&lt;/code>). To do so, we can use the &lt;code>vm.addSyscallCB(position, callback, data)&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>position&lt;/strong> - It stands for the position of the callback: Before or after the syscall.&lt;/li>
&lt;li>&lt;strong>callback&lt;/strong> - The callback itself.&lt;/li>
&lt;li>&lt;strong>data&lt;/strong> - Pointer to user data (e.g. user context that register dynamic information)&lt;/li>
&lt;/ul>
&lt;p>It leads to the following piece of code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">auto&lt;/span> &lt;span class="n">syscall_enter_cbk&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">VMInstanceRef&lt;/span> &lt;span class="n">vm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GPRState&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">gprState&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">FPRState&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fprState&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="n">InstAnalysis&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">analysis&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vm&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getInstAnalysis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ANALYSIS_INSTRUCTION&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">ANALYSIS_DISASSEMBLY&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">rword&lt;/span> &lt;span class="n">syscall_number&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gprState&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">r7&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="cm">/*
&lt;/span>&lt;span class="cm"> * std::string sys_str = lookup[syscall_number]; // Lookup table that convert syscall number to function
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="n">console&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;0x{:06x} {} ({})&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">addr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">analysis&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">disassembly&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sys_str&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">VMAction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">CONTINUE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">addSyscallCB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PREINST&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">syscall_enter_cbk&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* data */&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Before any syscall instructions, we perform a basic lookup on the syscall number stored in the &lt;strong>R7&lt;/strong> register
to resolve its name.&lt;/p>
&lt;p>It results in the following output:&lt;/p>
&lt;p>&lt;img src="syscall.1.png" alt="">&lt;/p>
&lt;p>Since we are able to resolve syscall numbers into function names, we can improve the logic of callback
to dispatch and print function parameters:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">auto&lt;/span> &lt;span class="n">syscall_enter_cbk&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span> &lt;span class="p">(...)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="cm">/*
&lt;/span>&lt;span class="cm"> * Lookup table (syscall number, function pointer)
&lt;/span>&lt;span class="cm"> * {
&lt;/span>&lt;span class="cm"> * 322 -&amp;gt; on_openat
&lt;/span>&lt;span class="cm"> * }
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">function_wrapper&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">func_lookup&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">syscall_number&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nf">function_wrapper&lt;/span>&lt;span class="p">(...)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Wrapper for openat syscall
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">VMAction&lt;/span> &lt;span class="n">on_openat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">VMInstanceRef&lt;/span> &lt;span class="n">vm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GPRState&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">gprState&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gprState&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">r1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">console&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;openat({})&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">VMAction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">CONTINUE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>By doing so on the common syscalls number, we get this new trace:&lt;/p>
&lt;p>&lt;img src="syscall.2.png" alt="">&lt;/p>
&lt;p>Based on this output, we can figure out how root check (orange area) is done. It is performed by checking
the existence of the following binaries:&lt;/p>
&lt;ul>
&lt;li>/system/bin/su&lt;/li>
&lt;li>/system/xbin/su&lt;/li>
&lt;li>/sbin/su&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>The function also checks if some directories are present on the device (&lt;code>faccessat&lt;/code> syscall):&lt;/p>
&lt;ul>
&lt;li>/data&lt;/li>
&lt;li>/tmp&lt;/li>
&lt;li>/system&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>Especially, it would be suspicious if the directory &lt;code>/tmp&lt;/code> were present on the &lt;em>device&lt;/em> while it is standard to
have &lt;code>/system&lt;/code> and &lt;code>/data&lt;/code> directories.&lt;/p>
&lt;p>Regarding the debug state of the process (blue area), it is done by looking at &lt;code>/proc/self/status&lt;/code>. After
analysis, the function checks the &lt;code>TracerPID&lt;/code> attribute
(cf
&lt;a href="https://www.vantagepoint.sg/blog/89-more-android-anti-debugging-fun" target="_blank" rel="noopener">More Android Anti-Debugging Fun - B. Mueller&lt;/a>)&lt;/p>
&lt;p>Finally, the function processes the output of &lt;code>/proc/self/maps&lt;/code> right before to returning the encoded values.
It suggests that the data collected by the solution are based on this resource.&lt;/p>
&lt;h3 id="encoding-routine">Encoding Routine&lt;/h3>
&lt;p>In the previous part we got a global overview about how the solution achieves root detection,
debug detection and what kind of data is collected (i.e. process memory map).&lt;/p>
&lt;p>However, some questions are pending:&lt;/p>
&lt;ul>
&lt;li>What part of the process memory map is used: Base addresses ? Module paths ? Permissions ?&lt;/li>
&lt;li>How the data are encoded (i.e. how &lt;code>QJRR{JJJGQJ~|MJJJ...&lt;/code> is generated) ?&lt;/li>
&lt;/ul>
&lt;p>Along with the QBDI ARM support, we also added ARM support to resolve &lt;strong>memory addresses&lt;/strong> during the
instrumentation.
It means that QBDI is now able to resolve &lt;strong>the effective memory address&lt;/strong> of instructions such as:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-armasm" data-lang="armasm">LDR R0, [R1, R2]; # Resolve R1 + R2
STR R1, [R2, R3, LSL #2]; # Resolve R2 + R3 * 4
LDRB [PC, #4]; # Resolve **real** PC + 4
&lt;/code>&lt;/pre>&lt;p>Moreover, QBDI is also able to get &lt;strong>the effective memory value&lt;/strong> that is read or written. This feature
is quite useful in the case of conditional instructions such as:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-armasm" data-lang="armasm">ITT LS;
LDRLS R0, [R4];
LDRLS R1, [R0, #4]
&lt;/code>&lt;/pre>&lt;p>The &lt;strong>effective&lt;/strong> value of &lt;code>R0&lt;/code> and &lt;code>R1&lt;/code> is stored in QBDI. It may not be
&lt;code>*(r4)&lt;/code> and &lt;code>*(r0 + 4)&lt;/code> since the &lt;code>LS&lt;/code> condition may not be verified.&lt;/p>
&lt;p>To add a callback on memory accesses, we can use the &lt;code>addMemAccessCB(...)&lt;/code> function on the VM instance:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">addMemAccessCB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MEMORY_READ_WRITE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">memory_callback&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* data */&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the given &lt;code>memory_callback(...)&lt;/code> function, we perform the following actions:&lt;/p>
&lt;ul>
&lt;li>Track memory &lt;strong>byte&lt;/strong> accesses.&lt;/li>
&lt;li>Check if the value is printable.&lt;/li>
&lt;li>Pretty print the R/W value.&lt;/li>
&lt;/ul>
&lt;p>The idea of this callback is to track memory accesses that are performed on printable characters. It enables
to quickly identify strings encoding/decoding routines.&lt;/p>
&lt;p>Here is the implementation of the callback:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">VMAction&lt;/span> &lt;span class="nf">memory_callback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">VMInstanceRef&lt;/span> &lt;span class="n">vm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GPRState&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">gprState&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">auto&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">acc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vm&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getInstMemoryAccess&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// Get last memory access
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">MemoryAccess&lt;/span> &lt;span class="n">maccess&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">acc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">back&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// Retrieve access information:
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">rword&lt;/span> &lt;span class="n">addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">maccess&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">accessAddress&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Address accessed
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">rword&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">maccess&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Value read or written
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">rword&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">maccess&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Access size
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// Only look for byte access
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">VMAction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">CONTINUE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Read / Write operation as a string
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">kind&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">maccess&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">MemoryAccessType&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">MEMORY_READ&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s">&amp;#34;[R]&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s">&amp;#34;[W]&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Cast the value into a char
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">cvalue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">static_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Check if the value read or written is printable
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">isprint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cvalue&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;0x{:x} {}: {}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">addr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">kind&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cvalue&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// Pretty print
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="c1">// Continue this execution
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">VMAction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">CONTINUE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With this new callback, we can observe such output between two &lt;code>openat()&lt;/code> syscalls involved in the
&lt;code>root&lt;/code> check routine:&lt;/p>
&lt;p>&lt;img src="su_decode.png" alt="">&lt;/p>
&lt;p>It is basically the string decoding routine in action. Note that some read operations are missing
since we only track &lt;strong>printable&lt;/strong> characters. However all write operations are present.&lt;/p>
&lt;p>The routine &lt;strong>loads&lt;/strong> characters with the instruction at address &lt;strong>0x295e&lt;/strong> and &lt;strong>stores&lt;/strong> the decoded
value at address &lt;strong>0x2972&lt;/strong>. If we look at the function that handles these two addresses, we find
the decoding routine:&lt;/p>
&lt;p>&lt;img src="decoding_routine.png" alt="">&lt;/p>
&lt;p>In the above figure, the &lt;strong>green&lt;/strong> section highlights the memory &lt;strong>load access&lt;/strong> while the &lt;strong>red&lt;/strong> one highlights
the &lt;strong>write operation&lt;/strong>. The &lt;strong>blue&lt;/strong> area is the &lt;strong>decoding logic&lt;/strong>.&lt;/p>
&lt;p>The output of &lt;strong>all&lt;/strong> read / write accesses turns out to be quite verbose on the whole execution of the function.
We can improve the instrumentation by adding two callbacks before and after function &lt;strong>calls&lt;/strong>
with this purpose:&lt;/p>
&lt;ol>
&lt;li>Before calls, we print the target address (e.g. &lt;code>0x123: blx r3 -&amp;gt; .text!0xABC&lt;/code>).&lt;/li>
&lt;li>After calls we print &lt;strong>all&lt;/strong> printable characters being read or written &lt;strong>within the called function&lt;/strong>.&lt;/li>
&lt;/ol>
&lt;p>The &lt;code>addCallCB(...)&lt;/code> is still in experimentation but it aims to put callbacks before or after call instructions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="c1">// Callback before ``call`` instructions
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">addCallCB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PRECALL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">on_call_enter&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Callback when a ``call`` returns
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">addCallCB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">POSTCALL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">on_call_exit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With these two callbacks we get the following output:&lt;/p>
&lt;p>&lt;img src="memtrace.0.png" alt="">&lt;/p>
&lt;p>By going further in the memory trace, we can observe this output:&lt;/p>
&lt;p>&lt;img src="memtrace.png" alt="">&lt;/p>
&lt;p>From this output we can infer the behavior of the collector (pseudo-code):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">f&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;/proc/self/maps&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">readlines&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="s2">&amp;#34;/&amp;#34;&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">line&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># Avoid entries such as XXX-YYY ... [anon:linker_alloc]&lt;/span>
&lt;span class="k">continue&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="s2">&amp;#34;-xp&amp;#34;&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="c1"># Process executable segments only&lt;/span>
&lt;span class="k">continue&lt;/span>
&lt;span class="n">buffer&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">encode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">line&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can also observe a sequence of&lt;/p>
&lt;ol>
&lt;li>&lt;strong>READ&lt;/strong> &lt;code>line[i]&lt;/code>&lt;/li>
&lt;li>&lt;strong>CALL&lt;/strong> &lt;code>.text!0xd2ba&lt;/code>&lt;/li>
&lt;li>&lt;strong>WRITE&lt;/strong> &lt;code>encoded(line[i])&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>It suggests that the logic of the &lt;code>encode()&lt;/code> function is implemented at address &lt;strong>0xd2ba&lt;/strong>.&lt;/p>
&lt;p>The CFG of this function is compounded by instructions that compare the input against &lt;em>magic&lt;/em> printable
values and we manually checked that it is the encoding function. Moreover this function is — by design — reversible since
the server side algorithm needs to process the &lt;em>encoded&lt;/em> data.&lt;/p>
&lt;p>&lt;img src="encoding_routine.png" alt="">&lt;/p>
&lt;h1 id="library-lifting">Library lifting&lt;/h1>
&lt;p>In the previous parts, we targeted the ARM version of the library. It turns out that SDKs which use
native libraries usually provide the libraries for all architectures (&lt;code>arm&lt;/code>, &lt;code>arm64&lt;/code>, &lt;code>x86&lt;/code>, &lt;code>x86-64&lt;/code>).&lt;/p>
&lt;p>Indeed, they do not want to limit developers to some architectures. The solution previously analyzed also
comes with a &lt;code>x86-64&lt;/code> version of &lt;code>libApp.so&lt;/code> with the exact same interface.&lt;/p>
&lt;p>Moreover, the analysis done in the previous sections shows that there are no real dependencies to the Android system:&lt;/p>
&lt;ul>
&lt;li>Syscall are standards and available on Linux.&lt;/li>
&lt;li>&lt;code>/proc/self/maps&lt;/code> and &lt;code>/proc/self/status&lt;/code> are available on Linux.&lt;/li>
&lt;/ul>
&lt;p>Thus, we can &lt;em>lift&lt;/em> the library and run it on Linux. This technique has already been described in this
blog post:
&lt;a href="https://blog.quarkslab.com/when-sidechannelmarvels-meet-lief.html" target="_blank" rel="noopener">When SideChannelMarvels meet LIEF&lt;/a>.&lt;/p>
&lt;p>In a first step, we have to patch the library with LIEF:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">lief&lt;/span>
&lt;span class="n">libApp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;libApp.so&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Patch library names&lt;/span>
&lt;span class="c1"># ===================&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;libc.so&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;libc.so.6&amp;#34;&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;liblog.so&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;libc.so.6&amp;#34;&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;libm.so&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;libm.so.6&amp;#34;&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;libdl.so&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;libdl.so.2&amp;#34;&lt;/span>
&lt;span class="c1"># Patch dynamic entries&lt;/span>
&lt;span class="c1"># =====================&lt;/span>
&lt;span class="c1"># 1. Remove ELF constructors&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">INIT_ARRAY&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">INIT_ARRAY&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DEBUG&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">INIT_ARRAYSZ&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">FINI_ARRAY&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">FINI_ARRAY&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DEBUG&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">FINI_ARRAYSZ&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="c1"># 2. Remove symbol versioning&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">VERNEEDNUM&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DEBUG&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">VERNEED&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DEBUG&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">VERDEFNUM&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DEBUG&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">VERDEF&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DEBUG&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">VERSYM&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DEBUG&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;libApp-x86-64.so&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, we can instantiate a Linux JVM and run the native function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">JavaVM&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">jvm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">JNIEnv&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">env&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// JVM options
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">JavaVMOption&lt;/span> &lt;span class="n">opt&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">JavaVMInitArgs&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="c1">// JVM instantiation
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">JNI_CreateJavaVM&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">jvm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">**&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Load the library
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">hdl&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">dlopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;libApp-x86-64.so&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RTLD_LAZY&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">RTLD_LOCAL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Resolve the functions
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">using&lt;/span> &lt;span class="n">abi_t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">JNIEnv&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="n">jni_func_t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jstring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">JNIEnv&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">auto&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">jni_get_abi&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">abi_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dlsym&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hdl&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Java_XXX_JNIWrapper_ca3_14007&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">auto&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">jni_func&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">jni_func_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dlsym&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hdl&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Java_XXX_JNIWrapper_ca3_14008&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="c1">// Execute
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">jint&lt;/span> &lt;span class="n">abi&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jni_get_abi&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">console&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ABI: {:d}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">abi&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">jstring&lt;/span> &lt;span class="n">encoded&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jni_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">console&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ca3_14008(): {}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetStringUTFChars&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">encoded&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">EXIT_SUCCESS&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>By executing this code, we get a similar output as seen in the previous parts:&lt;/p>
&lt;p>&lt;img src="rip.png" alt="">&lt;/p>
&lt;p>We can also run the &lt;code>strace&lt;/code> utility to inspect the syscalls:&lt;/p>
&lt;p>&lt;img src="strace.png" alt="">&lt;/p>
&lt;p>Since we are able to run the function on Linux, we could also use &lt;code>gdb&lt;/code>, &lt;code>Intel PIN&lt;/code> or &lt;code>QBDI(x86-64)&lt;/code>
to analyze the library.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>While it has been quite challenging to add the whole ARM support in QBDI, it starts to work pretty well on real
use cases. Such support should also lead to interesting applications among which:&lt;/p>
&lt;ul>
&lt;li>HongFuzz / QBDI for Android.&lt;/li>
&lt;li>
&lt;a href="https://github.com/SideChannelMarvels" target="_blank" rel="noopener">SideChannelMarvels&lt;/a> integration for CPA attacks.&lt;/li>
&lt;li>Trustlets instrumentation.&lt;/li>
&lt;/ul>
&lt;p>The raw traces used in this blog post are available here: &lt;code>traces.zip &amp;lt;resources/2019-06-15-android-jni-library-p1/traces.zip&amp;gt;&lt;/code>_&lt;/p>
&lt;h2 id="acknowledgments">Acknowledgments&lt;/h2>
&lt;p>Many thanks to Charles Hubain and Cédric Tessier who developed and designed QBDI. It is really pleasant
to work on the concepts involved in this DBI.&lt;/p>
&lt;p>Thanks to the LLVM community to provide such framework without which this project would not be possible.&lt;/p>
&lt;p>Thanks to my Quarkslab colleagues who proofread this article.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Frida modifies fields of the &lt;code>art::ArtMethod&lt;/code> object associated with the Java method.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>
&lt;a href="https://qbdi.quarkslab.com/QBDI_34c3.pdf" target="_blank" rel="noopener">Slides&lt;/a> -
&lt;a href="https://media.ccc.de/v/34c3-9006-implementing_an_llvm_based_dynamic_binary_instrumentation_framework" target="_blank" rel="noopener">Talk&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>
&lt;a href="https://github.com/QBDI/QBDI/blob/master/examples" target="_blank" rel="noopener">https://github.com/QBDI/QBDI/blob/master/examples&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>DroidGuard being the SafetyNet module that collects information about the device.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>The name has been intentionally changed.&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6" role="doc-endnote">
&lt;p>Plus the &lt;code>this&lt;/code> parameter which is a &lt;code>jclass&lt;/code> object for a static method.&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7" role="doc-endnote">
&lt;p>Even though static analysis would be enough in this case.&amp;#160;&lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:8" role="doc-endnote">
&lt;p>Nexus 5X - Android 8.1.0 - Rooted with Magisk.&amp;#160;&lt;a href="#fnref:8" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item></channel></rss>