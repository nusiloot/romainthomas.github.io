<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DEFAULT cryptography | Romain Thomas</title><link>https://www.romainthomas.fr/tags/cryptography/</link><atom:link href="https://www.romainthomas.fr/tags/cryptography/index.xml" rel="self" type="application/rss+xml"/><description>cryptography</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Published with Academic Website Builder</copyright><lastBuildDate>Sun, 27 Sep 2020 00:00:00 +0000</lastBuildDate><image><url>https://www.romainthomas.fr/images/icon_hu2654a0fcc87c65a864822ac27b001d3b_698_512x512_fill_lanczos_center_3.png</url><title>cryptography</title><link>https://www.romainthomas.fr/tags/cryptography/</link></image><item><title>r2-pay: whitebox (part 2)</title><link>https://www.romainthomas.fr/post/20-09-r2con-obfuscated-whitebox-part2/</link><pubDate>Sun, 27 Sep 2020 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/post/20-09-r2con-obfuscated-whitebox-part2/</guid><description>&lt;style>
.green {
color:green;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.blue {
color: blue;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.orange {
color: #FF6347;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.red {
color: #df2b04;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.hl-comment {
color: #df2b04;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.hl-keyword {
color: #A90D91;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.hl-literal {
color: #1C01CE;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.hl-preproc {
color: #633820;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.hl-strings {
color: #C41A16;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.yellow {
color: #CC7000;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
#
&lt;/style>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In the
&lt;a href="https://www.romainthomas.fr/post/20-09-r2con-obfuscated-whitebox-part1/">first part&lt;/a> of this write-up, we described the
anti-frida, anti-debug and anti-root techniques used in the application and how to remove most of them.&lt;/p>
&lt;p>This second part digs into the JNI function &lt;code>gXftm3iswpkVgBNDUp&lt;/code> and the underlying whitebox implementation.&lt;/p>
&lt;h2 id="library-shimming">Library Shimming&lt;/h2>
&lt;p>The inputs of the function &lt;code>gXftm3iswpkVgBNDUp&lt;/code> are provided by the GUI widgets and the function
is triggered when we press the &lt;em>Generate R2Coin&lt;/em> button.
Nevertheless, the behavior of &lt;code>gXftm3iswpkVgBNDUp&lt;/code> does not rely on UI features nor
the application&amp;rsquo;s context&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>To take a closer look at the logic of &lt;code>gXftm3iswpkVgBNDUp&lt;/code>, it would be pretty useful to be able to feed
the function&amp;rsquo;s inputs with our &lt;strong>own standalone binary&lt;/strong>. Basically, we would like to achieve this kind
of interface:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">**&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">dlopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;libnative-lib.so&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RTLD_NOW&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="n">jbyteArray&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gXftm3iswpkVgBNDUp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This technique is not new and has been already described in a blog post by
&lt;a href="https://twitter.com/caleb_fenton" target="_blank" rel="noopener">Caleb Fenton&lt;/a>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>. The idea is to get
the &lt;code>JNIEnv* env&lt;/code> variable with &lt;code>JNI_CreateJavaVM&lt;/code> which is exported by the Android runtime: &lt;code>libart.so&lt;/code>.&lt;/p>
&lt;p>Once we have this variable, we can call the &lt;code>gXftm3iswpkVgBNDUp&lt;/code> function as well as manipulating the JNI buffers:&lt;/p>
&lt;ul>
&lt;li>&lt;code>env-&amp;gt;NewByteArray()&lt;/code>&lt;/li>
&lt;li>&lt;code>env-&amp;gt;GetArrayLength()&lt;/code>&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="shim_mechanism.png" alt="Shimming of whitebox library">&lt;/p>
&lt;p>Long story short, we can instantiate the Android runtime with the following piece of code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">**&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">JavaVMOption&lt;/span> &lt;span class="n">opt&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">opt&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">optionString&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;-Djava.class.path=/data/local/tmp/re.pwnme.1.0.apk&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">opt&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">optionString&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;-Djava.library.path=/data/local/tmp&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">JavaVMInitArgs&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">args&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">version&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">JNI_VERSION_1_6&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">args&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">options&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">opt&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">args&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">nOptions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">args&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ignoreUnrecognized&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">JNI_FALSE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">handler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">dlopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/system/lib64/libart.so&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RTLD_NOW&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">JNI_CreateJavaVM_f&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">decltype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">JNI_CreateJavaVM&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dlsym&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">handler&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;JNI_CreateJavaVM&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">JNI_CreateJavaVM_f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">jvm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, we can resolve the &lt;code>gXftm3iswpkVgBNDUp&lt;/code> function with the base address of &lt;code>libnative-lib.so&lt;/code>
and its offset &lt;code>0x9B41C&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">hdl&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">dlopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;libnative-lib.so&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RTLD_NOW&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">uintptr_t&lt;/span> &lt;span class="n">base_address&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_base_address&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;libnative-lib.so&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="n">gXftm3iswpkVgBNDUp_t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jbyteArray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">JNIEnv&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">jobject&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">jbyteArray&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">jbyte&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">gXftm3iswpkVgBNDUp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">gXftm3iswpkVgBNDUp_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">base_address&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">0x9B41C&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, we can run the function with our own inputs:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">pin_amount&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;0000123400004567&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">jbyteArray&lt;/span> &lt;span class="n">array&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">convert_to_jbyteArray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pin_amount&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">jbyteArray&lt;/span> &lt;span class="n">jencrypted_buffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gXftm3iswpkVgBNDUp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xF0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">uint8_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">encrypted_buffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">from_jbytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jencrypted_buffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">hex_str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">to_hex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">encrypted_buffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">LOG_INFO&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{} --&amp;gt; {}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pin_amount&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ref_str&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="alert alert-note">
&lt;div>
The whole implementation is available &lt;a href="https://github.com/romainthomas/r2pay/blob/master/shim-whitebox">here &lt;i class="fab fa-github">&lt;/i>&lt;/a>.
&lt;/div>
&lt;/div>
&lt;h2 id="function-tracing">Function Tracing&lt;/h2>
&lt;p>Now that we are able to run the &lt;code>gXftm3iswpkVgBNDUp&lt;/code> function without the GUI layer, we can easily
create an interface with
&lt;a href="https://qbdi.quarkslab.com" target="_blank" rel="noopener">QBDI&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">VM&lt;/span> &lt;span class="n">vm&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">addInstrumentedModule&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;libnative-lib.so&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="n">jbyteArray&lt;/span> &lt;span class="n">array&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">to_jarray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pin_amount&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">jbyteArray&lt;/span> &lt;span class="n">qbdi_encrypted_buffer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">call&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="cm">/* ret */&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">uintptr_t&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">qbdi_encrypted_buffer&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="cm">/* target */&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">uintptr_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gXftm3iswpkVgBNDUp&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="cm">/* params */&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="cm">/* p_0: JNIEnv* */&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">rword&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="cm">/* p_1: jobject thiz */&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">rword&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">nullptr&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="cm">/* p_2: inbuffer */&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">rword&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="mh">0xF0&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The execution in QBDI &lt;strong>without user&amp;rsquo;s callbacks&lt;/strong> takes about &lt;strong>3min 30s&lt;/strong> which is quite huge compared to
the &lt;strong>real execution&lt;/strong> that takes about &lt;strong>853ms&lt;/strong>:&lt;/p>
&lt;p>&lt;img src="benchmark.svg" alt="Performances with different configurations">&lt;/p>
&lt;p>This overhead is mostly due to the function &lt;code>0x1038f0&lt;/code> that is executed ~20 000 times. After a quick
analysis, it turns out that this function is not relevant to instrument to break the whitebox.
We can force its &lt;em>real&lt;/em> execution
(i.e. outside QBDI) &lt;strong>by removing the function&amp;rsquo;s address from the instrumented range&lt;/strong>&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">static&lt;/span> &lt;span class="k">constexpr&lt;/span> &lt;span class="n">uintptr_t&lt;/span> &lt;span class="n">HEAVY_FUNCTION&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x1038f0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">removeInstrumentedRange&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">base_address&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">HEAVY_FUNCTION&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">base_address&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">HEAVY_FUNCTION&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This small adjustment &lt;strong>drops the execution to 3'30sec&lt;/strong>.&lt;/p>
&lt;hr>
&lt;p>Some cryptographic algorithms can be fingerprinted either with predefined constants or with their memory accesses.
According to the Quarkslab&amp;rsquo;s blog post:
&lt;a href="https://blog.quarkslab.com/differential-fault-analysis-on-white-box-aes-implementations.html" target="_blank" rel="noopener">Differential Fault Analysis on White-box AES Implementations&lt;/a>,
the whitebox lookup tables are likely to be stored in the &lt;code>.data, .rodata, ...&lt;/code> sections.&lt;/p>
&lt;p>By looking at the sizes of these sections, only the &lt;code>.data&lt;/code> section seems to have an appropriate size.
We can generate a memory trace on this section to see if we can outline some patterns.
It can be made with the following piece of code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">recordMemoryAccess&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MEMORY_READ_WRITE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">addMemRangeCB&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="cm">/* .data start address */&lt;/span> &lt;span class="n">base_address&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">0x127000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="cm">/* .data end address */&lt;/span> &lt;span class="n">base_address&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">0x127000&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">0x8e000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="cm">/* Record both: reads and writes */&lt;/span> &lt;span class="n">MEMORY_READ_WRITE&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="cm">/* Memory callback */&lt;/span>
&lt;span class="p">[]&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">VM&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">vm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GPRState&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">FPRState&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">qbdi_ctx&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="cm">/*
&lt;/span>&lt;span class="cm"> * &amp;#39;for&amp;#39; loop since on AArch64 we can have multiple reads / writes
&lt;/span>&lt;span class="cm"> * at once. (e.g. stp x0, x1, [sp, #128])
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">MemoryAccess&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="nl">mem_access&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">vm&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getInstMemoryAccess&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">trace&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="n">mem_access&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">instAddress&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">base_address&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">mem_access&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">accessAddress&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">base_address&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">mem_access&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">VMAction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">CONTINUE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="alert alert-note">
&lt;div>
Generating the memory trace takes about 11sec which is acceptable.
&lt;/div>
&lt;/div>
&lt;p>It leads to the following graph in which we can notice a characteristic pattern at the end of the trace:&lt;/p>
&lt;p>&lt;img src="memory_trace.png" alt="Memory trace generated with QBDI">&lt;/p>
&lt;h2 id="fault-injection">Fault Injection&lt;/h2>
&lt;p>The pattern at the end of the trace is quite characteristic of AES-128 where we can identify 10 rounds.
&lt;img src="rounds.png" alt="AES rounds">&lt;/p>
&lt;p>We now have all the necessary information to make a &lt;em>fault injection attack&lt;/em>:&lt;/p>
&lt;ol>
&lt;li>We can identify the 9th round&lt;/li>
&lt;li>We can &lt;strong>accurately&lt;/strong> fault the &lt;code>.data&lt;/code> section thanks to the memory trace&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="injection.png" alt="Fault injection in the 9th round">&lt;/p>
&lt;div class="alert alert-note">
&lt;div>
The memory trace is available in the &lt;a href="https://github.com/romainthomas/r2pay/blob/master/assets/mem_trace.json">&lt;i class="fab fa-github">&lt;/i> mem_trace.json&lt;/a> file of the repository.
&lt;/div>
&lt;/div>
&lt;p>To efficiently make
the injection, we can first reduce the memory addresses to only keep those that are used in the last 2 rounds:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">trace_file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CWD&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="s2">&amp;#34;..&amp;#34;&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="s2">&amp;#34;assets&amp;#34;&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="s2">&amp;#34;mem_trace.json&amp;#34;&lt;/span>
&lt;span class="n">trace&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">json&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">loads&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">trace_file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read_bytes&lt;/span>&lt;span class="p">())[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c1"># Keep the entries that are involved in the last 2-rounds (empirical number)&lt;/span>
&lt;span class="n">nice_trace&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">trace&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">:]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, we can use our shim mechanism to inject the faults in the &lt;code>.data&lt;/code> section with the addresses previously selected.
Moreover, we can reduce the set of &lt;code>.data&lt;/code> addresses with the faults that introduce exactly &lt;strong>4 differences&lt;/strong> in the ciphertext:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="c1">// Make sure the .data section is writable
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">mprotect&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">base_address&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="cm">/* .data */&lt;/span> &lt;span class="mh">0x127000&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="mh">0x8e000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">PROT_READ&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">PROT_WRITE&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uintptr_t&lt;/span> &lt;span class="nl">fault_addr&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">selected_addresses&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">uint8_t&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">target_byte&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">uint8_t&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">base_address&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">fault_addr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">uint8_t&lt;/span> &lt;span class="n">backup&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">target_byte&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Fault 1 byte:
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">target_byte&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="mh">0x33&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Run the whitebox with the faulty byte
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">uint8_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">encrypted&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">encrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Restore the original byte
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">target_byte&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">backup&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Compute the number of errors
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// ...
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, with the subset of the addresses that affect exactly 4 bytes, we can generate several faults for a given
address:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uintptr_t&lt;/span> &lt;span class="nl">nice_fault_addr&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">four_bytes_fault_addresses&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">uint8_t&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">inject_fault&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">addr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PIN_AMOUNT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">nb_errors&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">genuine_value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">output&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">nb_errors&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">unique&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">second&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Record the entry ...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The aforementioned code gives an idea about how to generate the faults. One can find the whole implementation in
this file:
&lt;a href="https://github.com/romainthomas/r2pay/blob/master/shim-whitebox/src/main.cpp#L343-L365" target="_blank" rel="noopener">shim-whitebox/src/main.cpp&lt;/a> that produces
this set of files
&lt;a href="https://github.com/romainthomas/r2pay/blob/master/assets/wb-traces" target="_blank" rel="noopener">assets/wb-traces&lt;/a>.&lt;/p>
&lt;h2 id="key-extraction">Key Extraction&lt;/h2>
&lt;p>Thanks to the
&lt;a href="https://github.com/SideChannelMarvels" target="_blank" rel="noopener">&lt;i class="fab fa-github">&lt;/i> Side-Channel Marvels&lt;/a> project,
we can use
&lt;a href="https://github.com/SideChannelMarvels/JeanGrey" target="_blank" rel="noopener">JeanGrey&lt;/a> &amp;mdash; developed by Philippe Teuwen &amp;mdash; to recover the whitebox&amp;rsquo;s key from the faulty traces:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">pathlib&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">phoenixAES&lt;/span>
&lt;span class="n">CWD&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pathlib&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="vm">__file__&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>
&lt;span class="n">trace_dir&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CWD&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="s2">&amp;#34;..&amp;#34;&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="s2">&amp;#34;assets&amp;#34;&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="s2">&amp;#34;wb-traces&amp;#34;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">trace_dir&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">iterdir&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">phoenixAES&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">crack_file&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It provides the following results which enable to retrieve the key:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="gp">$ &lt;/span>python wb_key_recovery.py
&lt;span class="go">..8D....7F............9A....79.. injection-1a930d.trace
&lt;/span>&lt;span class="go">..8D....7F............9A....79.. injection-1a95bd.trace
&lt;/span>&lt;span class="go">....19....62....B0............8F injection-1a91b2.trace
&lt;/span>&lt;span class="go">....19....62....B0............8F injection-1a8fdf.trace
&lt;/span>&lt;span class="go">76............1E....D3....E1.... injection-1a8549.trace
&lt;/span>&lt;span class="go">......E1....A0....CD....28...... injection-1a8978.trace
&lt;/span>&lt;span class="go">....19....62....B0............8F injection-1a90ce.trace
&lt;/span>&lt;span class="go">....19....62....B0............8F injection-1a8efd.trace
&lt;/span>&lt;span class="go">r 2 p 4 y 1 s N 0 w S e c u r 3
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, we can verify that &lt;strong>r2p4y1sN0wSecur3&lt;/strong> is the right key by trying to decrypt &lt;code>9497cdf1df2600e7f63778d0ae91dcbb&lt;/code>&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">Crypto.Cipher&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">AES&lt;/span>
&lt;span class="n">WB_KEY&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s2">&amp;#34;r2p4y1sN0wSecur3&amp;#34;&lt;/span>
&lt;span class="n">cipher&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AES&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">WB_KEY&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">AES&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">MODE_ECB&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cipher&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">bytes&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fromhex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;9497cdf1df2600e7f63778d0ae91dcbb&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="gp">$ &lt;/span>python ./aes_test.py
&lt;span class="go">0000123400004567
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="side-note-about-the-data-section">Side note about the &lt;code>.data&lt;/code> section&lt;/h2>
&lt;p>Most of the obfuscators encode strings so that we don&amp;rsquo;t have any clue about functions' logic. The obfuscator
used in the challenge follows this rule and running the &lt;code>strings&lt;/code> utility on the library does not reveal any interesting information.&lt;/p>
&lt;p>Nevertheless, we can find a lot of &lt;code>.datadiv_decode&amp;lt;random hex&amp;gt;&lt;/code> in the ELF constructors of the library.
As explained in the previous part, they are generated by the obfuscator and aimed to decode the strings.&lt;/p>
&lt;p>Since these functions are in the &lt;strong>ELF constructors&lt;/strong>, this means that they are executed as soon as the library is loaded.
In particular, when calling &lt;code>dlopen(...)&lt;/code> these constructors are executed. It can be confirmed by
dumping the &lt;code>.data&lt;/code> section right after &lt;code>dlopen()&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">dlopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;libnative-lib.so&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RTLD_NOW&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ofstream&lt;/span> &lt;span class="n">ofs&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">fmt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/data/local/tmp/{}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">output&lt;/span>&lt;span class="p">)};&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">base_address&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">0x127000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">ofs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* sizeof(.data) */&lt;/span> &lt;span class="mh">0x8d49f&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, we can compare the bytes distribution with
&lt;a href="https://binvis.io/" target="_blank" rel="noopener">binvis.io&lt;/a>:&lt;/p>
&lt;p>&lt;img src="data_strings.png" alt="Bytes distribution in the .data section">&lt;/p>
&lt;p>At the end of the in-memory &lt;code>.data&lt;/code> section, we can found interesting strings used to detect Frida and the
device&amp;rsquo;s root state.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Thanks again to &lt;u>Eduardo Novella&lt;/u> (
&lt;a href="https://twitter.com/enovella_" target="_blank" rel="noopener">@enovella_&lt;/a>)
and &lt;u>Gautam Arvind&lt;/u> (
&lt;a href="https://twitter.com/darvincisec" target="_blank" rel="noopener">@darvincisec&lt;/a>) for this second part of the challenge :)&lt;/p>
&lt;p>Also thanks to &lt;u>
&lt;a href="https://www.quarkslab.com" target="_blank" rel="noopener">Quarkslab&lt;/a>&lt;/u> that allowed this publication.
One can find related blog posts about whitebox attacks on the Quarkslab&amp;rsquo;s blog:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>
&lt;a href="https://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html" target="_blank" rel="noopener">Introduction to Whiteboxes and Collision-Based Attacks With QBDI
&lt;/a> by Paul Hernault (
&lt;a href="https://twitter.com/0xAcid" target="_blank" rel="noopener">@0xAcid&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
&lt;a href="https://blog.quarkslab.com/when-sidechannelmarvels-meet-lief.html" target="_blank" rel="noopener">When SideChannelMarvels meet LIEF &lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
&lt;a href="https://blog.quarkslab.com/differential-fault-analysis-on-white-box-aes-implementations.html" target="_blank" rel="noopener">Differential Fault Analysis on White-box AES
Implementations&lt;/a> by Philippe Teuwen (
&lt;a href="https://twitter.com/doegox" target="_blank" rel="noopener">@doegox&lt;/a>).
&lt;em>I used this blog post as a reference to resolve this part of the challenge.&lt;/em>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="references">References&lt;/h3>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>
&lt;a href="https://developer.android.com/reference/android/content/Context" target="_blank" rel="noopener">https://developer.android.com/reference/android/content/Context&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>
&lt;a href="https://calebfenton.github.io/2017/04/05/creating_java_vm_from_android_native_code/" target="_blank" rel="noopener">https://calebfenton.github.io/2017/04/05/creating_java_vm_from_android_native_code/&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>QBDI will execute the function using the
&lt;a href="https://qbdi.readthedocs.io/en/stable/api_cpp.html#execution-filtering" target="_blank" rel="noopener">ExecBroker&lt;/a> mechanism.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>It is the output of the function when entering &lt;code>1234&lt;/code> in the PIN field and &lt;code>4567&lt;/code> in the amount field.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>HITB 2015 Write-up - Crypto 300</title><link>https://www.romainthomas.fr/post/writeup-hitb2015-crypto300/</link><pubDate>Tue, 03 Nov 2015 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/post/writeup-hitb2015-crypto300/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>The crypto 300 challenge was about RSA with a special generation of the prime numbers $p$ and $q$.
We were given a mail
&lt;a href="mail.msg">mail.msg&lt;/a> which has been encrypted with RSA and whose the public key is in the
&lt;a href="hitbctf.crt">hitbctf.crt&lt;/a> certificate.&lt;/p>
&lt;h2 id="rsas-parameters-construction">RSA&amp;rsquo;s Parameters Construction&lt;/h2>
&lt;p>The modulus $N$ is built by choosing randomly a first prime number $p$, the second prime number $q$ is constructed in the following way:&lt;/p>
&lt;p>$$\alpha \cdot (p - 1) \equiv 1 \pmod{e}$$&lt;/p>
&lt;p>$$q = (p\alpha \bmod e) + k\cdot e$$&lt;/p>
&lt;p>$k$ is a positive integer such as $q$ is a prime number and $e$ is the public exponent which is also a random prime number.&lt;/p>
&lt;p>The following code is the implementation in Python:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">gen_rsa_parameters&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">urandom&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">63&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">encode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;hex&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">next_prime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">urandom&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">encode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;hex&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">next_prime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">q&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">modinv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">is_prime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">q&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">e&lt;/span>
&lt;span class="n">N&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">q&lt;/span>
&lt;span class="n">phi&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">modinv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">phi&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">q&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="theoretical-attack">Theoretical attack&lt;/h2>
&lt;p>Let&amp;rsquo;s $N^{\prime} = N \bmod{e}$. So we have&lt;/p>
&lt;p>\begin{eqnarray}
N^{\prime} &amp;amp; \equiv &amp;amp; p \cdot q \pmod{e} \\\
&amp;amp; \equiv &amp;amp; p \cdot ((p\alpha \bmod e) + k\cdot e) \pmod{e} \\\
&amp;amp; \equiv &amp;amp; p^2\alpha \pmod{e} \\\
\end{eqnarray}&lt;/p>
&lt;p>We have $\alpha$ in the equation so we can introduce $p - 1$ to remove $\alpha$&lt;/p>
&lt;p>\begin{eqnarray}
N^{\prime} &amp;amp; \equiv &amp;amp; (p - 1 + 1)^2\alpha \pmod{e} \\\
&amp;amp; \equiv &amp;amp; (p - 1)^2\alpha + 2(p - 1)\alpha + \alpha \pmod{e} \\\
&amp;amp; \equiv &amp;amp; (p - 1) + 2 + \alpha \pmod{e} \\\
(p - 1)N^{\prime} &amp;amp; \equiv &amp;amp; (p - 1)^2 + 2(p - 1) + 1 \pmod{e}
\end{eqnarray}&lt;/p>
&lt;p>$$\boxed{(p - 1)^2 - (N^{\prime} - 2)(p - 1) + 1 \equiv 0 \pmod{e}}$$&lt;/p>
&lt;p>Now we have a quadratic equation which only depends on $p$.&lt;/p>
&lt;p>Let&amp;rsquo;s $X = p - 1$ and suppose that $N^{\prime} - 2$ is even and $N^{\prime} - 2 = 2b$.&lt;/p>
&lt;p>\begin{eqnarray}
X^2 - 2bX + 1 &amp;amp; \equiv &amp;amp; 0 &amp;amp; \pmod{e} \\\
(X - b)^2 - b^2 + 1 &amp;amp; \equiv &amp;amp; 0 &amp;amp; \pmod{e}\\\
(X - b)^2 &amp;amp; \equiv &amp;amp; b^2 - 1 &amp;amp; \pmod{e}
\end{eqnarray}&lt;/p>
&lt;p>by using
&lt;a href="https://en.wikipedia.org/wiki/Quadratic_residue" target="_blank" rel="noopener">quadratic residue&lt;/a> we can find a solution. We can also use &lt;em>SAGE&lt;/em> and the &lt;code>sqrt()&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">Np&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">e&lt;/span>
&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Np&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Mod&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">pow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sqrt&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>At this point, we find $p \bmod{e}$ but not $p$ !&lt;/p>
&lt;p>I tried to find $p$ by adding some $e$ but the &lt;em>distance&lt;/em> between $p$ and $p \bmod{e}$ is huge. So I had to find another way.&lt;/p>
&lt;p>By knowing $p \bmod{e}$ we can compute $\alpha$. Remember $$\alpha \cdot (p - 1) \equiv 1 \pmod{e}$$ and by having $\alpha$ and $p \bmod{e}$ we can brute force $q$ by adding $e$ until $(p\alpha \bmod e) + k\cdot e$ is prime and it divide $N$.&lt;/p>
&lt;p>We did the assumption that $N^{\prime} - 2$ has to be even (so $N^{\prime}$ must be even) and in the certificate $N^{\prime}$ is even so everything is right.&lt;/p>
&lt;h2 id="pratical-attack">Pratical Attack&lt;/h2>
&lt;p>First we have to extract the modulus $N$ and the public key $e$ from the certificate:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="gp">$ &lt;/span>openssl x509 -in hitbctf.crt -text -noout
&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="go">Certificate:
&lt;/span>&lt;span class="go"> Data:
&lt;/span>&lt;span class="go"> Version: 1 (0x0)
&lt;/span>&lt;span class="go"> Serial Number: 18379438180976429416 (0xff10e1a5ac5a0968)
&lt;/span>&lt;span class="go"> Signature Algorithm: sha1WithRSAEncryption
&lt;/span>&lt;span class="go"> Issuer: C=NL, ST=Noord-Holland, L=Amsterdam, O=HITB, OU=CTF
&lt;/span>&lt;span class="go"> Validity
&lt;/span>&lt;span class="go"> Not Before: May 24 09:58:26 2015 GMT
&lt;/span>&lt;span class="go"> Not After : May 23 09:58:26 2016 GMT
&lt;/span>&lt;span class="go"> Subject: C=NL, ST=Noord-Holland, L=Amsterdam, O=HITB, OU=CTF
&lt;/span>&lt;span class="go"> Subject Public Key Info:
&lt;/span>&lt;span class="go"> Public Key Algorithm: rsaEncryption
&lt;/span>&lt;span class="go"> Public-Key: (1024 bit)
&lt;/span>&lt;span class="go"> Modulus:
&lt;/span>&lt;span class="go"> 00:e6:eb:89:c1:8d:49:c9:a2:02:2b:e0:b4:65:14:
&lt;/span>&lt;span class="go"> 6e:0f:90:45:1e:a3:4c:6b:60:56:00:4e:bd:15:59:
&lt;/span>&lt;span class="go"> 55:b1:35:96:c2:d6:83:ad:2f:23:6b:0b:2c:0e:0b:
&lt;/span>&lt;span class="go"> 88:83:b5:d6:cb:8a:0b:4f:f9:b7:eb:64:8c:95:2b:
&lt;/span>&lt;span class="go"> 6b:ef:5a:6f:04:f5:64:17:f5:1c:a9:14:d9:ea:73:
&lt;/span>&lt;span class="go"> e7:dd:c5:f2:0d:ce:c3:9c:e8:4b:72:2a:0c:f3:d8:
&lt;/span>&lt;span class="go"> 5e:80:ce:78:64:63:e1:44:f6:1d:b5:9c:cf:45:ff:
&lt;/span>&lt;span class="go"> 0e:d3:7f:d0:ce:bd:37:a5:8d:8a:4b:08:33:9e:a3:
&lt;/span>&lt;span class="go"> 2c:bc:ab:61:64:03:fd:2c:c5
&lt;/span>&lt;span class="go"> Exponent:
&lt;/span>&lt;span class="go"> 69:60:2d:93:8a:81:5f:14:cf:9f:b8:36:c2:e0:4d:
&lt;/span>&lt;span class="go"> 4d:De:82:ba:fc:8d:56:c2:6d:8c:89:ef:3c:40:69:
&lt;/span>&lt;span class="go"> 5d:d5:d4:ef:a7:36:36:43:15:14:95:f3:8c:bf:24:
&lt;/span>&lt;span class="go"> ae:94:30:92:40:79:12:00:1b:17:f5:53:33:9e:92:
&lt;/span>&lt;span class="go"> 70:70:49
&lt;/span>&lt;span class="go"> Signature Algorithm: sha1WithRSAEncryption
&lt;/span>&lt;span class="go"> 17:2b:ea:be:90:ad:98:f2:2b:ff:f5:61:d3:ea:af:fb:35:3a:
&lt;/span>&lt;span class="go"> 67:10:91:13:db:60:55:d9:09:8b:c2:1a:cf:6b:c6:1f:f2:10:
&lt;/span>&lt;span class="go"> 7a:d1:7b:9d:ff:10:f2:f2:c0:a9:f5:aa:2e:09:93:40:88:92:
&lt;/span>&lt;span class="go"> 7d:98:ff:e1:cb:dc:db:35:8d:e0:4b:21:99:76:bf:db:04:a2:
&lt;/span>&lt;span class="go"> 62:a4:18:4e:fc:bb:a7:53:be:6a:a1:ef:ec:15:86:c1:f1:1e:
&lt;/span>&lt;span class="go"> 87:6a:e9:af:fe:d1:08:eb:de:22:28:c4:5e:be:f1:41:0a:ca:
&lt;/span>&lt;span class="go"> cf:cf:da:63:b1:c1:56:e8:0c:8e:56:7f:08:94:0d:2b:2a:08:
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>N = 1621575882314321757502664197090844942567381491984167028188381926885851&lt;/code>
&lt;code>995558397927547394115469298694885747314992315746872071523931715177680193273&lt;/code>
&lt;code>386465775883129725436206653605910592810579794603402792446164893148622893121&lt;/code>
&lt;code>957048204358672599654432857497196823273138934901636721473789115585263150131&lt;/code>
&lt;code>66594183212229&lt;/code>&lt;/p>
&lt;p>&lt;code>e = 21558488234539889837938770635971330903489839146766895224490179041465516&lt;/code>
&lt;code>1931455822669631548838317075220811407344210520390992334648372016602816069805&lt;/code>
&lt;code>30249&lt;/code>&lt;/p>
&lt;p>With SAGE:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">sage&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Np&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">e&lt;/span>
&lt;span class="n">sage&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Np&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="n">sage&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">pp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Mod&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">pow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sqrt&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="n">sage&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">alpha&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">inverse_mod&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">X&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">sage&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">q&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">pp&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">alpha&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">e&lt;/span>
&lt;span class="n">sage&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">is_prime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">q&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="o">....&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">q&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">e&lt;/span>
&lt;span class="n">sage&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">q&lt;/span>
&lt;span class="n">sage&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">p&lt;/span>
&lt;span class="mi">13317713478157317654574552532079837937895228108820477140030796245493222349714497856652987583926206280627498615972491072112647669795345566943409669535038641&lt;/span>
&lt;span class="n">sage&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">q&lt;/span>
&lt;span class="mi">12176083266650126897170100375931110708350668494730113414987801764299563774952801449439933220072280766145748279998832962142839152786620322097065894585706069&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can now generate the private key by using
&lt;a href="rsatool.py">rsatool&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ ./rsatools.py -o private.pem &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>-e &lt;span class="m">21558488234539889837938770635971330903489839146766895224490179041465516193145582266963154883831707522081140734421052039099233464837201660281606980530249&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>-p &lt;span class="m">13317713478157317654574552532079837937895228108820477140030796245493222349714497856652987583926206280627498615972491072112647669795345566943409669535038641&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>-q &lt;span class="m">12176083266650126897170100375931110708350668494730113414987801764299563774952801449439933220072280766145748279998832962142839152786620322097065894585706069&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, we can decrypt the message:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">openssl smime -decrypt -in mail.msg -inkey private.pem
hitb&lt;span class="o">{&lt;/span>0b21cc2025534dbd2965390d2bcef45d&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The sources are available
&lt;a href="hitb2015-crypto300.tar.gz">here&lt;/a>&lt;/p></description></item><item><title>HITB 2015 Write-up - Crypto 400</title><link>https://www.romainthomas.fr/post/writeup-hitb2015-crypto400/</link><pubDate>Tue, 03 Nov 2015 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/post/writeup-hitb2015-crypto400/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>The crypto 400 challenge deals with the Even Mansour cryptosystem. To validate this challenge we have to send the flag to a server.
The server checks if the answer matches the flag by encrypting the flag and the given message with a &lt;strong>random&lt;/strong> key.
If both are equal the flag is correct otherwise it fails and the encrypted message is printed.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">urandom&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">enc_flag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">encrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flag&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">enc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">encrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">answer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">enc&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">enc_flag&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;You lucky bastard, &lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2"> is indeed the correct flag!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">flag&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Unfortunately that is not our flag :(&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="n">response&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s2">&amp;#34;Your guess encrypts as&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">enc&lt;/span>
&lt;span class="n">response&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s2">&amp;#34;whereas our flag encrypts as&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">enc_flag&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="even-mansour-scheme">Even Mansour scheme&lt;/h2>
&lt;p>In this Even-Masour scheme the size of a block is 16-bytes and the key &amp;mdash; on 32-bytes &amp;mdash; is split in two: $k_1$ and $k_2$ each one on 16-bytes.
At first, the message $M$ is xor-ed with $k_1$ then $M \oplus k_1$ is going through a $F$ function which
will be discussed later. Finally the output is xor-ed with $k_2$.&lt;/p>
&lt;p>&lt;img src="evenmansour.png" alt="">&lt;/p>
&lt;p>So we have:&lt;/p>
&lt;p>$$C = F(M \oplus k_1) \oplus k_2$$&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">EvenMansour&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">block&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">xor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="n">block&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">F&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">block&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">xor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">:])&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">block&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this challenge, the weakness comes from the $F$ function.&lt;/p>
&lt;h2 id="f-function">$F$ function&lt;/h2>
&lt;p>The $F$ function is composed of 64-rounds that perform the &lt;code>step(...)&lt;/code> transformation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">F&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">block&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">step&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">block&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>step&lt;/code> uses a S-Box to transform the block in this way:&lt;/p>
&lt;p>&lt;img src="https://www.romainthomas.fr/img/step.png" alt="">&lt;/p>
&lt;p>$\begin{cases}
\text{block}^{n+1}_0 = \text{SBox}(\text{block}^{n}_{10} \oplus \text{block}^{n}_{12} \oplus \text{block}^{n}_{13} \oplus \text{block}^{n+1}_{15}) &amp;amp; k = 0 \\\
\text{block}^{n+1}_k = \text{block}^{n}_{k - 1} &amp;amp; k &amp;gt; 0
\end{cases}$&lt;/p>
&lt;p>$\text{block}^{n}_k$ is the byte $k$ of the &lt;em>block&lt;/em> at round $n$ ($0 \leq k &amp;lt; 16$ and $0 \leq n &amp;lt; 64$)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">step&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">chr&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="nb">ord&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="nb">ord&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="nb">ord&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">13&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="nb">ord&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">15&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">block&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="mi">15&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>By ploting $y = \text{S-Box}(x)$ we can notice that the S-Box has a special construction:&lt;/p>
&lt;p>&lt;img src="https://www.romainthomas.fr/img/figure_1-1.png" alt="">&lt;/p>
&lt;p>I thought about computing the differential characteristics which is the probability that given the input difference
$\Delta = x \oplus y$ we get the output delta: $\delta = S(x) \oplus S(y)$.
We will call this probability $P(\Delta | \delta)$ and with
following function, we can compute this probability:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">P&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dx&lt;/span> &lt;span class="p">,&lt;/span>&lt;span class="n">dy&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SBox&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">dY&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SBox&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">SBox&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">dx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">dY&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">dy&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">count&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="nb">float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">256&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For all $\Delta$ and $\delta$, we notice that this probability is either 0 or 1. Consequently if we know $\delta$ we are sure to find $\Delta$. This will be useful for the differential attack.&lt;/p>
&lt;h2 id="differential-attack">Differential Attack&lt;/h2>
&lt;p>To find the flag, we will perform a differential attack. We have a message $M_1$ that we know and we have an unknown second message $M_2$
that is the flag. We also know $C_1$ and $C_2$ such as:&lt;/p>
&lt;p>$$\begin{eqnarray}
C_1 &amp;amp; = &amp;amp; F(M_1 \oplus k_1) \oplus k_2 \\\
C_2 &amp;amp; = &amp;amp; F(M_2 \oplus k_1) \oplus k_2
\end{eqnarray}$$&lt;/p>
&lt;p>&lt;img src="diff.png" alt="">&lt;/p>
&lt;p>By xor-ing $C_1$ and $C_2$ we can get $\Delta W = W_1 \oplus W_2 = C_1 \oplus C_2$. If somehow we can resolve $\Delta V$:&lt;/p>
&lt;p>$$\begin{eqnarray}
\Delta V &amp;amp; = &amp;amp; V_1 \oplus V_2 \\\
&amp;amp; = &amp;amp; M_1 \oplus k_1 \oplus M_2 \oplus k_1\\\
&amp;amp; = &amp;amp; M_1 \oplus M_2.
\end{eqnarray}$$&lt;/p>
&lt;p>We can extract $M_2$ with:&lt;/p>
&lt;p>$$M_2 = \Delta V \oplus M_1$$&lt;/p>
&lt;h2 id="recovering-delta-v">Recovering $\Delta V$&lt;/h2>
&lt;p>Now, let&amp;rsquo;s see how to resolve $\Delta V$ from $\Delta W$.&lt;/p>
&lt;p>From the &lt;code>step&lt;/code> function, we know that $\text{block}^{n+1}_k = \text{block}^{n}_{k - 1}$ therefore:&lt;/p>
&lt;p>$$\Delta W^{n-1}_k = \Delta W^{n}_{k + 1} \forall k &amp;lt; 15$$&lt;/p>
&lt;p>We know also $\Delta W^{n-1}_{0,1,2 \ldots 14}$ but not $\Delta W^{n-1}_{15}$&lt;/p>
&lt;p>To find $\Delta W^{n-1}_{15}$ we will use the fact that $P(\Delta X | \Delta W^{n-1}_{15}) = 1$ for a given $\Delta X$.
Concretely, I built a table &lt;em>diffTable&lt;/em> which maps $\delta$ to $\Delta$.&lt;/p>
&lt;p>$\begin{eqnarray}
\text{diffTable}(\Delta W^{n}_{0}) &amp;amp; = &amp;amp; \Delta W^{n-1}_{10} \oplus \Delta W^{n-1}_{12} \oplus \Delta W^{n-1}_{13} \oplus \Delta W^{n-1}_{15} \\\
&amp;amp; = &amp;amp; \Delta W^{n}_{11} \oplus \Delta W^{n}_{13} \oplus \Delta W^{n}_{14} \oplus \Delta W^{n-1}_{15}\\\
\Delta W^{n-1}_{15} &amp;amp; = &amp;amp; \text{diffTable}(\Delta W^{n}_{0}) \oplus \Delta W^{n}_{11} \oplus \Delta W^{n}_{13} \oplus \Delta W^{n}_{14}
\end{eqnarray}$&lt;/p>
&lt;p>Which enables to recover $\Delta W^{n - 1}$ from $\Delta W^{n}$.
Then, with recursion we can compute $\Delta W^{0} = \Delta V$&lt;/p>
&lt;h2 id="implementation">Implementation&lt;/h2>
&lt;p>The following script is the implementation of the attack:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ch">#!/usr/bin/python2.7&lt;/span>
&lt;span class="c1"># -*- coding: utf-8 -*-&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;span class="n">S&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="mh">0xa5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xc6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x62&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x01&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x49&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x2a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x8e&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xed&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x1f&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x7c&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xd8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xbb&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xf3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x90&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x34&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x57&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mh">0xb3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xd0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x74&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x17&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x5f&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x3c&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x98&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xfb&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x09&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x6a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xce&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xad&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xe5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x86&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x22&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x41&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mh">0x89&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xea&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x4e&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x2d&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x65&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x06&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xa2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xc1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x33&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x50&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xf4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x97&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xdf&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xbc&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x18&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x7b&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mh">0x9f&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xfc&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x58&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x3b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x73&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xb4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xd7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x25&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x46&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xe2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x81&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xc9&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xaa&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x0e&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x6d&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mh">0xfd&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x9e&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x3a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x59&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x11&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x72&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xd6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xb5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x47&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x24&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x80&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xe3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xab&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xc8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x6c&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x0f&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mh">0xeb&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x88&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x2c&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x4f&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x07&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xc0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xa3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x51&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x96&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xf5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xbd&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xde&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x7a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x19&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mh">0xd1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xb2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x16&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x75&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x3d&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x5e&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xfa&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x99&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x6b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x08&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xac&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xcf&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x87&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xe4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x40&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x23&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mh">0xc7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xa4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x00&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x63&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x2b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x48&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xec&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x8f&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x7d&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x1e&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xba&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xd9&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x91&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xf2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x56&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x35&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mh">0x14&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x77&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xd3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xb0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xf8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x9b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x3f&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x5c&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xae&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xcd&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x69&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x0a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x42&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x21&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x85&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xe6&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mh">0x02&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x61&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xc5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xa6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xee&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x8d&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x29&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x4a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xb8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xdb&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x7f&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x1c&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x54&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x37&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x93&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xf0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mh">0x38&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x5b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xff&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x9c&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xd4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xb7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x13&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x70&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x82&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xe1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x45&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x26&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x6e&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x0d&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xa9&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xca&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mh">0x2e&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x4d&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xe9&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x8a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xc2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xa1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x05&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x66&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x94&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xf7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x53&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x30&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x78&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x1b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xbf&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xdc&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mh">0x4c&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x2f&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x8b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xe8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xa0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xc3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x67&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x04&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xf6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x95&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x31&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x52&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x1a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x79&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xdd&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xbe&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mh">0x5a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x39&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x9d&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xfe&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xb6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xd5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x71&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x12&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xe0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x83&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x27&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x44&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x0c&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x6f&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xcb&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xa8&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mh">0x60&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x03&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xa7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xc4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x8c&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xef&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x4b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x28&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xda&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xb9&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x1d&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x7e&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x36&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x55&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xf1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x92&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mh">0x76&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x15&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xb1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xd2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x9a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xf9&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x5d&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x3e&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xcc&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xaf&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x0b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x68&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x20&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x43&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xe7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x84&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">xor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">block1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">block2&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nb">chr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">ord&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="nb">ord&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">zip&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">block1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">block2&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">step&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">chr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">ord&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="nb">ord&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="nb">ord&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">13&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="nb">ord&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">15&lt;/span>&lt;span class="p">])])&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">block&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="mi">15&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">F&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">xrange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">block&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">step&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">block&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">EvenMansour&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">block&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">xor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="n">block&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">F&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">block&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">xor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">:])&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">block&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">encrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num_blocks&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pad&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">xrange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num_blocks&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">block&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">EvenMansour&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">res&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">block&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">res&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">pad&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">data&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\x00&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">16&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">16&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1"># Table T[a] = b such as&lt;/span>
&lt;span class="c1"># S[x] ^ S[y] = a and b = x ^ y&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">DiffTable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="p">))]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">delta&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">dY&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">delta&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">dY&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">delta&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">table&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">urandom&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">M1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;hitb&lt;/span>&lt;span class="si">{0123456789abcdef}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="n">M2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;aaaaaaaaaaaaaaaaaaaaaa&amp;#34;&lt;/span>
&lt;span class="n">C1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">encrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">M1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">C2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">encrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">M2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">numberOfBlocks&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">C2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">16&lt;/span>
&lt;span class="n">diffTable&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">DiffTable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">clearText&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">block&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numberOfBlocks&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">dW&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">xor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">C1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">C2&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="mi">16&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">block&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="mi">16&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">block&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">dWtemp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">dW&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">15&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="n">delta&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">diffTable&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">ord&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dW&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">])]&lt;/span>
&lt;span class="n">dW15&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">chr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">ord&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dW&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="nb">ord&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dW&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">13&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="nb">ord&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dW&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">14&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">delta&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">dWtemp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dW15&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">dW&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dWtemp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">M&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">xor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dW&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">M2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">16&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">block&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="mi">16&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">block&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)])&lt;/span>
&lt;span class="n">clearText&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">M&lt;/span>
&lt;span class="nb">print&lt;/span> &lt;span class="n">clearText&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>In fact by noticing that&lt;/p>
&lt;p>$$F(x \oplus y) = F(x) \oplus F(y) \oplus C^{te}$$&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">for&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">xrange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">u&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">urandom&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">urandom&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">xor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">xor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="n">xor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">F&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="nb">print&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">encode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;hex&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We have:&lt;/p>
&lt;p>\begin{eqnarray}
F(M_1 \oplus k_1) \oplus F(M_2 \oplus k_1) &amp;amp; = &amp;amp; F(M_1) \oplus F(M_2)\
M_2 &amp;amp; = &amp;amp; F^{-1}(F(M_1) \oplus C_1 \oplus C_2)
\end{eqnarray}&lt;/p>
&lt;p>Which is far more easier to resolve.&lt;/p>
&lt;p>Thanks to &lt;strong>jb^&lt;/strong> who help me and who find the previous technique.&lt;/p>
&lt;p>Sources are available
&lt;a href="hitb2015-crypto400.tar.gz">here&lt;/a>&lt;/p></description></item></channel></rss>