<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DEFAULT Publications | Romain Thomas</title><link>https://www.romainthomas.fr/publication/</link><atom:link href="https://www.romainthomas.fr/publication/index.xml" rel="self" type="application/rss+xml"/><description>Publications</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Published with Academic Website Builder</copyright><lastBuildDate>Fri, 05 Nov 2021 00:00:00 +0000</lastBuildDate><image><url>https://www.romainthomas.fr/images/icon_hu2654a0fcc87c65a864822ac27b001d3b_698_512x512_fill_lanczos_center_3.png</url><title>Publications</title><link>https://www.romainthomas.fr/publication/</link></image><item><title>PGSharp: Analysis of a Cheat Engine on Android</title><link>https://www.romainthomas.fr/publication/21-ekoparty-mobile-hacking-space-pgsharp/</link><pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/publication/21-ekoparty-mobile-hacking-space-pgsharp/</guid><description>&lt;h2 id="hahahugoshortcode-s0-hbhb-slides">
&lt;i class="fas fa-copy pr-1 fa-fw">&lt;/i> Slides&lt;/h2>
&lt;div class="pdfpreview shortcode shortcode--pdfpreview">
&lt;embed src="21-10-ekoparty-mobile-hacking-space-pgsharp.pdf" type="application/pdf" width="100%" height=450px />
&lt;/div>
&lt;h2 id="hahahugoshortcode-s2-hbhb-talk">
&lt;i class="fas fa-laptop-code pr-1 fa-fw">&lt;/i> Talk&lt;/h2>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/gcMQgjgajPk" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h2 id="hahahugoshortcode-s4-hbhb-blog-post">
&lt;i class="fas fa-newspaper pr-1 fa-fw">&lt;/i> Blog Post&lt;/h2>
&lt;p>
&lt;a href="https://www.romainthomas.fr/post/21-11-pgsharp-analysis/">&lt;em>PGSharp: Analysis of a Cheating App for PokemonGO&lt;/em>&lt;/a>&lt;/p></description></item><item><title>QBDL: QuarkslaB Dynamic Loader</title><link>https://www.romainthomas.fr/publication/21-sstic-qbdl/</link><pubDate>Thu, 03 Jun 2021 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/publication/21-sstic-qbdl/</guid><description>&lt;h2 id="hahahugoshortcode-s0-hbhb-slides">
&lt;i class="fas fa-copy pr-1 fa-fw">&lt;/i> Slides&lt;/h2>
&lt;div class="pdfpreview shortcode shortcode--pdfpreview">
&lt;embed src="SSTIC2021-Slides-qbdl_quarkslab_dynamic_loader-guinet_thomas.pdf" type="application/pdf" width="100%" height=450px />
&lt;/div>
&lt;h2 id="hahahugoshortcode-s2-hbhb-talk-in-french">
&lt;i class="fas fa-laptop-code pr-1 fa-fw">&lt;/i> Talk (In French)&lt;/h2>
&lt;video controls >
&lt;source src="https://static.sstic.org/videos2021/1080p/qbdl_quarkslab_dynamic_loader.mp4" type="video/mp4">
&lt;/video></description></item><item><title>Dynamic Binary Instrumentation Techniques to Address Native Code Obfuscation</title><link>https://www.romainthomas.fr/publication/20-bh-asia-dbi/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/publication/20-bh-asia-dbi/</guid><description>&lt;h2 id="hahahugoshortcode-s0-hbhb-slides">
&lt;i class="fas fa-copy pr-1 fa-fw">&lt;/i> Slides&lt;/h2>
&lt;div class="pdfpreview shortcode shortcode--pdfpreview">
&lt;embed src="asia-20-Thomas-Dynamic-Binary-Instrumentation-Techniques-to-Address-Native-Code-Obfuscation.pdf" type="application/pdf" width="100%" height=450px />
&lt;/div>
&lt;h2 id="hahahugoshortcode-s2-hbhb-whitepaper">
&lt;i class="fas fa-file-pdf pr-1 fa-fw">&lt;/i> Whitepaper&lt;/h2>
&lt;div class="pdfpreview shortcode shortcode--pdfpreview">
&lt;embed src="asia-20-Thomas-Dynamic-Binary-Instrumentation-Techniques-to-Address-Native-Code-Obfuscation-wp.pdf" type="application/pdf" width="100%" height=1060px />
&lt;/div>
&lt;h2 id="hahahugoshortcode-s4-hbhb-talk">
&lt;i class="fas fa-laptop-code pr-1 fa-fw">&lt;/i> Talk&lt;/h2>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/MRku-2fW42w" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;div id="demo1">&lt;/div>
&lt;h2 id="hahahugoshortcode-s6-hbhb-demo-1-snapchat">
&lt;i class="fas fa-laptop-code pr-1 fa-fw">&lt;/i> Demo #1: Snapchat&lt;/h2>
&lt;video controls >
&lt;source src="snapchat_demo.mp4" type="video/mp4">
&lt;/video>
&lt;div id="demo2">&lt;/div>
&lt;h2 id="hahahugoshortcode-s8-hbhb-demo-2-legu-packer">
&lt;i class="fas fa-laptop-code pr-1 fa-fw">&lt;/i> Demo #2: Legu Packer&lt;/h2>
&lt;video controls >
&lt;source src="qbdi-tencent-packer.mp4" type="video/mp4">
&lt;/video>
&lt;p>&lt;em>Note: The videos are intentionally quick. Do not hesite to pause them.&lt;/em>&lt;/p></description></item><item><title>Android Runtime Restrictions Bypass</title><link>https://www.romainthomas.fr/publication/android-restrictions-bypass/</link><pubDate>Sat, 23 Mar 2019 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/publication/android-restrictions-bypass/</guid><description>&lt;div class="alert alert-note">
&lt;div>
This publication is also available on the &lt;a href="https://blog.quarkslab.com/android-runtime-restrictions-bypass.html">Quarkslab Blog&lt;/a>.
&lt;/div>
&lt;/div>
&lt;p>With the release of Android Nougat, Google introduced restriction about native libraries that can be loaded from an Android application. Basically, it prevents developers to link against some internal libraries such as &lt;code>libart.so&lt;/code>.&lt;/p>
&lt;p>Later on and with the release of Android Pie, they introduced a new restriction on the access to internal Java methods (or fields). Basically, these restrictions are used to prevent developers to access parts of the Android internal framework.&lt;/p>
&lt;p>Whereas these limitations aim to be used for compatibility purposes, this article shows how we can take advantage of Android internal to disable them. We briefly explain how these restrictions work and how to disable them from an application without &lt;strong>privileges&lt;/strong>.&lt;/p>
&lt;p>The first part deals with the native library loading restriction while the second is about Java internal framework restriction.&lt;/p>
&lt;div class="pdfpreview shortcode shortcode--pdfpreview">
&lt;embed src="https://www.romainthomas.fr/publication/android-restrictions-bypass/report.pdf" type="application/pdf" width="100%" height=900px />
&lt;/div></description></item><item><title>Static Instrumentation Based on Executable Formats</title><link>https://www.romainthomas.fr/publication/static-instrumentation/</link><pubDate>Wed, 20 Jun 2018 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/publication/static-instrumentation/</guid><description>&lt;p>Many instrumentation techniques are based on modifying code or system environment of the target. It can be suitable for scenarios but it could not work under certain circumstance (integrity checking, non-rooted environment…) In this talk we propose similar techniques by only modifying the executable format. This enables to be architecture independent, injection and hooking does not require privileged environment.&lt;/p>
&lt;p>Talk given at
&lt;a href="https://recon.cx/2018/montreal/" target="_blank" rel="noopener">Recon Montréal&lt;/a> and
&lt;a href="https://2018.pass-the-salt.org/schedule/#instrumentation" target="_blank" rel="noopener">Pass The Salt&lt;/a>&lt;/p>
&lt;div class="pdfpreview shortcode shortcode--pdfpreview">
&lt;embed src="18-06-Recon18-Formats-Instrumentation.pdf" type="application/pdf" width="100%" height=600px />
&lt;/div></description></item><item><title>LIEF: Library to Instrument Executable Formats</title><link>https://www.romainthomas.fr/publication/lief/</link><pubDate>Tue, 04 Jul 2017 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/publication/lief/</guid><description>&lt;p>When analyzing executable, the first layer of information is the format in which the executable is wrapped. It turns out that a lot of tools and libraries exist to analyze and instrument machine code wrapped by the format, but there is not such library to handle the three mainstream executable formats and to both read and modify these formats. LIEF has been developed to that end.&lt;/p>
&lt;p>In the talk we will explain the rationale behind LIEF architecture choices, what LIEF allows to do and have a look at use cases.&lt;/p>
&lt;p>LIEF is a cross platform library and it can be used through a Python, C++ and C API. The library enables to parse standard structures as well as more complex ones like PE Signature (Authenticode) and ELF hash table. As use cases we can inject code into a binary or a library, we can also redirect the control flow to hook functions and it can be used to obfuscate some parts of a binary. Another feature of LIEF is that common characteristics of these formats are factorized so that we can develop a single script which works for the three formats.&lt;/p>
&lt;p>&lt;img src="lief.png" alt="LIEF">&lt;/p>
&lt;h2 id="hahahugoshortcode-s0-hbhb-slides-of-the-talk-given-at-rmll">
&lt;i class="fas fa-file-pdf pr-1 fa-fw">&lt;/i> Slides of the talk given at RMLL&lt;/h2>
&lt;div class="pdfpreview shortcode shortcode--pdfpreview">
&lt;embed src="17-07-RMLL-LIEF.pdf" type="application/pdf" width="100%" height=600px />
&lt;/div>
&lt;p>You can also grab the slides of the talk given at
&lt;a href="https://project.inria.fr/FranceJapanICST/wokshops/2017-program/presentations/" target="_blank" rel="noopener">Cybersecurity France-Japan&lt;/a>:
&lt;a href="17-04-cybersecurity-frjp-LIEF.pdf">17-04-cybersecurity-frjp-LIEF.pdf&lt;/a>&lt;/p></description></item><item><title>How Triton can help to reverse virtual machine based software protections</title><link>https://www.romainthomas.fr/publication/triton-vm-protection/</link><pubDate>Thu, 10 Nov 2016 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/publication/triton-vm-protection/</guid><description>&lt;h2 id="hahahugoshortcode-s0-hbhb-slides">
&lt;i class="fas fa-file-pdf pr-1 fa-fw">&lt;/i> Slides&lt;/h2>
&lt;div class="pdfpreview shortcode shortcode--pdfpreview">
&lt;embed src="csaw2016-sos-rthomas-jsalwan.pdf" type="application/pdf" width="100%" height=600px />
&lt;/div>
&lt;h2 id="hahahugoshortcode-s2-hbhb-video">
&lt;i class="fas fa-file-video pr-1 fa-fw">&lt;/i> Video&lt;/h2>
&lt;video controls >
&lt;source src="how-triton-can-help-to-reverse-virtual-machine-based-software-protections.mp4" type="video/mp4">
&lt;/video></description></item><item><title>Dynamic Binary Analysis and Obfuscated Codes</title><link>https://www.romainthomas.fr/publication/dynamic-binary-analysis-and-obfuscation/</link><pubDate>Fri, 08 Apr 2016 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/publication/dynamic-binary-analysis-and-obfuscation/</guid><description>&lt;div class="pdfpreview shortcode shortcode--pdfpreview">
&lt;embed src="sthack2016-rthomas-jsalwan.pdf" type="application/pdf" width="100%" height=600px />
&lt;/div></description></item><item><title>How Triton may help to analyse obfuscated binaries</title><link>https://www.romainthomas.fr/publication/triton/</link><pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/publication/triton/</guid><description>&lt;div class="pdfpreview shortcode shortcode--pdfpreview">
&lt;embed src="misc82-triton.pdf" type="application/pdf" width="100%" height=900px />
&lt;/div></description></item></channel></rss>