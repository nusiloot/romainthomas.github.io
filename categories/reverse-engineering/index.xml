<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DEFAULT Reverse Engineering | Romain Thomas</title><link>https://www.romainthomas.fr/categories/reverse-engineering/</link><atom:link href="https://www.romainthomas.fr/categories/reverse-engineering/index.xml" rel="self" type="application/rss+xml"/><description>Reverse Engineering</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Published with Academic Website Builder</copyright><lastBuildDate>Sun, 07 Nov 2021 00:00:00 +0000</lastBuildDate><image><url>https://www.romainthomas.fr/images/icon_hu2654a0fcc87c65a864822ac27b001d3b_698_512x512_fill_lanczos_center_3.png</url><title>Reverse Engineering</title><link>https://www.romainthomas.fr/categories/reverse-engineering/</link></image><item><title>PGSharp: Analysis of a Cheating App for PokemonGO</title><link>https://www.romainthomas.fr/post/21-11-pgsharp-analysis/</link><pubDate>Sun, 07 Nov 2021 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/post/21-11-pgsharp-analysis/</guid><description>&lt;style>
.green {
color:green;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.blue {
color: blue;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.orange {
color: #FF6347;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.red {
color: #c02032;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
a.ul {
color: #c02032;
}
.hl-comment {
color: #df2b04;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.hl-keyword {
color: #A90D91;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.hl-literal {
color: #1C01CE;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.hl-preproc {
color: #633820;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.hl-strings {
color: #C41A16;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.yellow {
color: #CC7000;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.article-container {
max-width: 900px;
}
&lt;/style>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>A few days after the release of the blog post
&lt;a href="https://www.romainthomas.fr/post/21-07-pokemongo-anti-frida-jailbreak-bypass/">&lt;em>Gotta Catch &amp;lsquo;Em All: Frida &amp;amp; jailbreak detection&lt;/em>&lt;/a>, someone on
&lt;a href="https://www.reddit.com/r/ReverseEngineering/comments/on6ya9/comment/h5rhkoc/" target="_blank" rel="noopener">reddit - r/ReverseEngineering&lt;/a>
caught my attention on a cheating app for the Android version of PokemonGO:&lt;/p>
&lt;p>&lt;img src="reddit.png" alt="reddit comment about PGSharp">&lt;/p>
&lt;p>So here it is!&lt;/p>
&lt;p>PGSharp belongs to the family of PokemonGO&amp;rsquo;s cheating app that is not (yet) banned by Niantic.
This cheat provides an &lt;em>enhanced&lt;/em> game experience with interesting functionalities such as:&lt;/p>
&lt;ul>
&lt;li>GPS Spoofing&lt;/li>
&lt;li>Quick Catch&lt;/li>
&lt;li>Pokemon Feed&lt;/li>
&lt;li>Nearby Radar&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>Last but not least, PGSharp runs on regular devices, &lt;strong>rooted or not&lt;/strong>.&lt;/p>
&lt;p>This cheat made my weekends for the last 4 months and, from a technical point of view, it was worth it.
As will be discussed through this blog post, PGSharp uses several interesting tricks.&lt;/p>
&lt;div class="alert alert-note">
&lt;div>
&lt;p>The content of this blog post is based on &lt;strong>PGSharp 1.33.0&lt;/strong> which is related to the following APKs:&lt;/p>
&lt;p>&lt;i class="fas fa-gamepad">&lt;/i> &lt;a href="https://data.romainthomas.fr/21-09-pgsharp/pgs1.33.0.apk">PGSharp v1.33.0&lt;/a>&lt;/p>
&lt;p>&lt;i class="fas fa-gamepad">&lt;/i> &lt;a href="https://data.romainthomas.fr/21-09-pgsharp/com.nianticlabs.pokemongo_0.221.0-2021093001.apk">PokemonGO v0.221.0&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>This blog post is quite &lt;strong>long&lt;/strong> but the different parts are
more or less independents, so feel free to jump on them depending on your interests:&lt;/p>
&lt;p>&lt;span id="toc">&lt;/span>&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="#code-protection">&lt;i class='fas fa-shield-alt'>&lt;/i>  Code Protection&lt;/a>
&lt;ul>
&lt;li>
&lt;a href="#lua-vm">Lua VM&lt;/a>&lt;/li>
&lt;li>
&lt;a href="#java-obfuscation">Java Obfuscation&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;a href="#cheat-mechanisms">&lt;i class='fas fa-cogs'>&lt;/i>  Cheat Mechanisms&lt;/a>
&lt;ul>
&lt;li>
&lt;a href="#dex-files-diff">DEX Files Comparison&lt;/a>&lt;/li>
&lt;li>
&lt;a href="#libmain">libmain.so&lt;/a>&lt;/li>
&lt;li>
&lt;a href="#signature-bypass">Signature Bypass&lt;/a>&lt;/li>
&lt;li>
&lt;a href="#dynamic-apk-loading">Dynamic APK Loading&lt;/a>&lt;/li>
&lt;li>
&lt;a href="#gps-spoofing">GPS Spoofing&lt;/a>&lt;/li>
&lt;li>
&lt;a href="#jnienv-proxifier">JNIEnv Proxifier&lt;/a>&lt;/li>
&lt;li>
&lt;a href="#unity-hooks">Unity Hooks&lt;/a>&lt;/li>
&lt;li>
&lt;a href="#network">Network Communications&lt;/a>&lt;/li>
&lt;li>
&lt;a href="#safetynet">SafetyNet&lt;/a>&lt;/li>
&lt;li>
&lt;a href="#pgsharp-signature-check">When PGSharp avoids PokemonGO pitfalls&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;a href="#final-words">&lt;i class='fas fa-power-off'>&lt;/i>  Final Words&lt;/a>&lt;/li>
&lt;li>
&lt;a href="#acknowledgments">&lt;i class='fas fa-stream'>&lt;/i>  Acknowledgments&lt;/a>&lt;/li>
&lt;li>
&lt;a href="#annexes">&lt;i class='fas fa-clipboard'>&lt;/i>  Annexes&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>You can also check the slides to get an overview of the content:&lt;/p>
&lt;div class="pdfpreview shortcode shortcode--pdfpreview">
&lt;embed src="https://www.romainthomas.fr/publication/21-ekoparty-mobile-hacking-space-pgsharp/21-10-ekoparty-mobile-hacking-space-pgsharp.pdf" type="application/pdf" width="100%" height=450px />
&lt;/div>
&lt;center>
&lt;br />&lt;br />
&lt;b>Enjoy!&lt;/b>
&lt;/center>
&lt;h2 id="code-protection">
&lt;a href="#toc">&lt;i class='fas fa-angle-up'>&lt;/i>  Code Protection&lt;/a>&lt;/h2>
&lt;p>PokemonGO is a target of choice for reverse engineers and some critical functionalities are protected by a commercial solution.
It is worth mentioning that only a subset of the game is obfuscated. For instance, the &amp;ldquo;Java&amp;rdquo; part of the
game is absolutely not protected, such as we have the original class and method names.
The Unity part is &amp;ldquo;compiled&amp;rdquo; into &lt;code>libil2cpp.so&lt;/code> but we can recover some metadata with
&lt;a href="https://github.com/Perfare/Il2CppDumper" target="_blank" rel="noopener">Perfare/Il2CppDumper&lt;/a>.&lt;/p>
&lt;p>All the obfuscation is focused on &lt;code>libNianticLabsPlugin.so&lt;/code> (c.f.
&lt;a href="https://www.romainthomas.fr/post/21-07-pokemongo-anti-frida-jailbreak-bypass/">&lt;em>Gotta Catch &amp;lsquo;Em All: Frida &amp;amp; jailbreak detection&lt;/em>&lt;/a>),
and since only this part of the game is heavily obfuscated, it gives a hint about where the critical functionalities are.&lt;/p>
&lt;p>On the other hand, PGSharp uses different layers of obfuscation to prevent its analysis.
First of all, it uses O-LLVM to obfuscate the native code that includes, at least, control-flow flattening and
string encryption. Nevertheless, the obfuscation is &lt;em>relatively&lt;/em> weak against emulation and static analysis&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;h3 id="lua-vm">
&lt;a href="#toc">&lt;i class='fas fa-angle-up'>&lt;/i>  Lua VM&lt;/a>&lt;/h3>
&lt;p>Some obfuscation techniques are based on transforming the original code through a VM (like
&lt;a href="https://vmpsoft.com/" target="_blank" rel="noopener">VMProtect&lt;/a>).
It adds another layer to reverse, as we need to understand the VM architecture before being able to understand the original semantic of the code.&lt;/p>
&lt;center>
&lt;b>
But what about using an interpreted language (like Python) and obfuscate its VM or its interpreter with O-LLVM?
&lt;/b>&lt;br />
&lt;/center>
&lt;p>This is what PGSharp does with Lua. Some parts of the cheat are written in Lua whose the VM has been modified to:&lt;/p>
&lt;ol>
&lt;li>Fake the version: try to make believe &lt;code>Lua 5.1&lt;/code> while it&amp;rsquo;s &lt;code>Lua 5.3&lt;/code>&lt;/li>
&lt;li>Add new opcodes (&lt;code>OP_RUN&lt;/code>, &lt;code>OP_GETDOWNVAL&lt;/code>, &lt;code>OP_OLDTABLE&lt;/code>, and &lt;code>OP_XXOR&lt;/code>) to break decompilation and
common Lua tools.&lt;/li>
&lt;/ol>
&lt;p>The native library that implements the cheat functionalities and that contains the Lua VM being stripped, one of the
challenges lies in recognizing the Lua C API among the library&amp;rsquo;s functions&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>. For instance,
here is a basic block of a native function that uses the Lua API:&lt;/p>
&lt;p>&lt;img src="lua_func_re.png" alt="Stripped PGSharp function">&lt;/p>
&lt;p>Among all the Lua C functions, some of them are worth identifying to ease reverse engineering:&lt;/p>
&lt;ul>
&lt;li>
&lt;dl>
&lt;dt>&lt;code>luaL_loadbuffer&lt;/code>&lt;/dt>
&lt;dd>&lt;blockquote>
&lt;p>&lt;em>&amp;ldquo;Load a buffer as a Lua chunk.&amp;quot;&lt;/em>.&lt;/p>
&lt;/blockquote>
&lt;/dd>
&lt;dd>
&lt;p>Basically, it loads a Lua bytecode from a buffer given in parameter.
This Lua bytecode is the result of the &lt;em>compilation&lt;/em> of the original script with
&lt;a href="https://www.lua.org/manual/5.3/luac.html" target="_blank" rel="noopener">luac&lt;/a>.
By hooking this function, we can recover the following files:&lt;/p>
&lt;ul>
&lt;li>&lt;span class="orange">base64.luac&lt;/span>&lt;/li>
&lt;li>&lt;span class="green">class.luac&lt;/span>&lt;/li>
&lt;li>&lt;span class="green">global.luac&lt;/span>&lt;/li>
&lt;li>&lt;span class="green">init.luac&lt;/span>&lt;/li>
&lt;li>&lt;span class="orange">json.luac - from
&lt;a href="https://github.com/rxi/json.lua" target="_blank" rel="noopener">https://github.com/rxi/json.lua&lt;/a>&lt;/span>&lt;/li>
&lt;li>&lt;span class="green">location.luac&lt;/span>&lt;/li>
&lt;li>&lt;span class="orange">md5.luac - from
&lt;a href="https://github.com/kikito/md5.lua" target="_blank" rel="noopener">https://github.com/kikito/md5.lua&lt;/a>&lt;/span>&lt;/li>
&lt;li>&lt;span class="green">pgo.luac&lt;/span>&lt;/li>
&lt;li>&lt;span class="green">pgodump.luac&lt;/span>&lt;/li>
&lt;li>&lt;span class="green">plugin.luac&lt;/span>&lt;/li>
&lt;li>&lt;span class="green">reflect.luac&lt;/span>&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl>
&lt;p>The &lt;span class="orange">orange files&lt;/span> are utilities, while the &lt;span class="green">green ones&lt;/span>
contain cheat mechanisms.&lt;/p>
&lt;/li>
&lt;li>
&lt;dl>
&lt;dt>&lt;code>luaD_precall&lt;/code>&lt;/dt>
&lt;dd>Function that is involved when calling a C native function or a pure Lua function.
Since its prototype is &lt;span class="blue">(lua_State *L, StkId func, int nresults)&lt;/span>,
it can help to dynamically identify which function is called:&lt;/dd>
&lt;/dl>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">0x6776a8 luaD_precall(&amp;#39;gamehelper&amp;#39;)
0x6776a8 luaD_precall(&amp;#39;@./app/arm64-v8a/luac/global.lua:0 - sub_71733ea5d0&amp;#39;) {
0x694d90 luaD_precall(&amp;#39;@./app/arm64-v8a/luac/global.lua:246 - sub_71733f7b50&amp;#39;) {
0x6776a8 luaD_precall(&amp;#39;@./app/arm64-v8a/luac/location.lua:38 - sub_717346d650&amp;#39;) {
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;dl>
&lt;dt>&lt;code>lua_pushcclosure&lt;/code>&lt;/dt>
&lt;dd>&lt;blockquote>
&lt;p>Pushes a new C closure onto the stack.&lt;/p>
&lt;/blockquote>
&lt;/dd>
&lt;dd>
&lt;p>This function is particularly interesting to recover
native C functions linked to Lua function:&lt;/p>
&lt;/dd>
&lt;/dl>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">0x0e9cc0: lua_pushcclosure(&amp;#39;initil2cppmethods&amp;#39;)
0x0e9cd4: lua_setfield(-2, &amp;#39;initil2cppmethods&amp;#39;, &amp;#39;func_0xedaa0&amp;#39;)
...
0x0e9d10: lua_pushcclosure(&amp;#39;nar&amp;#39;)
0x0e9d24: lua_setfield(-2, &amp;#39;nar&amp;#39;, &amp;#39;func_0xeddbc&amp;#39;)
...
0x0ea020: lua_pushcclosure(&amp;#39;ipf&amp;#39;)
0x0ea034: lua_setfield(-2, &amp;#39;ipf&amp;#39;, &amp;#39;func_0x1318b0&amp;#39;)
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;dl>
&lt;dt>&lt;code>lua_pushstring&lt;/code>&lt;/dt>
&lt;dd>&lt;blockquote>
&lt;p>&lt;em>&amp;ldquo;Pushes the zero-terminated string pointed to by s onto the stack.&amp;quot;&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;/dd>
&lt;dd>
&lt;p>This function enables to dynamically recover strings that might not be present
in the native code or somehow encoded:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">0x0ebdfc: lua_pushstring(&amp;#39;https://tens.pgsharp.com/v1/scc-2-[...]/&amp;#39;)
0x0ebe28: lua_pushstring(&amp;#39;me.uw.hela.pref&amp;#39;)
0x0c56ac: lua_pushstring(&amp;#39;AIza[...]XhM4&amp;#39;)
0x0e15b4: lua_pushstring(&amp;#39;token=[Redacted]&amp;#39;)
&lt;/code>&lt;/pre>&lt;/div>&lt;/dd>
&lt;/dl>
&lt;/li>
&lt;/ul>
&lt;div class="alert alert-">
&lt;div>
&lt;p>To dynamically understand the behavior of the Lua VM, we can compile the Frida Gum SDK along with Lua v5.3.&lt;/p>
&lt;p>It enables to hook Lua functions with Frida and to leverage the compiled Lua v5.3 to inspect the parameters:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">extern&lt;/span> &lt;span class="s">&amp;#34;C&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;lua.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;ldo.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;ldebug.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="n">gum_interceptor_attach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">listener_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">interceptor&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">luaD_precall_addr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">listener_&lt;/span> &lt;span class="n">luaD_precall_addr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">native_listener_on_enter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GumInvocationListener&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">listener&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GumInvocationContext&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">ic&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">auto&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">L&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">lua_State&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ic&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">cpu_context&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">func&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">StkId&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ic&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">cpu_context&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">narg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">static_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ic&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">cpu_context&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ttype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">LUA_TLCL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;sub_{:x}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">Proto&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">clLvalue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{}:{:d} - sub_{:x}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">getstr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">source&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">linedefined&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;h3 id="java-obfuscation">
&lt;a href="#toc">&lt;i class='fas fa-angle-up'>&lt;/i>  Java Obfuscation&lt;/a>&lt;/h3>
&lt;p>Contrary to the PokemonGO&amp;rsquo;s Java layer, PGSharp protects its Java code with Proguard and the strings are xored
with the hardcoded key:&lt;/p>
&lt;center>
&lt;b class="orange">vqGqQWCVnDRrNXTR&lt;/b>&lt;br />&lt;br />
&lt;/center>
&lt;p>This key seems to not change across the different versions of PGSharp and the encoded strings look
like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">q&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GL&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">a&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">r3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">a&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;FAQgLiQlLw==&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">JSONObject&lt;/span> &lt;span class="n">jSONObject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">JSONObject&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Context&lt;/span> &lt;span class="n">context&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GL&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">c&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">jSONObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">r3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">a&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Agg3FA==&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">r3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">a&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Axg=&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">jSONObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">r3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">a&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Axgj&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">UI&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">g&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">jSONObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">r3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">a&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;BQUmBTQ=&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">s&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">jSONObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">r3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">a&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;BQEoHjc+LTE=&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">Boolean&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">...);&lt;/span>
&lt;span class="n">jSONObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">r3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">a&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;BAUr&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">UI&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">f&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">jSONObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">r3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">a&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Gh8g&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">Locale&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDefault&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getDisplayLanguage&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">jSONObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">r3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">a&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;FxMu&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">UI&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">a&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">jSONObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">r3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">a&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;FBA1&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">LayoutInflater$Factory2o&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">i&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">e&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">jSONObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">r3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">a&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Gx4j&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">Build&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MODEL&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Build&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">VERSION&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RELEASE&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The string encoding routine being easy to reverse, we can create a Jadx plugin
that automatically decodes these strings:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="o">[...]&lt;/span>
&lt;span class="n">passes&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">SimplifyVisitor&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">passes&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">PGSharpString&lt;/span>&lt;span class="o">());&lt;/span> &lt;span class="c1">// Automatically decode the strings
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">passes&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">CheckRegions&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">[...]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It results in this kind of output:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">q&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GL&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">a&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;bug_url&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">JSONObject&lt;/span> &lt;span class="n">jSONObject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">JSONObject&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Context&lt;/span> &lt;span class="n">context&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GL&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">c&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">jSONObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;type&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;ui&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">jSONObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;uid&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">UI&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">g&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">jSONObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;state&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">s&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">jSONObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;spoofing&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">Boolean&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">PL&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">a&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;hlspoofing&amp;#34;&lt;/span>&lt;span class="o">)).&lt;/span>&lt;span class="na">booleanValue&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">jSONObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;rtl&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">UI&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">f&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">jSONObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;lng&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Locale&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDefault&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getDisplayLanguage&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">jSONObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;abi&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">UI&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">a&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">jSONObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;bar&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">LayoutInflater$Factory2o&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">i&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">e&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">jSONObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;mod&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Build&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MODEL&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Build&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">VERSION&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RELEASE&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can find the whole Jadx &lt;em>plugin&lt;/em> on Github:
&lt;a href="https://github.com/romainthomas/pgsharp/blob/9addafbb6672571d2b7fbba43899f662c21aac8e/jadx/PGSharpStrings.java" target="_blank" rel="noopener">PGSharpStrings.java&lt;/a>&lt;/p>
&lt;hr width="50%" />
&lt;h2 id="cheat-mechanisms">
&lt;a href="#toc">&lt;i class='fas fa-angle-up'>&lt;/i>  Cheat Mechanisms&lt;/a>&lt;/h2>
&lt;p>One &lt;del>disruptive&lt;/del> feature of PGSharp is that it does not require a rooted device. Until recently,
most of the PokemonGO cheating apps required a jailbroken or a rooted device which raises a barrier
for people who are not familiar with rooting.&lt;/p>
&lt;blockquote>
&lt;p>But wait, how &lt;em>hell&lt;/em> they do that?&lt;/p>
&lt;/blockquote>
&lt;p>The structure of the PGSharp APK is &lt;strong>very&lt;/strong> close to the genuine PokemonGO
application, which leads identifying which parts of the game have been tampered with.&lt;/p>
&lt;p>A naive comparison (cf.
&lt;a href="https://github.com/romainthomas/pgsharp/blob/9addafbb6672571d2b7fbba43899f662c21aac8e/zip_diff.py" target="_blank" rel="noopener">zip_diff.py&lt;/a>) raises mismatches on the following files:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">File&lt;/th>
&lt;th style="text-align:left">Size in PGSharp&lt;/th>
&lt;th style="text-align:left">Size in PGO&lt;/th>
&lt;th style="text-align:left">Delta&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">classes.dex&lt;/td>
&lt;td style="text-align:left">9057844&lt;/td>
&lt;td style="text-align:left">8953000&lt;/td>
&lt;td style="text-align:left">+1.17%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">classes2.dex&lt;/td>
&lt;td style="text-align:left">7131864&lt;/td>
&lt;td style="text-align:left">7107296&lt;/td>
&lt;td style="text-align:left">+0.34%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">lib/arm64-v8a/libmain.so&lt;/td>
&lt;td style="text-align:left">21278480&lt;/td>
&lt;td style="text-align:left">6424&lt;/td>
&lt;td style="text-align:left">+331134%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">META-INF/MANIFEST.MF&lt;/td>
&lt;td style="text-align:left">351045&lt;/td>
&lt;td style="text-align:left">355533&lt;/td>
&lt;td style="text-align:left">-1.26%&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The high level of similarity between the two applications, associated with a different signature
confirms that PGSharp repackaged the original application.&lt;/p>
&lt;h4 id="dex-files-diff">
&lt;a href="#toc">&lt;i class='fas fa-angle-up'>&lt;/i>  DEX Files Comparison&lt;/a>&lt;/h4>
&lt;p>To figure out which parts of the DEX files have been modified, we can use LIEF (yes, LIEF can &lt;u>&lt;b>read&lt;/b>&lt;/u> the DEX format).
Basically, the idea is to check which method(s) has a bytecode whose the size is different from the real PokemonGO
application:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">zipfile&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">lief&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">zipfile&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ZipFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CHEAT_FILE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">zip_file&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">zip_file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">hela_dex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">zipfile&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ZipFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ORIG_FILE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">zip_file&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">zip_file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">pgo_dex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">hela_dex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DEX&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hela_dex&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">pgo_dex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DEX&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pgo_dex&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">hela&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cls&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pretty_name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">.&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">.&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">prototype&lt;/span>&lt;span class="si">!s}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bytecode&lt;/span>&lt;span class="p">)&lt;/span> \
&lt;span class="k">for&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">hela_dex&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">methods&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="n">pgo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cls&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pretty_name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">.&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">.&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">prototype&lt;/span>&lt;span class="si">!s}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bytecode&lt;/span>&lt;span class="p">)&lt;/span> \
&lt;span class="k">for&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">pgo_dex&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">methods&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_hela&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">hela&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">size_pgo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pgo&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">size_pgo&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">size_hela&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Mismatch: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>By running this script on &lt;code>classes.dex&lt;/code>, we don&amp;rsquo;t find any difference.
Actually, the PGSharp authors tried to prevent &lt;em>diffing&lt;/em> by changing the line number attribute of the DEX classes.
If we try to diff the two applications from the output of apktool or Jadx, we get a lot of noise as the line number is
used in the output. On the other hand, the size bytecode for this kind of repackaging is suitable&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Running the same script on &lt;code>classes2.dex&lt;/code> raises the following mismatches:&lt;/p>
&lt;ul>
&lt;li>&lt;code>holoholo.libholoholo.unity.UnityMainActivity.onActivityResult&lt;/code>&lt;/li>
&lt;li>&lt;code>holoholo.nativelib.Library.&amp;lt;clinit&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>In &lt;code>UnityMainActivity.onActivityResult&lt;/code>, they changed this piece of code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">onActivityResult&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">i2&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Intent&lt;/span> &lt;span class="n">intent&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">UnityCallbackInfo&lt;/span> &lt;span class="n">unityCallbackInfo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">activityCallbacks&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">valueOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">unityCallbackInfo&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">UnityPlayer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">UnitySendMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">unityCallbackInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">mGameObjectName&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">unityCallbackInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">mMethodName&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">String&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">valueOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i2&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">handleActivityResult&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">intent&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>into:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">onActivityResult&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">i2&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Intent&lt;/span> &lt;span class="n">intent&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">UnityCallbackInfo&lt;/span> &lt;span class="n">unityCallbackInfo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">activityCallbacks&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">valueOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">unityCallbackInfo&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">mGameObjectName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unityCallbackInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">mGameObjectName&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">UnityPlayer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">UnitySendMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">mGameObjectName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">unityCallbackInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">mMethodName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;HL.PL&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">mGameObjectName&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">intent&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">intent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getData&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">valueOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i2&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">Client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">handleActivityResult&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">intent&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>While in the static constructor of the &lt;code>Library&lt;/code> class, they force the loading of &lt;b class="red">libmain.so&lt;/b>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">static&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">loadLibrary&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;main&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">loadLibrary&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;holoholo&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, let&amp;rsquo;s look at &lt;b class="red">libmain.so&lt;/b>&lt;/p>
&lt;h4 id="libmain">
&lt;a href="#toc">&lt;i class='fas fa-angle-up'>&lt;/i>  libmain.so&lt;/a>&lt;/h4>
&lt;p>Compared to the original PokemonGO APK, &lt;b class="red">libmain.so&lt;/b> in PGSharp is substantially larger. Moreover,
the ELF metadata leaks the original file name of the file:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-console" data-lang="console">$ readelf -d libmain.so
...
0x000000000000000e (SONAME) Library soname: [libhela.so]
...
&lt;/code>&lt;/pre>&lt;p>During the analysis of PGSharp, we find references to
&lt;a href="https://en.wikipedia.org/wiki/Hela_%28comics%29" target="_blank" rel="noopener">Hela&lt;/a>
in different places, like the package name
of the dynamically-loaded APK:&lt;br /> &lt;code>me.underworld.helaplugin&lt;/code>.&lt;/p>
&lt;p>Originally, the purpose of this library is to initialize some parts of the Unity engine but PGSharp
uses it to load its main payload.&lt;/p>
&lt;p>In the cheating app, &lt;b class="red">libmain.so&lt;/b> is responsible for:&lt;/p>
&lt;ol>
&lt;li>Initializing the Lua VM&lt;/li>
&lt;li>Implementing Lua native C functions&lt;/li>
&lt;li>Implementing JNI functions&lt;/li>
&lt;li>Calling the Lua scripts&lt;/li>
&lt;/ol>
&lt;p>&lt;b class="red">libmain.so&lt;/b> exposes &lt;code>JNI_OnLoad&lt;/code> which is used as an entrypoint
to perform the actions listed above.&lt;/p>
&lt;p>The JNI functions don&amp;rsquo;t have a meaningful name but thanks to their callsites, we can figure out their purpose:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Name&lt;/th>
&lt;th style="text-align:left">Description&lt;/th>
&lt;th style="text-align:left">Rename&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">NRL&lt;/td>
&lt;td style="text-align:left">Trigger Lua function from Java&lt;/td>
&lt;td style="text-align:left">NativeRunLua&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">NSMTC&lt;/td>
&lt;td style="text-align:left">Trigger PGSharp Action&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">NOHRB&lt;/td>
&lt;td style="text-align:left">OkHtttp callback&lt;/td>
&lt;td style="text-align:left">NativeOkHttpResponseByte&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">NOHR&lt;/td>
&lt;td style="text-align:left">OkHtttp callback&lt;/td>
&lt;td style="text-align:left">NativeOkHttpResponse&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">NOHF&lt;/td>
&lt;td style="text-align:left">OkHtttp callback&lt;/td>
&lt;td style="text-align:left">NativeOkHttpFailure&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">NIOS&lt;/td>
&lt;td style="text-align:left">Google Signing?&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">NIOR&lt;/td>
&lt;td style="text-align:left">&lt;em>Seems not used&lt;/em>&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">NOT&lt;/td>
&lt;td style="text-align:left">Perform periodic actions on Lua threads&lt;/td>
&lt;td style="text-align:left">NativeOnTimer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">NIPE&lt;/td>
&lt;td style="text-align:left">Related to PokemonGO Plus&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">NIOF&lt;/td>
&lt;td style="text-align:left">&lt;em>Seems to do nothing relevant&lt;/em>&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Similarly, for the Lua C closures, we get the following table:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Name&lt;/th>
&lt;th style="text-align:left">Description&lt;/th>
&lt;th style="text-align:left">Rename&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">callpgo&lt;/td>
&lt;td style="text-align:left">Trigger Lua function from Java&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">add_unity_task&lt;/td>
&lt;td style="text-align:left">Trigger PGSharp Action&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">initil2cppbase&lt;/td>
&lt;td style="text-align:left">OkHtttp callback&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">initil2cpphooks&lt;/td>
&lt;td style="text-align:left">OkHtttp callback&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">initil2cppmethods&lt;/td>
&lt;td style="text-align:left">OkHtttp callback&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">newjbytearray&lt;/td>
&lt;td style="text-align:left">Create a &lt;em>Java&lt;/em> bytearray from Lua&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">nar&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;td style="text-align:left">nativeAttestResponse&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">ngak&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;td style="text-align:left">nativeGetApiKey&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">findclass&lt;/td>
&lt;td style="text-align:left">Find a &lt;em>Java&lt;/em> class from Lua&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">gettid&lt;/td>
&lt;td style="text-align:left">Get Thread ID&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">logi&lt;/td>
&lt;td style="text-align:left">Log info (empty)&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">logv&lt;/td>
&lt;td style="text-align:left">Log verbose (empty)&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">init_plugin_natives&lt;/td>
&lt;td style="text-align:left">Init Java layer (JNI + &lt;code>nUSlwbRIjReLowOP&lt;/code>)&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">uf_whitelist&lt;/td>
&lt;td style="text-align:left">&lt;em>empty&lt;/em>&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">uf_forbid&lt;/td>
&lt;td style="text-align:left">&lt;em>empty&lt;/em>&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">uf_redirect&lt;/td>
&lt;td style="text-align:left">&lt;em>empty&lt;/em>&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">fkinitjni&lt;/td>
&lt;td style="text-align:left">Lua wrapper&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>&lt;/td>
&lt;td style="text-align:left">FakeInitJNI&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">fknalp&lt;/td>
&lt;td style="text-align:left">Lua wrapper&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>&lt;/td>
&lt;td style="text-align:left">FakeNativeAddLocationProvider&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">fkngsu&lt;/td>
&lt;td style="text-align:left">Lua wrapper&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>&lt;/td>
&lt;td style="text-align:left">FakeNativeGpsStatusUpdate&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">fknlu&lt;/td>
&lt;td style="text-align:left">Lua wrapper&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>&lt;/td>
&lt;td style="text-align:left">FakeNativeLocationUpdate&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">getPoisFromCache&lt;/td>
&lt;td style="text-align:left">Related to the autowalk feature&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="spoiler " >
&lt;p>
&lt;a class="btn btn-primary" data-toggle="collapse" href="#spoiler-5" role="button" aria-expanded="false" aria-controls="spoiler-5">
&lt;i class='fas fa-table'>&lt;/i>&amp;nbsp;&amp;nbsp;NRL Actions
&lt;/a>
&lt;/p>
&lt;div class="collapse card " id="spoiler-5">
&lt;div class="card-body">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Action&lt;/th>
&lt;th style="text-align:left">Event Task&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">1&lt;/td>
&lt;td style="text-align:left">plg.float.click&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">2&lt;/td>
&lt;td style="text-align:left">plg.float.remove&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">3&lt;/td>
&lt;td style="text-align:left">plg.map.tp&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">plg.setspeed&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">5&lt;/td>
&lt;td style="text-align:left">plg.randomwalk&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">6&lt;/td>
&lt;td style="text-align:left">plg.enablespoof&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">7&lt;/td>
&lt;td style="text-align:left">plg.joystart&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">8&lt;/td>
&lt;td style="text-align:left">plg.joystop&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">9&lt;/td>
&lt;td style="text-align:left">plg.entergame&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">10&lt;/td>
&lt;td style="text-align:left">plg.pause&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="alert alert-">
&lt;div>
Long story short, PGSharp repackages the PokemonGO application and implements its payload in &lt;b class="red">libmain.so&lt;/b>
&lt;/div>
&lt;/div>
&lt;blockquote>
&lt;p>&lt;em>But wait, since they repackage the application they have to re-sign the application and you won&amp;rsquo;t tell me that PokemonGO does have
signature checks?&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;center>
And this is where the fun begins!
&lt;br />&lt;br />
&lt;/center>
&lt;p>The functionalities of PGSharp heavily rely on hooking but not the hooking you might think of &amp;hellip;&lt;/p>
&lt;h3 id="signature-bypass">
&lt;a href="#toc">&lt;i class='fas fa-angle-up'>&lt;/i>  Signature Bypass&lt;/a>&lt;/h3>
&lt;p>As it is detailed in the next section, &lt;b class="red">libmain.so&lt;/b> dynamically loads another APK. Within
this APK, and more precisely in the class &lt;code>androidx.appcompat.app.AppCompatDelegateImpl&lt;/code>&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>, we can notice this method:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/* renamed from: g */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">proxifySignatureCheck&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Context&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">packageName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getPackageName&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">aThreadCls&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">forName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;android.app.ActivityThread&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Object&lt;/span> &lt;span class="n">mCurrentActivityThread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">aThreadCls&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDeclaredMethod&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;currentActivityThread&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">]).&lt;/span>&lt;span class="na">invoke&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">]);&lt;/span>
&lt;span class="n">Field&lt;/span> &lt;span class="n">sPackageManager&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">aThreadCls&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDeclaredField&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sPackageManager&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">sPackageManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAccessible&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Object&lt;/span> &lt;span class="n">pm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sPackageManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">mCurrentActivityThread&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">IPackageManager&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">forName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;android.content.pm.IPackageManager&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">SignatureMock&lt;/span> &lt;span class="n">mock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SignatureMock&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">pm&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;30820 [ ... ] aa001f55&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">packageName&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">Object&lt;/span> &lt;span class="n">newProxyInstance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Proxy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newProxyInstance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">IPackageManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClassLoader&lt;/span>&lt;span class="o">(),&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="o">[]{&lt;/span>&lt;span class="n">IPackageManager&lt;/span>&lt;span class="o">},&lt;/span> &lt;span class="n">mock&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">sPackageManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">mCurrentActivityThread&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">newProxyInstance&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">PackageManager&lt;/span> &lt;span class="n">packageManager&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getPackageManager&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Field&lt;/span> &lt;span class="n">mPM&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">packageManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClass&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getDeclaredField&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;mPM&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">mPM&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAccessible&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">mPM&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">packageManager&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">newProxyInstance&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This code leverages the Java &lt;em>hooking&lt;/em> API,
&lt;a href="https://developer.android.com/reference/java/lang/reflect/Proxy" target="_blank" rel="noopener">java.lang.reflect.Proxy&lt;/a>,
to &lt;em>proxify&lt;/em> the Android PackageManager ¯\_(ツ)_/¯.&lt;/p>
&lt;p>The &lt;em>mocked&lt;/em> PackageManager looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="nf">SignatureMock&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">pm&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">originalSignature&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">packageName&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">mPackageManager&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pm&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">mOriginalSignature&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">originalSignature&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">mPackageName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">packageName&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span> &lt;span class="c1">// java.lang.reflect.InvocationHandler
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="nf">invoke&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Method&lt;/span> &lt;span class="n">inMeth&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">PackageInfo&lt;/span> &lt;span class="n">packageInfo&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">SigningInfo&lt;/span> &lt;span class="n">signingInfo&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">// Hook getPackageInfo
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;getPackageInfo&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">inMeth&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">()))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">pkgName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">flags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">]).&lt;/span>&lt;span class="na">intValue&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">// Handle both
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// GET_SIGNATURES (0x00000040) - Deprecated in API 28
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// GET_SIGNING_CERTIFICATES (0x08000000)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">flags&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">PackageManager&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">GET_SIGNATURES&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">mPackageName&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">pkgName&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">PackageInfo&lt;/span> &lt;span class="n">fakePkgInfo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">PackageInfo&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">inMeth&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">invoke&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">mPackageManager&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// Fake the signature
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">fakePkgInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">signatures&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Signature&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">mOriginalSignature&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">fakePkgInfo&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Build&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">VERSION&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SDK_INT&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">28&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="o">(&lt;/span>&lt;span class="n">flags&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">GET_SIGNING_CERTIFICATES&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">mPackageName&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">pkgName&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="o">(&lt;/span>&lt;span class="n">signingInfo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">packageInfo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">PackageInfo&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">method&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">invoke&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">mPackageManager&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)).&lt;/span>&lt;span class="na">signingInfo&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Field&lt;/span> &lt;span class="n">FieldSigningDetails&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">signingInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClass&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getDeclaredField&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;mSigningDetails&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">FieldSigningDetails&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAccessible&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Object&lt;/span> &lt;span class="n">mSigningDetails&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FieldSigningD&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">packageInfo&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Signature&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">fakeSigArray&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Signature&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">mOriginalSignature&lt;/span>&lt;span class="o">)};&lt;/span>
&lt;span class="n">Field&lt;/span> &lt;span class="n">FieldSignatures&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mSigningDetails&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClass&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getDeclaredField&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;signatures&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">FieldSignatures&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAccessible&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">FieldSignatures&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">FieldSigningDetails&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">fakeSigArray&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">packageInfo&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">inMeth&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">invoke&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">mPackageManager&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In doing so, when PokemonGO accesses the PackageManager, it gets a &lt;em>mocked&lt;/em> version of the PackageManager
that is &lt;strong>controlled&lt;/strong> by PGSharp.
PGSharp changes the behavior of &lt;code>getPackageInfo()&lt;/code> to return the real PokemonGO signature instead of its own.&lt;/p>
&lt;p>The following figure outlines the process:&lt;/p>
&lt;p>&lt;img src="mock_signature.png" alt="Mock Android PackageManager">&lt;/p>
&lt;h3 id="dynamic-apk-loading">
&lt;a href="#toc">&lt;i class='fas fa-angle-up'>&lt;/i>  Dynamic APK Loading&lt;/a>&lt;/h3>
&lt;p>In the Lua script &lt;code>plugin.lua&lt;/code>, PGSharp defines an &lt;code>init&lt;/code> function that performs the following
actions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="kd">local&lt;/span> &lt;span class="n">filesdir&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ref.call_method&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">runtime.app&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;getFilesDir&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;()Ljava/io/File;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">local&lt;/span> &lt;span class="n">filesdirpath&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ref.call_method&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">filesdir&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;getAbsolutePath&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;()Ljava/lang/String;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">u_plugin_path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">gh.ipf&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">loadjstring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">filesdirpath&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>ipf&lt;/code> is a function that takes the output of &lt;code>cxt.getFilesDir().getAbsolutePath()&lt;/code> as parameter,
in other words, the path of the &lt;em>files&lt;/em> directory of PokemonGO: &lt;code>/data/data/com.nianticlabs.pokemongo/files&lt;/code>,
and returns a &lt;code>u_plugin_path&lt;/code> as a Lua string.&lt;/p>
&lt;p>If we look for &lt;code>ipf&lt;/code> in the Lua scripts, we don&amp;rsquo;t find any implementation. Actually, this
function is referenced in the &lt;code>gamehelper()&lt;/code> function of &lt;b class="red">libmain.so&lt;/b> where it is
linked as follows:&lt;/p>
&lt;p>&lt;img src="ipf.png" alt="Lua registering IPF">&lt;/p>
&lt;p>So &lt;code>ipf&lt;/code> is a native Lua C function registered with &lt;code>lua_pushcclosure&lt;/code>.&lt;/p>
&lt;p>Once we identified the location of &lt;code>ipf&lt;/code>, the logic of the function can be summarized with this pseudo code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="c1">// file_dir: /data/user/0/com.nianticlabs.pokemongo/files
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">ipf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lua_State&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// std::string ctor @0xA4F00
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">outpath&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lua_tostring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// std::string::append @0xD868C
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">outpath&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">outpath&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;LZZqoKpt.plg&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">FILE&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">fout&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">outpath&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c_str&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="s">&amp;#34;wb&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// @0x634424
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">extract_apk_file&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FILE&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">fout&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nl">chunk&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">chunks&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">decode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">chunk&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x2710&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">fwrite&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">chunk&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x2710&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fout&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">fclose&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fout&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">lua_pushlstring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">outpath&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c_str&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">outpath&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">inline_decode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">uint8_t&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Byte decoding
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mh">0xb3&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0x4c&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="alert alert-">
&lt;div>
Since the decoded file is written in the &lt;code>/data&lt;/code> partition,
one can also pull the file from the device (this file is not removed when PGSharp stops running).
&lt;/div>
&lt;/div>
&lt;p>The written file, &lt;code>LZZqoKpt.plg&lt;/code>, is actually an APK that is loaded with &lt;code>PathClassLoader&lt;/code> in the Lua script:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="n">u_classloader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ref.new_instance&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="s2">&amp;#34;dalvik/system/PathClassLoader&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;(Ljava/lang/String;Ljava/lang/String;Ljava/lang/ClassLoader;)V&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">env.NewStringUTF&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">u_plugin_path&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">nativeLibraryDir&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">gh.pgo_classloader&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="spoiler " >
&lt;p>
&lt;a class="btn btn-primary" data-toggle="collapse" href="#spoiler-8" role="button" aria-expanded="false" aria-controls="spoiler-8">
&lt;i class='fas fa-file-code'>&lt;/i>&amp;nbsp;&amp;nbsp;Rest of the function
&lt;/a>
&lt;/p>
&lt;div class="collapse card " id="spoiler-8">
&lt;div class="card-body">
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="n">u_plugin_cls&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">findclass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;me/underworld/helaplugin/PL&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">u_classloader&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">u_global_cls&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">findclass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;me/underworld/helaplugin/GL&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">u_classloader&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">u_runnable_cls&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">findclass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;me/underworld/helaplugin/HR&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">u_classloader&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">u_global_cls&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">env.NewGlobalRef&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">u_global_cls&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">u_plugin_cls&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">env.NewGlobalRef&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">u_plugin_cls&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">u_classloader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">env.NewGlobalRef&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">u_classloader&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">u_runnable_cls&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">env.NewGlobalRef&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">u_runnable_cls&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">u_runnable_init_mid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">env.GetMethodID&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">u_runnable_cls&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;init&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;(ILjava/lang/Object;)V&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">u_geturl_mid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">env.GetStaticMethodID&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">u_plugin_cls&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;GU&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;(Ljava/lang/String;Ljava/lang/String;)I&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">u_postString_mid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">env.GetStaticMethodID&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">u_plugin_cls&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;vtEdUZmWQYAgtGWs&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">u_postBytes_mid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">env.GetStaticMethodID&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">u_plugin_cls&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;BbTwaTXurePBxTDt&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;(Ljava/lang/String;[BLjava/lang/String;)I&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">u_onLuaMessage_mid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">env.GetStaticMethodID&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">u_plugin_cls&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;tFAxNZCNHOXBTYGM&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;(ILjava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">u_global_updatelocation_mid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">env.GetStaticMethodID&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">u_global_cls&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;ul&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;(DD)V&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">u_global_savelocation_mid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">env.GetStaticMethodID&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">u_global_cls&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;sl&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;()V&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">gh.init_plugin_natives&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">u_classloader&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">ref.call_static_method&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">u_plugin_cls&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;rDymrMuxPIlIESFe&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;(Landroid/app/Application;Ljava/lang/String;I)V&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">runtime.app&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">env.NewStringUTF&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">u_plugin_path&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">runtime.log_level&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">local&lt;/span> &lt;span class="n">cls&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">gh.findclass&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="s2">&amp;#34;me.underworld.helaplugin.HLVM&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">u_classloader&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">local&lt;/span> &lt;span class="n">hlviewmanagerref&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ref.call_static_method&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">cls&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;getInstance&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;()Lme/underworld/helaplugin/HLVM;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">u_sm_mid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">env.GetMethodID&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">cls&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;SM&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;(Ljava/lang/String;I)V&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">u_setviewshow_mid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">env.GetMethodID&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">cls&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;SVC&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;(Ljava/lang/String;Z)V&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">u_hlviewmanager&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">env.NewGlobalRef&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">hlviewmanagerref&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">plugin.classloader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">u_classloader&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h3 id="gps-spoofing">
&lt;a href="#toc">&lt;i class='fas fa-angle-up'>&lt;/i>  GPS Spoofing&lt;/a>&lt;/h3>
&lt;p>Since PokemonGO heavily relies on the user&amp;rsquo;s location, the must-have feature for the PokemonGO cheat engines
is to be able to spoof the GPS location.&lt;/p>
&lt;p>The genuine PokemonGO application manages the user location through the Java class &lt;code>NianticLocationManager&lt;/code>,
which exposes three natives functions:&lt;/p>
&lt;ol>
&lt;li>&lt;span class="blue">nativeAddLocationProviders(Context ctx)&lt;/span>&lt;/li>
&lt;li>&lt;span class="blue">nativeGpsStatusUpdate(int i, SatelliteInfo[] info)&lt;/span>&lt;/li>
&lt;li>&lt;span class="blue">nativeLocationUpdate(String providerName, Location location, &amp;hellip;)&lt;/span>&lt;/li>
&lt;/ol>
&lt;p>&lt;code>nativeAddLocationProviders&lt;/code> aims at instantiating the different location providers as Java object:&lt;/p>
&lt;ol>
&lt;li>FusedLocationProvider&lt;/li>
&lt;li>GnssLocationProvider&lt;/li>
&lt;li>GpsLocationProvider&lt;/li>
&lt;li>NetworkLocationProvider&lt;/li>
&lt;/ol>
&lt;p>while &lt;code>nativeLocationUpdate&lt;/code> and &lt;code>nativeGpsStatusUpdate&lt;/code> are a kind of callbacks triggered when there is
a new user location to consider.&lt;/p>
&lt;p>The implementation of &lt;code>nativeLocationUpdate&lt;/code> checks natively if the location object given in the second parameter
is &lt;em>mocked&lt;/em> (cf.
&lt;a href="https://developer.android.com/reference/android/location/Location#isMock%28%29" target="_blank" rel="noopener">isMock()&lt;/a> or
&lt;a href="https://developer.android.com/reference/android/location/Location#isFromMockProvider%28%29" target="_blank" rel="noopener">isFromMockProvider()&lt;/a>).&lt;/p>
&lt;p>Actually PGSharp hooks two of these three native methods:&lt;/p>
&lt;ol>
&lt;li>&lt;span class="red">&lt;i class="fas fa-cogs"> &lt;/i>nativeAddLocationProviders(Context ctx)&lt;/span>&lt;/li>
&lt;li>&lt;span class="blue">nativeGpsStatusUpdate(int i, SatelliteInfo[] info)&lt;/span>&lt;/li>
&lt;li>&lt;span class="red">&lt;i class="fas fa-cogs"> &lt;/i>nativeLocationUpdate(String provider, Location location, &amp;hellip;)&lt;/span>&lt;/li>
&lt;/ol>
&lt;p>By hooking &lt;code>nativeLocationUpdate&lt;/code>, they can modify the value of the &lt;code>Location&lt;/code> parameter to change
the real location.&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>&amp;ldquo;You assert that PGSharp hooks &lt;code>nativeLocationUpdate&lt;/code> and &lt;code>nativeAddLocationProviders&lt;/code> in
&lt;code>libNianticLabsPlugin.so&lt;/code>, but this library is protected by a commercial obfuscator
which has anti-hooks features. How do they hook these functions?&amp;quot;&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>And this is where the fun reaches another level 🚀&lt;/p>
&lt;h3 id="jnienv-proxifier">
&lt;a href="#toc">&lt;i class='fas fa-angle-up'>&lt;/i>  JNIEnv Proxifier&lt;/a>&lt;/h3>
&lt;p>I would assume that &lt;code>nativeLocationUpdate&lt;/code> and &lt;code>nativeAddLocationProviders&lt;/code> are critical
enough to be protected against hooking. It turns out that PGSharp embeds a hooking framework to hook
Unity functions, but they don&amp;rsquo;t use it on these functions.&lt;/p>
&lt;center>
&lt;b>
The authors of PGSharp found a subtle trick to circumvent the anti-hook protection.&lt;br />&lt;br />
&lt;/b>
&lt;/center>
&lt;p>&lt;code>nativeLocationUpdate&lt;/code> and &lt;code>nativeAddLocationProviders&lt;/code> are JNI functions
that are &lt;strong>dynamically&lt;/strong> registered by &lt;code>Java_com_nianticlabs_nia_unity_UnityUtil_nativeInit&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">Java_com_nianticlabs_nia_unity_UnityUtil_nativeInit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">env&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">RegisterNatives&lt;/span>&lt;span class="p">(...);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>env&lt;/code> parameter refers to the JNIEnv structure which is an array of function pointers:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">struct&lt;/span> &lt;span class="nc">JNINativeInterface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="n">jclass&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">GetObjectClass&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">JNIEnv&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">jobject&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">jboolean&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">IsInstanceOf&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">JNIEnv&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">jobject&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">jclass&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">jmethodID&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">GetMethodID&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">JNIEnv&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">jclass&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The values
of these pointers are defined by the implementation of the &amp;ldquo;JVM&amp;rdquo; which is, for Android, the &lt;strong>A&lt;/strong>ndroid &lt;strong>R&lt;/strong>un&lt;strong>T&lt;/strong>ime (ART).&lt;/p>
&lt;p>For instance, &lt;code>FindClass&lt;/code> is actually a pointer
to &lt;code>art::{CheckJNI, JNIImpl}::FindClass&lt;/code> located in &lt;code>art/runtime/jni/{jni_internal, check_jni}.cc&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">static&lt;/span> &lt;span class="n">jclass&lt;/span> &lt;span class="nf">FindClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">JNIEnv&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">Runtime&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">runtime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Runtime&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Current&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">ClassLinker&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">class_linker&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">runtime&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetClassLinker&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">descriptor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NormalizeJniClassDescriptor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">ScopedObjectAccess&lt;/span> &lt;span class="n">soa&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">ObjPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">mirror&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">runtime&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">IsStarted&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">StackHandleScope&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">hs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">soa&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Self&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="n">Handle&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">mirror&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ClassLoader&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">class_loader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">NewHandle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GetClassLoader&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">kEnableIndexIds&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">soa&lt;/span>&lt;span class="p">)));&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">class_linker&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">FindClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">soa&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Self&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">descriptor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c_str&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">class_loader&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">class_linker&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">FindSystemClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">soa&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Self&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">descriptor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c_str&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">soa&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddLocalReference&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">jclass&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If we hook &lt;code>Java_com_nianticlabs_nia_unity_UnityUtil_nativeInit&lt;/code> from the &lt;strong>genuine&lt;/strong> PokemonGO,
and we check where the pointers of the &lt;code>JNIEnv&lt;/code> structure point to, we get this kind of output:&lt;/p>
&lt;p>&lt;img src="jni_ptr_clean.png" alt="Normal values of the JNI Pointers">&lt;/p>
&lt;p>This output is consistent with what we said about the &lt;em>JVM&lt;/em> and the runtime ART.
If we do the same check &lt;strong>on PGSharp&lt;/strong>, we get this result:&lt;/p>
&lt;p>&lt;img src="jni_ptr_cheat.png" alt="Modified values of the JNI Pointers">&lt;/p>
&lt;p>As we can see, some pointers have been relocated to point in &lt;b class="red">libmain.so&lt;/b>:&lt;/p>
&lt;center>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">JNI Function&lt;/th>
&lt;th style="text-align:left">Offset in libmain.so (v1.33.0)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">GetMethodID&lt;/td>
&lt;td style="text-align:left">0x14540c&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">CallObjectMethodV&lt;/td>
&lt;td style="text-align:left">0x145194&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">CallVoidMethodV&lt;/td>
&lt;td style="text-align:left">0x145040&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">RegisterNatives&lt;/td>
&lt;td style="text-align:left">0x1452f0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/center>
&lt;p>It means that when &lt;code>libNianticLabsPlugin.so&lt;/code> is calling one of the functions listed above,
the execution is forwarded to &lt;b class="red">libmain.so&lt;/b> instead of &lt;b class="green">libart.so&lt;/b>.&lt;/p>
&lt;p>&lt;img src="jnienv_proxy.png" alt="JNIEnv Proxy">&lt;/p>
&lt;p>PGSharp proxifies these functions for the following purposes:&lt;/p>
&lt;p>&lt;strong>GetMethodID&lt;/strong>&lt;/p>
&lt;p>  To monitor:&lt;/p>
&lt;ol>
&lt;li>SafetyNetService.attest&lt;/li>
&lt;li>SafetyNetService.cancel&lt;/li>
&lt;li>NianticLocationManager.addLocationProvider&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>CallVoidMethodV&lt;/strong>&lt;/p>
&lt;p>  To monitor the parameters of:&lt;/p>
&lt;ol>
&lt;li>SafetyNetService.attest (to intercept the nonce)&lt;/li>
&lt;li>SafetyNetService.cancel&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>RegisterNatives&lt;/strong>&lt;/p>
&lt;p>  Proxified to get, and potentially change, the effective location of the &lt;br />
  &lt;code>libNianticLabsPlugin.so&lt;/code> JNI functions:&lt;/p>
&lt;ol>
&lt;li>nativeAttestResponse&lt;/li>
&lt;li>nativeGetApiKey&lt;/li>
&lt;li>nativeAddLocationProviders&lt;/li>
&lt;li>nativeLocationUpdate&lt;/li>
&lt;li>initJni&lt;/li>
&lt;li>nativeInjectEvent&lt;/li>
&lt;li>nativeUnitySendMessage&lt;/li>
&lt;li>nativeRender&lt;/li>
&lt;li>nativeMuteMasterAudio&lt;/li>
&lt;/ol>
&lt;p>By managing the function &lt;code>JNIEnv::RegisterNatives&lt;/code>, they are able to change the value of &lt;code>JNINativeMethod.fnPtr&lt;/code>,
such as when PokemonGO calls &lt;code>nativeLocationUpdate&lt;/code>, it actually calls a function managed by PGSharp.&lt;/p>
&lt;p>It results that JNI functions used by &lt;code>libNianticLabsPlugin.so&lt;/code> have been &lt;em>redefined&lt;/em>:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">JNI Function&lt;/th>
&lt;th style="text-align:left">Location&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;b class="red">NianticLocationManager.nativeAddLocationProviders&lt;/b>&lt;/td>
&lt;td style="text-align:left">&lt;b class="red">libmain.so!ea868&lt;/b>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">NianticLocationManager.nativeGpsStatusUpdate&lt;/td>
&lt;td style="text-align:left">libNianticLabsPlugin.so!bc508&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;b class="red">NianticLocationManager.nativeLocationUpdate&lt;/b>&lt;/td>
&lt;td style="text-align:left">&lt;b class="red">libmain.so!ea8bc&lt;/b>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">NLog.nativeDispatchLogMessage&lt;/td>
&lt;td style="text-align:left">libNianticLabsPlugin.so!4beaa0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">NetworkConnectivity.nativeNotifyNetworkStateChanged&lt;/td>
&lt;td style="text-align:left">libNianticLabsPlugin.so!6f8118&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">NianticTrustManager.nativeCheckClientTrusted&lt;/td>
&lt;td style="text-align:left">libNianticLabsPlugin.so!9b9cc&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">NianticTrustManager.nativeCheckServerTrusted&lt;/td>
&lt;td style="text-align:left">libNianticLabsPlugin.so!73b42c&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">NianticTrustManager.nativeGetAcceptedIssuers&lt;/td>
&lt;td style="text-align:left">libNianticLabsPlugin.so!6dc5c8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">WebsocketController.nativeOnDidClose&lt;/td>
&lt;td style="text-align:left">libNianticLabsPlugin.so!6fcabc&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">WebsocketController.nativeOnDidFail&lt;/td>
&lt;td style="text-align:left">libNianticLabsPlugin.so!4a0d0c&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">WebsocketController.nativeOnDidOpen&lt;/td>
&lt;td style="text-align:left">libNianticLabsPlugin.so!5922b0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">WebsocketController.nativeOnDidReceiveData&lt;/td>
&lt;td style="text-align:left">libNianticLabsPlugin.so!742fa8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">SafetyNetService.nativeAttestResponse&lt;/td>
&lt;td style="text-align:left">libNianticLabsPlugin.so!5ea1b8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">SafetyNetService.nativeGetApiKey&lt;/td>
&lt;td style="text-align:left">libNianticLabsPlugin.so!6bc60&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">NianticSensorManager.nativeCompassUpdate&lt;/td>
&lt;td style="text-align:left">libNianticLabsPlugin.so!4b9bc0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">NianticSensorManager.nativeSensorUpdate&lt;/td>
&lt;td style="text-align:left">libNianticLabsPlugin.so!177c44&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="unity-hooks">
&lt;a href="#toc">&lt;i class='fas fa-angle-up'>&lt;/i>  Unity Hooks&lt;/a>&lt;/h3>
&lt;p>In addition to GPS spoofing, PGSharp provides other functionalities such as,
Pokemon feed, skip evolve animation &amp;hellip;&lt;/p>
&lt;p>In the genuine PokemonGO application, these functionalities are implemented in the Unity layer
that is &lt;em>compiled&lt;/em> into &lt;code>libil2cpp.so&lt;/code>.&lt;/p>
&lt;p>To perform these functionalities, PGSharp hooks (hooking like Frida) some of these Unity functions.&lt;/p>
&lt;p>They tried to hide&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup> the underlying hooking framework used to perform these hooks, unfortunately they missed
to remove important strings:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-console" data-lang="console">$ strings ./libmain.so|grep -i -E &amp;quot;\w\+\.cc&amp;quot;
E:/work/code/Hela/app/src/main/cpp/Dobby/source/InterceptRouting/Routing/FunctionInlineReplace/FunctionInlineReplaceExport.cc
E:/work/code/Hela/app/src/main/cpp/Dobby/source/TrampolineBridge/Trampoline/arm64/trampoline-arm64.cc
E:/work/code/Hela/app/src/main/cpp/Dobby/source/MemoryAllocator/MemoryArena.cc
E:/work/code/Hela/app/src/main/cpp/Dobby/source/InstructionRelocation/arm64/ARM64InstructionRelocation.cc
E:/work/code/Hela/app/src/main/cpp/Dobby/source/UserMode/PlatformUtil/Linux/ProcessRuntimeUtility.cc
E:/work/code/Hela/app/src/main/cpp/Dobby/source/UserMode/UnifiedInterface/platform-posix.cc
&lt;/code>&lt;/pre>&lt;p>So the hooking framework is Dobby:&lt;/p>
&lt;center>
&lt;i class='fas fa-github'>&lt;/i>&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href="https://github.com/jmpews/Dobby" target="_blank" rel="noopener">https://github.com/jmpews/Dobby&lt;/a>
&lt;br /> &lt;br />
&lt;/center>
&lt;p>Unity hooks start, in the script &lt;code>init.lua&lt;/code> of PGSharp where they wait for the loading of &lt;code>libil2cpp.so&lt;/code>&lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="n">set_event_handler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;pgo.il2ready&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="kr">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">il2base&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">runtime.il2base&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">il2base&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">gh.initil2cppmethods&lt;/span>&lt;span class="p">)();&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">gh.initil2cpphooks&lt;/span>&lt;span class="p">)();&lt;/span>
&lt;span class="kr">end&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>initil2cppmethods()&lt;/code> aims at resolving the address of PokemonGO Unity functions needed to perform cheating actions,
while &lt;code>initil2cpphooks()&lt;/code> dobby-hooks some Unity functions to change their behaviour.
In the version 1.33 of PGSharp, they hook 207 functions
of &lt;code>libil2cpp.so&lt;/code> and we will take one of them to detail the internal mechanisms:&lt;/p>
&lt;ul>
&lt;li>&lt;code>UnityEngine.Application$$OpenURL&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>First of all, if we look at the symbols or the strings of &lt;code>libil2cpp.so&lt;/code>, we don&amp;rsquo;t find meaningful information that could
help to figure out the original purpose of the Unity functions. In fact, the Unity metadata are embedded
in &lt;code>global-metadata.dat&lt;/code>, and to recover the bindings between this file
and &lt;code>libil2cpp.so&lt;/code>, we can use
&lt;a href="https://github.com/Perfare/Il2CppDumper" target="_blank" rel="noopener">Perfare/Il2CppDumper&lt;/a>.&lt;/p>
&lt;p>They compute the absolute of a Unity function by adding the offset provided by &lt;code>global-metadata.dat&lt;/code>
to the base address of &lt;code>libil2cpp.so&lt;/code>. Here is an example &lt;code>UnityEngine.Application$$OpenURL&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-arm" data-lang="arm">MOV W13, 0x4bfeea0 ; Offset of the function (thanks to global-metadata.dat)
ADRP X14, #Application_OpenURL
ADD X13, X8, X13 ; Add the libil2cpp.so base address
STR X13, [X14, #Application_OpenURL] ; Store the absolute address in libmain.so
&lt;/code>&lt;/pre>&lt;p>The function associated with &lt;code>initil2cpphooks()&lt;/code> is quite large as shown in the figure below:&lt;/p>
&lt;p>&lt;img src="initil2cpphooks.png" alt="initil2cpphooks">&lt;/p>
&lt;p>Actually, the function is large but easily understandable statically&lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup>. The right-hand side of the figure is actually
the &lt;code>catch { ... }&lt;/code> handlers of the exceptions, while the left-hand side that goes down, initializes
C++ objects. In this area of the CFG, we find the same pattern that repeats all the way down:&lt;/p>
&lt;p>&lt;img src="dobby_hook_vtable.png" alt="Dobby Hooking VTable">&lt;/p>
&lt;p>From what we can see, it initializes a C++ object (on the stack) and the first instructions setup the
VTable. We can find the relevant function in the last entry of the VTable that contains the hooking logic:&lt;/p>
&lt;p>&lt;img src="hook_OpenURL.png" alt="Dobby Hooking OpenURL">&lt;/p>
&lt;p>From this code, we can see that they perform the resolution of the absolute address of
&lt;code>UnityEngine.Application$$OpenURL&lt;/code>. Also, thanks to the prototype of &lt;code>DobbyHook()&lt;/code> we can
quickly understand that the new behavior of &lt;code>OpenURL&lt;/code> is located in the function &lt;code>sub_6C983C&lt;/code>:&lt;/p>
&lt;p>&lt;img src="il2cpp_hooks.png" alt="Dobby Hooking OpenURL">&lt;/p>
&lt;p>In this hook, they check if PokemonGO is opening its Google Play URL and redirect the user to the PGSharp home page.&lt;/p>
&lt;h3 id="network">
&lt;a href="#toc">&lt;i class='fas fa-angle-up'>&lt;/i>  Network Communications and Encryption&lt;/a>&lt;/h3>
&lt;p>The cheating application communicates with its servers through the TLS/HTTP protocol and adds another layer
of encryption on the top of TLS. To encrypt the HTTP payload, they use AES in the CBC mode.
We can identify the AES algorithm thanks to clear S-BOX present in the &lt;code>.rodata&lt;/code> section.&lt;/p>
&lt;p>It seems that they use different keys, depending on the endpoint the application targets but
we can retrieve them by hooking the AES key schedule function. It results that we can decrypt the communication
between the application and the PGSharp servers&lt;sup id="fnref:9">&lt;a href="#fn:9" class="footnote-ref" role="doc-noteref">9&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Here are examples of endpoints and the data sent by PGSharp:&lt;/p>
&lt;div class="spoiler " >
&lt;p>
&lt;a class="btn btn-primary" data-toggle="collapse" href="#spoiler-9" role="button" aria-expanded="false" aria-controls="spoiler-9">
&lt;i class='fas fa-link'>&lt;/i>&amp;nbsp;&amp;nbsp;hazelnuts
&lt;/a>
&lt;/p>
&lt;div class="collapse card " id="spoiler-9">
&lt;div class="card-body">
&lt;ul>
&lt;li>&lt;strong>POST &lt;code>hazelnuts&lt;/code>&lt;/strong>
&lt;ul>
&lt;li>Action: Handshake&lt;/li>
&lt;li>Request:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json"> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;bid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;com.nianticlabs.pokemongo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;clt&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;pgs&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;host&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Samsung A40&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;lv&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;nonce&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;nonce_key&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;pgver&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0.221.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;uid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;00000000-00000000-[...]&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;ver&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.33.0&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Response:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;err&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;shiny&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;List of shiny&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;hotplaces&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;🇧🇷 Consolacao, São Paulo, Brazil&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;lat&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">-23.5512&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;lng&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">-46.6584&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="spoiler " >
&lt;p>
&lt;a class="btn btn-primary" data-toggle="collapse" href="#spoiler-10" role="button" aria-expanded="false" aria-controls="spoiler-10">
&lt;i class='fas fa-link'>&lt;/i>&amp;nbsp;&amp;nbsp;Cw8dfkXpW7mq2i
&lt;/a>
&lt;/p>
&lt;div class="collapse card " id="spoiler-10">
&lt;div class="card-body">
&lt;ul>
&lt;li>&lt;strong>POST &lt;code>Cw8dfkXpW7mq2i&lt;/code>&lt;/strong>
&lt;ul>
&lt;li>Action: &lt;code>PGS_ACTIONS.GETPLAYER&lt;/code>&lt;/li>
&lt;li>Request:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;bid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;com.nianticlabs.pokemongo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;clt&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;pgs&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;host&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Samsung A40&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;lv&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;nonce&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;nonce_key&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;pgver&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0.221.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;player&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;ban&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;captured&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;encountered&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;kmwalked&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">10.50&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;outage&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;pid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;[redacted]&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;serverlo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;susp&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;suspa&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;visits&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;warn&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;warna&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;warndt&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">623234511000000000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;warntm&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;uid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;00000000-00000000-[...]&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;ver&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.33.0&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="spoiler " >
&lt;p>
&lt;a class="btn btn-primary" data-toggle="collapse" href="#spoiler-11" role="button" aria-expanded="false" aria-controls="spoiler-11">
&lt;i class='fas fa-link'>&lt;/i>&amp;nbsp;&amp;nbsp;SSZgBPn6Ixq2ZK
&lt;/a>
&lt;/p>
&lt;div class="collapse card " id="spoiler-11">
&lt;div class="card-body">
&lt;ul>
&lt;li>&lt;strong>POST &lt;code>SSZgBPn6Ixq2ZK&lt;/code>&lt;/strong>
&lt;ul>
&lt;li>Action: &lt;code>PGS_ACTIONS.GETREPORTABLE&lt;/code>&lt;/li>
&lt;li>Request:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;bid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;com.nianticlabs.pokemongo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;clt&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;pgs&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;host&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Samsung A40&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;lv&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;nonce&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;nonce_key&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;pgver&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0.221.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;raid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;battle&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1634490000000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;campaignId&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;complete&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;costume&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">12233&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;dex&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">326&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;eligible&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;end&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1634490000000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;exclusive&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;form&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;free&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;gender&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;hidden&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;lat&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">0.1234&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;lng&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">5.6789&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;lv&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;mov1&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">163&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;mov2&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">90&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;schedule&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;seed&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5000000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;spawn&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1634400000000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;team&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;web&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;wec&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;uid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;00000000-00000000-[...]&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;ver&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.33.0&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="spoiler " >
&lt;p>
&lt;a class="btn btn-primary" data-toggle="collapse" href="#spoiler-12" role="button" aria-expanded="false" aria-controls="spoiler-12">
&lt;i class='fas fa-link'>&lt;/i>&amp;nbsp;&amp;nbsp;/pga/keycode/v-q2mgqcyji/
&lt;/a>
&lt;/p>
&lt;div class="collapse card " id="spoiler-12">
&lt;div class="card-body">
&lt;ul>
&lt;li>&lt;strong>POST &lt;code>/pga/keycode/v-q2mgqcyji/&lt;/code>&lt;/strong>
&lt;ul>
&lt;li>Action: Activate PGSharp with a premium key&lt;/li>
&lt;li>Request:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;ver&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.33.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;gi&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;key&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;AVerySecretKey&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;host&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Samsung A40&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;clt&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;pgs&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;ua&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Samsung A40/11/[redacted]/arm64-v8a/[redacted]/unknow/unknown/English&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;uid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;00000000-00000000-[...]&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h3 id="safetynet">
&lt;a href="#toc">&lt;i class='fas fa-angle-up'>&lt;/i>  SafetyNet&lt;/a>&lt;/h3>
&lt;p>&lt;img src="snet.svg" alt="safetynet">&lt;/p>
&lt;div class="alert alert-warning">
&lt;div>
I skimmed this layer this weekend, so some parts might be inaccurate or wrong.
&lt;/div>
&lt;/div>
&lt;p>In addition to standard code obfuscation, PokemonGO uses SafetyNet as an attestation mechanism.
Similarly to the GPS management, we find a (non-obfuscated) Java layer implemented in the class
&lt;code>SafetyNetService&lt;/code>. This class exposes two native functions:&lt;/p>
&lt;ol>
&lt;li>&lt;span class="blue">String nativeGetApiKey()&lt;/span>&lt;/li>
&lt;li>&lt;span class="blue">void nativeAttestResponse(byte[] nonce, String jwtResult)&lt;/span>&lt;/li>
&lt;/ol>
&lt;p>The implementation of these two functions is obfuscated within &lt;code>libNianticLabsPlugin.so&lt;/code>.&lt;/p>
&lt;p>The first function is used to get the Google SafetyNet API key (&lt;code>AIzaSyCh8l[...]_eOTXhM4&lt;/code>) while the second one,
is involved in the validation of the SafetyNet attestation.&lt;/p>
&lt;p>Thanks to the JNIEnv proxy on &lt;code>GetMethodID&lt;/code> and &lt;code>CallVoidMethodV&lt;/code>,
PGSharp is able to monitor the calls to &lt;code>SafetyNetService.attest(bytes[] nonce)&lt;/code>. When this function is called,
PGSharp intercepts the nonce and forward the request to its servers:&lt;/p>
&lt;center>
&lt;span class="red">https://tens.pgsharp.com/v1/scc-2-eg[...]4/&lt;/span>&lt;br />&lt;br />
&lt;/center>
&lt;p>The request is performed through a http POST, whose the data are encrypted with AES. The clear payload
has the following layout:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;n&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Cy[...]&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;type&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;attest&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;ver&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;PGSharp Version&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;k&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;i3[...]&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;clt&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;pgs&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;data&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;k&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;AIzaSyCh8l[...]_eOTXhM4 &amp;lt;- From nativeGetApiKey&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;n&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;nonce&amp;gt;&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>On success, the server responses with an AES-encrypted payload which has the following layout:&lt;/p>
&lt;pre tabindex="0">&lt;code>{&amp;quot;result&amp;quot;:&amp;quot;suc: &amp;lt;JWT SafetyNet Attestation&amp;gt;&amp;quot;}
&lt;/code>&lt;/pre>&lt;p>The JWT SafetyNet value is then forwarded by PGSharp to &lt;code>nativeAttestResponse()&lt;/code> with the original nonce.
At some point, this JWT attestation is sent to Niantic&amp;rsquo;s servers (on the endpoint &lt;code>plfe/112/rpc2&lt;/code>)
wrapped by a Protobuf structure.&lt;/p>
&lt;p>To understand how they &lt;em>&amp;ldquo;bypass&amp;rdquo;&lt;/em> SafetyNet, let&amp;rsquo;s look at the JWT payload:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;nonce&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;nonce&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;timestampMs&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1636265656&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;apkPackageName&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;com.nianticlabs.pokemongo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;apkDigestSha256&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;ioYmlh5mk5EhMUH/DsaG1jrhUoQJDK/2IvK61eiAXJE=&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;ctsProfileMatch&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;apkCertificateDigestSha256&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s2">&amp;#34;lEvaRm6vZL4ck4ltXI6aRUoHyNj8vEre7vs1RbM16Xk=&amp;#34;&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;basicIntegrity&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;evaluationType&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;BASIC&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>First of all, the JWT is correctly signed by Google SafetyNet&amp;rsquo;s key and the &lt;code>apkCertificateDigestSha256&lt;/code>
matches the signature of the real PokemonGO application.&lt;/p>
&lt;p>But &amp;hellip;&lt;/p>
&lt;p>The value of &lt;code>apkDigestSha256&lt;/code> does not match the checksum of the genuine PokemonGO application 😕&lt;/p>
&lt;p>&lt;strong>Here are my hypothesis:&lt;/strong>&lt;/p>
&lt;p>The server &lt;code>https://tens.pgsharp.com/v1/scc-2-eg/...&lt;/code> forwards the SafetyNet request to
a real application that runs on a real device. This application would have been created by PGSharp authors
to &lt;em>really&lt;/em> run SafetyNet and to get a valid attestation signed with a valid Google key.
The fake application would have been created with &lt;code>com.nianticlabs.pokemongo&lt;/code> as package name
and would implement signature mocking, as discussed in the first part.&lt;/p>
&lt;p>If they would have managed to break SafetyNet, the &lt;code>apkDigestSha256&lt;/code> value would have been consistent.&lt;/p>
&lt;p>The JWT attestation is forwarded to Niantic so they might check the consistency of &lt;code>apkDigestSha256&lt;/code>
but they might only focus on the signature (which can be faked) and not this value &amp;hellip;&lt;/p>
&lt;h3 id="pgsharp-signature-check">
&lt;a href="#toc">&lt;i class='fas fa-angle-up'>&lt;/i>  When PGSharp avoids PokemonGO pitfalls&lt;/a>&lt;/h3>
&lt;p>As discussed in the section
&lt;a href="#signature-bypass">&lt;em>Signature Bypass&lt;/em>&lt;/a>, PGSharp
tricks the Android PackageManager to mock the signature of the application.&lt;/p>
&lt;p>It turns out that PGSharp is also concerned about app repackaging. As they provide premium
features, they don&amp;rsquo;t want to be cheated &amp;hellip;&lt;/p>
&lt;p>In the function associated with &lt;code>PGS_ACTIONS.INITPOST&lt;/code> they perform a device fingerprint
whose one of these elements is the APK&amp;rsquo;s signature. But instead of using the Android PackageManager to
retrieve the signature, they use
&lt;a href="https://github.com/DimaKoz/stunning-signature" target="_blank" rel="noopener">DimaKoz/stunning-signature&lt;/a>
to compute the MD5 digest of the signature.&lt;/p>
&lt;h2 id="final-words">
&lt;a href="#toc">&lt;i class='fas fa-angle-up'>&lt;/i>  Final Words&lt;/a>&lt;/h2>
&lt;p>When I started to look at this cheating app, I did not expect to find such nice tricks and challenges.
The PGSharp&amp;rsquo;s authors know the sneaky tricks to hinder reverse engineering. Unfortunately,
O-LLVM is relatively weak in this context compared to the commercial obfuscator used by Niantic.&lt;/p>
&lt;p>On the other hand, the design of PokemonGO is such that all the reverse engineering difficulties
lie in one single module that can be treated in black-box once we identified the API. In particular, the
un-obfuscated Java layer helps a lot to identify these API.&lt;/p>
&lt;p>Regarding the signature bypass, at first, I thought it would be easy to prevent by checking the integrity
of the &lt;code>.apk&lt;/code> and/or the native libraries. But, there are some points that need to be taken into account:&lt;/p>
&lt;p>&lt;strong>APK Integrity Check&lt;/strong>&lt;/p>
&lt;p>Naively, we might want to compute a checksum of the APK or re-compute the signature (as it&amp;rsquo;s done by PGSharp).
But in fact, since a few years, Google tries to push
developers to use app bundle such as an application is no longer a single &lt;code>.apk&lt;/code> but a split &lt;code>.apk&lt;/code>.
While this feature optimizes the device&amp;rsquo;s data partition size, it complicates the verification
of the signature since it would require to deal with different files and different checksum.&lt;/p>
&lt;p>It&amp;rsquo;s not infeasible, but it complicates its implementation in the APK build &amp;amp; development pipeline.&lt;/p>
&lt;p>&lt;strong>Native Library Integrity Check&lt;/strong>&lt;/p>
&lt;p>I guess that &lt;code>libNianticLabsPlugin.so&lt;/code> implements checksum on its own library as it is
a sensitive part of the application. Regarding the other libraries, some of them are owned
by Niantic (like &lt;code>libholoholo.so&lt;/code>) and others come from third-parties (like &lt;code>libmain.so&lt;/code>). Depending on
how they are integrated, the checksum of these external libraries might not be easy to automatically
compute while releasing a new version of PokemonGO. These third-party libraries are,
most of the time, not copy-pasted by the developers but automatically bundled when compiling the
application. Therefore, computing their checksums might require tweaking the build process
in a non-easy way.&lt;/p>
&lt;p>On the top of that, Niantic releases a new version of its games on a monthly basis. It means
that these checks need to be automated in CI/CD pipeline which might not be trivial to do.&lt;/p>
&lt;hr width="50%" />
&lt;p>It was a funny and very interesting journey, for those who want to dig a bit more
in PGSharp, I pushed some materials and documents on Github. In particular, you can
find the symbol list of &lt;b class="red">libmain.so&lt;/b> based on reverse engineering.&lt;/p>
&lt;center>
&lt;i class='fas fa-github'>&lt;/i>&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href="https://github.com/romainthomas/pgsharp" target="_blank" rel="noopener">https://github.com/romainthomas/pgsharp&lt;/a>
&lt;/center>
&lt;h2 id="acknowledgments">
&lt;a href="#toc">&lt;i class='fas fa-angle-up'>&lt;/i>  Acknowledgments&lt;/a>&lt;/h2>
&lt;p>This analysis has been independently done in my spare time while being at
&lt;a href="https://www.quarkslab.com" target="_blank" rel="noopener">Quarkslab&lt;/a> and
&lt;a href="https://www.ul.com" target="_blank" rel="noopener" class="ul">Underwriters Laboratories&lt;/a>,
my current employer.&lt;/p>
&lt;h2 id="annexes">
&lt;a href="#toc">&lt;i class='fas fa-angle-up'>&lt;/i>  Annexes&lt;/a>&lt;/h2>
&lt;h3 id="third-party">Third-Party&lt;/h3>
&lt;p>Here is the (non exhaustive) list of the open-source projects used by PGSharp:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">
&lt;a href="https://github.com/jmpews/Dobby" target="_blank" rel="noopener">https://github.com/jmpews/Dobby&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">
&lt;a href="https://github.com/or-dvir/EasySettings" target="_blank" rel="noopener">https://github.com/or-dvir/EasySettings&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">
&lt;a href="https://github.com/zupet/LuaTinker" target="_blank" rel="noopener">https://github.com/zupet/LuaTinker&lt;/a> or
&lt;a href="https://github.com/yanwei1983/luatinkerE" target="_blank" rel="noopener">https://github.com/yanwei1983/luatinkerE&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">
&lt;a href="https://github.com/DimaKoz/stunning-signature" target="_blank" rel="noopener">https://github.com/DimaKoz/stunning-signature&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">
&lt;a href="https://www.sqlite.org/index.html" target="_blank" rel="noopener">https://www.sqlite.org/index.html&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">
&lt;a href="https://github.com/nlohmann/json" target="_blank" rel="noopener">https://github.com/nlohmann/json&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">
&lt;a href="https://www.lua.org/manual/5.3/" target="_blank" rel="noopener">https://www.lua.org/manual/5.3/&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">
&lt;a href="https://github.com/kikito/md5.lua" target="_blank" rel="noopener">https://github.com/kikito/md5.lua&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">
&lt;a href="https://github.com/rxi/json.lua" target="_blank" rel="noopener">https://github.com/rxi/json.lua&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="list-of-the-unity-functions-used-by-pgsharp">List of the Unity Functions used by PGSharp&lt;/h3>
&lt;div class="spoiler " >
&lt;p>
&lt;a class="btn btn-primary" data-toggle="collapse" href="#spoiler-15" role="button" aria-expanded="false" aria-controls="spoiler-15">
&lt;i class='fas fa-table'>&lt;/i>&amp;nbsp;&amp;nbsp;Expand
&lt;/a>
&lt;/p>
&lt;div class="collapse card " id="spoiler-15">
&lt;div class="card-body">
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">object__Invoke
String_CreateString1
String_CreateString3
ulong_object___get_Item
ulong_object___ContainsKey
ulong_object___TryGetValue
Application_OpenURL
Application_set_targetFrameRate
Quaternion_Angle
PlayerPrefs_TrySetInt
PlayerPrefs_TrySetFloat
PlayerPrefs_TrySetSetString
PlayerPrefs_SetInt
PlayerPrefs_GetInt
PlayerPrefs_SetFloat
PlayerPrefs_GetFloat
PlayerPrefs_SetString
PlayerPrefs_GetStringNoDefault
PlayerPrefs_HasKey
PlayerPrefs_DeleteKey
Component_get_gameObject
Transform_get_rotation
Animator_get_speed
Animator_set_speed
Animator_SetTriggerID
Animator_Update
Promise__ctor
Promise_Complete
MapMath_MetersBetween
NL_NLAny_object_
NL_NLFirst_object_
InputField_ActivateInputField
InputField_DeactivateInputField
Text_set_text
Text_set_fontSize
DiContainer_InjectExplicitInternal
Schedule_WaitOn_c__AnonStorey0____m__0
GameState_EnterState
GameState_ExitState
RpcBindings_Send
RpcManager_DispatchCallbacks
Animator_SetTriggerID
RpcManager_DispatchCallbacks
AuthService_get_CachedCredentialsExist
AuthService_Logout
DeviceServiceExtensions_IsUsable
GameMasterData_IsPokemonWeatherBoosted
Animator_SetTriggerID
AuthService_get_CachedCredentialsExist
AuthService_Logout
PgpApi_UpdateNotifications
ARPlusEncounterValuesProto__ctor
ARPlusEncounterValuesProto__cctor
PlayerService_GetPlayerDayBucket
PlayerService_get_PlayerStats
PlayerService_get_CurrentPokeball
PlayerService_get_CurrentLinkedLogins
AuthService_get_CachedCredentialsExist
PlayerService_get_PokemonBag
PlayerService_GetPlayerProfile
PlayerService_set_CurrentPokeball
PlayerService_get_BagIsFull
PlayerService_GetCandyCountForPokemon
StateToken_Complete
TimeUtil_ServerNowMs
RequestGymDetailsById_onSucceed
RequestGymDetailsById_onError
PlayerPrefs_SetInt
BluetoothUtil_get_IsBluetoothEnabled
PgpGuiController_ClickIcon
PgpGuiService_SetSfidaIconVisible
PgpGuiService_EnableSfidaIcon
ulong_object___get_Item
PgpService_get_IsSessionActive
PgpService_GetCurrentNotificationType
ItemBagImpl_GetItemCount
PokemonBagImpl_GetPokemon
ulong_object___get_Item
PgpApi_UpdateNotifications
Animator_set_speed
StateToken_Complete
VersionCheckService_CheckVersion
ulong_object___TryGetValue
QuestMapPokemon_get_Pokemon
QuestService_BeginQuestEncounterWithOut
EulaGuiController_PressAccept
StarterMapPokemon_get_Pokemon
OpenRemoteGym_gymOpner
OpenRemoteGym_onSucceed
BluetoothUtil_get_IsBluetoothEnabled
QuestService_BeginQuestEncounterWithOut
RaidState_ExitGymWithRaidDetails
AccountChoiceState_ClickNewPlayer
AccountChoiceState_ClickExistingPlayer
LoginAgeGateState_SubmitSelections
LoginChoiceState_ClickPtc
LoginChoiceState_ClickGoogle
LoginGuiController_ClickSubmit
PtcLoginState_SubmitLogin
I18n_PokemonMoveName
I18n_SetUpLanguageTable
I18n_PokemonNameTemporaryEvolution
I18n_Text
I18n_PokemonName
FriendsGuiState_StartOpenGiftFlow
FriendsGuiState_StartSendGiftFlow
FriendsRpcService_RemoveGiftbox
GiftingRpcService_SendGift
GiftingRpcService_OpenGift
StickerService_GetStickerInventory
CombatDirector_Initialize
MapPokestop_get_PoiId
MapPokestop_get_ActiveIncidentType
MapPokestop_get_Location
EncounterParkCameraController_PlayIntro
RunPokemonCaptured_onDitto
EncounterInteractionState_RunAway
MapMath_MetersBetween
PlayerPrefs_TrySetSetString
EncounterInteractionState_IntroCompleted
AttemptCapture_onResponse
EncounterIntroState_ExitState
EncounterPokemon_get_MapPokemon
PlayerPrefs_HasKey
ItemBagImpl_GetItemCount
Pokeball_TryHitPokemon
Pokeball_FlyStateImpl_Capture__MoveNext
Pokeball_DropStateImpl_Capture__MoveNext
EncounterGuiController_ShowPokemonFlee
EncounterState_get_EncounterType
EncounterState_EncounterStateComplete
EncounterState_EncounterStateComplete
EncounterState_get_MapPokemon
EncounterState_OnEncounterResponse
DefaultEncounter_get_DefaultBall
ExtraMapPokemon_get_Pokemon
ResearchEncounter_get_DefaultBall
ResearchEncounter_get_DefaultBall
object_object__object___CurrentPageIndex
PokemonInventoryCellView_Initialize
ToastService_OneLineMedium
ToastService_RewardItemNameAmount
ToastService_RewardItemDefault
ToastService_RewardItemStardust
ToastService_OneLineMediumWithParams
ToastService_RewardItemXlCandy
ToastService_RewardItemAmount
ToastService_TwoLine
ToastService_RewardItemAmountType
ToastService_RewardItemMegaResource
ToastService_RewardSticker
ToastService_OneLineWithParams
ToastService_OneLineBig
ToastService_OneLineBigWithParams
ToastService_RewardItemCandy
UserPromptsService_HasActiveModal
UserPromptsService_DismissActiveModal
PokemonInfoDynoScrollRect_Cleanup
Quaternion_Angle
Animator_get_speed
PokemonInfoPanel_DoUpdate
GymRootController_get_View
GymRootController_get_MapGym
MapGym_get_PoiId
MapGym_OnTap
MapGym_get_Location
RaidMapPokemon_get_Pokemon
MapContentHandler_UpdateCells
MapEntityCell_get_Pois
MapEntityService_get_Cells
MapEntityService_GetMapPoi
MapEntityService_UpdatePois
MapExploreState_GymSelected
MapExploreState_EnterQuestEncounter
MapPokemon_get_Location
MapPokemon_get_DespawnTime
MapPokemon_TryCapture
PhotobombingMapPokemon_get_Pokemon
MapPokestop_get_ActiveIncidentType
SendEncounterRequestCapture_onResponse
PoiMapPokemon_get_SpawnPointId
PoiMapPokemon_get_EncounterId
WildMapPokemon_get_Pokemon
WildMapPokemon_SendEncounterRequest
PoiDirectoryService_AddPokemon
PoiDirectoryService_RemovePokemon
RaidMapPokemon_get_Pokemon
IncidentMapPokemon_get_Pokemon
IncenseMapPokemon_SendEncounterRequest
IncenseMapPokemon_OnDestroy
IncenseMapPokemon_get_Pokemon
TroyDiskMapPokemon_SendEncounterRequest
TroyDiskMapPokemon_get_Pokemon
GroundTapHandler_OnTap
GroundTapHandler_OnTap1
MapViewHandler_GetGroundLocation
MapViewHandler_GetGroundPosition
MapViewHandler_GetWorldLocation
NL_NLFirst_object_
CompassGuiController_Update
PlayerService_SetPlayerProto
MapPokemon_LogEncounterMetrics
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>O-LLVM provides control-flow obfuscation that can be &lt;em>recovered&lt;/em> with emulation.
On the other hand, the data-flow (function parameters, stack values, memory accesses) can be analysed at a basic-block level with static analysis.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;b class="red">libmain.so&lt;/b> is also &lt;strong>statically&lt;/strong> linked against other libraries like
&lt;a href="https://github.com/jmpews/Dobby" target="_blank" rel="noopener">jmpews/Dobby&lt;/a>,
&lt;a href="https://github.com/nlohmann/json" target="_blank" rel="noopener">nlohmann/json&lt;/a>,
&lt;a href="https://github.com/sqlite/sqlite" target="_blank" rel="noopener">sqlite&lt;/a> &amp;hellip;&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>Modded apps use similar tricks as discussed in
&lt;a href="https://blog.quarkslab.com/android-application-diffing-analysis-of-modded-version.html#defeating-obfuscation" target="_blank" rel="noopener">Android Application Diffing: Analysis of Modded Version&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>In order to arbitrarily call the underlying function when needed.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>The package names are stripped with Proguard but we can quite easily recover those packages.&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6" role="doc-endnote">
&lt;p>Basically, they renamed
&lt;a href="https://github.com/jmpews/Dobby/blob/bba23cbee8e3cfff5622ef8b63fb797703baea5f/include/dobby.h#L157" target="_blank" rel="noopener">DobbyHook&lt;/a> in &lt;code>FbbUePBslRNHWkdS&lt;/code>&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7" role="doc-endnote">
&lt;p>The event is triggered when &lt;code>nativeMuteMasterAudio&lt;/code> or &lt;code>nativeRender&lt;/code> is registered and they
get the base address by iterating over &lt;code>/proc/&amp;lt;pid&amp;gt;/maps&lt;/code>.&amp;#160;&lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:8" role="doc-endnote">
&lt;p>O-LLVM seems not applied on this function&amp;#160;&lt;a href="#fnref:8" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:9" role="doc-endnote">
&lt;p>One can also hook the AES encrypt/decrypt functions whose the prototype is &lt;code>(uint8_*t key_schedule, uint8_t* inout_buffer, size_t size)&lt;/code>&amp;#160;&lt;a href="#fnref:9" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Gotta Catch 'Em All: Frida &amp; jailbreak detection</title><link>https://www.romainthomas.fr/post/21-07-pokemongo-anti-frida-jailbreak-bypass/</link><pubDate>Sun, 18 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/post/21-07-pokemongo-anti-frida-jailbreak-bypass/</guid><description>&lt;style>
.green {
color:green;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.blue {
color: blue;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.orange {
color: #FF6347;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.red {
color: #df2b04;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.hl-comment {
color: #df2b04;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.hl-keyword {
color: #A90D91;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.hl-literal {
color: #1C01CE;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.hl-preproc {
color: #633820;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.hl-strings {
color: #C41A16;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.yellow {
color: #CC7000;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
&lt;/style>
&lt;div class="alert alert-note">
&lt;div>
Do not expect a &lt;em>click &amp;amp; play&lt;/em> solution for PokemonGO in this blog post. This blog post is more about
the technical aspects of jailbreak detection than a bypass for this game.
&lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>While working on LIEF during my vacations to support in-memory parsing for Mach-O files, I found that
PokemonGO was an interesting use case to introduce this feature. It led me to look at the jailbreak
and Frida detection implemented in this game.
Being more familiar with Android than iOS, the analysis workflow on this platform is quite different, which
is also a good opportunity to improve tooling.&lt;/p>
&lt;p>The first challenge stems from jailbreaking the device. Fortunately, checkra1n eases this step.
The second difficulty lies in extracting the encrypted iOS app from the device. In contrast to Android,
iOS apps are encrypted on the disk and decrypted by the kernel when loaded. It means that one way to get
the unencrypted code is to dump the file from memory. One could also leverage the function &lt;code>mremap_encrypted()&lt;/code>
as described in
&lt;a href="https://www.linkedin.com/pulse/decrypting-apps-ios-john-coates/" target="_blank" rel="noopener">Decrypting Apps on iOS&lt;/a>.&lt;/p>
&lt;h2 id="pokemongo-overview">PokemonGO Overview&lt;/h2>
&lt;p>When running PokemonGO on a jailbroken device&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, the application immediately crashes with the following backtrace:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">0 ??? 0x000000020ac46ab8 0 + 8770579128
1 libdyld.dylib 0x0000000184df8304 invocation function for block in dyld3::AllImages::runAllInitializersInImage(dyld3::closure::Image const*, dyld3::MachOLoaded const*) + 136
2 libdyld.dylib 0x0000000184dea5b0 dyld3::closure::Image::forEachInitializer(void const*, void (void const*) block_pointer) const + 96
3 libdyld.dylib 0x0000000184df8160 invocation function for block in dyld3::AllImages::runInitialzersBottomUp(dyld3::closure::Image const*) + 296
4 libdyld.dylib 0x0000000184deae6c dyld3::closure::Image::forEachImageToInitBefore(void (unsigned int, bool&amp;amp;) block_pointer) const + 92
5 libdyld.dylib 0x0000000184df8b48 dyld3::AllImages::loadImage(Diagnostics&amp;amp;, char const*, unsigned int, dyld3::closure::DlopenClosure const*, bool, bool, bool, bool, void const*) + 776
6 libdyld.dylib 0x0000000184df8698 dyld3::AllImages::dlopen(Diagnostics&amp;amp;, char const*, bool, bool, bool, bool, bool, void const*, bool) + 872
7 libdyld.dylib 0x0000000184dfa2b4 dyld3::dlopen_internal(char const*, int, void*) + 368
8 libdyld.dylib 0x0000000184ded5b0 dlopen_internal(char const*, int, void*) + 108
9 CoreFoundation 0x00000001850ed038 _CFBundleDlfcnLoadFramework + 136
10 CoreFoundation 0x00000001850be974 _CFBundleLoadExecutableAndReturnError + 376
11 Foundation 0x0000000186359ba8 -[NSBundle loadAndReturnError:] + 332
12 pokemongo 0x00000001041a7c5c 0x1041a0000 + 31836
13 pokemongo 0x00000001041a7d50 0x1041a0000 + 32080
14 libdyld.dylib 0x0000000184de9588 start + 4
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="alert alert-note">
&lt;div>
The full crash log is available &lt;a href="backtrace.log">here&lt;/a>.
&lt;/div>
&lt;/div>
&lt;p>In this backtrace, the main &lt;code>pokemongo&lt;/code> binary is a kind of &lt;em>stub&lt;/em> that loads the Unity binary: &lt;code>UnityFramework&lt;/code> which
contains the main logic of the game.&lt;/p>
&lt;p>This library is loaded by the &lt;code>dlopen_internal&lt;/code> function at index &lt;strong>8&lt;/strong> in the backtrace as a
result of &lt;code>-[NSBundle loadAndReturnError:]&lt;/code>.
Since &lt;code>UnityFramework&lt;/code> depends on other libraries, they are (pre)loaded with &lt;code>Image::forEachImageToInitBefore&lt;/code>
which processes the following files:&lt;/p>
&lt;ol>
&lt;li>&lt;span class="yellow">@/usr/lib/libc++.1.dylib&lt;/span>&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;li>&lt;span class="blue">@rpath/NianticLabsPlugin.framework/NianticLabsPlugin&lt;/span>&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;li>&lt;span class="yellow">@rpath/libswiftos.dylib&lt;/span>&lt;/li>
&lt;/ol>
&lt;p>Among those dependencies, we can notice the &lt;span class="blue">NianticLabsPlugin&lt;/span> library which is a cross-platform
Unity plugin &amp;ndash; also present in the Android version &amp;ndash; that contains the main protections of the game.
These protections are used to prevent cheat, bots, GPS spoofing, in PokemonGO. The whole
being obfuscated by Digital.ai (formerly known as Arxan). &lt;span class="blue">NianticLabsPlugin&lt;/span> communicates with the &lt;code>UnityFramework&lt;/code> through
an exported function &lt;code>GetN2Api&lt;/code> that returns an array of functions (pointers).&lt;/p>
&lt;p>The following figure outlines these different components:&lt;/p>
&lt;p>&lt;img src="overview.png" alt="PokemonGO overview">&lt;/p>
&lt;p>Getting back to the backtrace, if we assume that the application crashes when loading &lt;span class="blue">NianticLabsPlugin&lt;/span>,
it precisely crashes when calling the Mach-O constructors in &lt;code>AllImages::runAllInitializersInImage&lt;/code>.
Since the application is heavily obfuscated, a static analysis reaches quickly its limits, which forces us
to emulate or dynamically analyze the functions of interest.&lt;/p>
&lt;div class="alert alert-note">
&lt;div>
&lt;p>The addresses of the functions/instructions mentioned in this blog post are based on the following version of NianticLabsPlugin:&lt;/p>
&lt;p>&lt;i class="fas fa-shield-alt">&lt;/i> &lt;a href="NianticLabsPlugin.bin">NianticLabsPlugin - 2140426ccdfdfb2529f454697cb5cc83&lt;/a>&lt;/p>
&lt;p>&lt;i class="fas fa-code-branch">&lt;/i> PokemonGO v0.211.2 - June 2021&lt;/p>
&lt;/div>
&lt;/div>
&lt;h2 id="analyzing-mach-o-constructors-with-frida">Analyzing Mach-O constructors with Frida&lt;/h2>
&lt;p>From the previous section, we surmised that the application crashed because of the &lt;span class="blue">NianticLabsPlugin&lt;/span>&amp;rsquo;s constructors.
Since these functions are called before &lt;strong>any other functions&lt;/strong> of the library, it raises the question of finding
a way to perform actions (or hook) before they are executed.&lt;/p>
&lt;p>On Android, when we need to analyse a library&amp;rsquo;s constructors, we can hook the &lt;code>call_array&lt;/code> function from
&lt;a href="https://github.com/aosp-mirror/platform_bionic/blob/c44b1d0676ded732df4b3b21c5f798eacae93228/linker/linker_soinfo.cpp#L488" target="_blank" rel="noopener">Bionic&amp;rsquo;s linker (ELF loader)&lt;/a>:&lt;/p>
&lt;script src="https://gist.github.com/romainthomas/c10298387a921df730c1556c2ee9cecb.js">&lt;/script>
&lt;p>If we try to apply the same approach on iOS, the mirror of the ELF loader on iOS is &lt;code>dyld&lt;/code> which contains
most of the logic to load Mach-O files.
It turns out that at some points, the Mach-O&amp;rsquo;s constructors are processed in the &lt;code>doModInitFunctions&lt;/code> function
(from
&lt;a href="https://github.com/apple-opensource/dyld/blob/1128192c016372ae94793d88530bc5978c1fce93/src/ImageLoaderMachO.cpp#L2290" target="_blank" rel="noopener">ImageLoaderMachO.cpp&lt;/a>).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="kt">void&lt;/span> &lt;span class="n">ImageLoaderMachO&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">doModInitFunctions&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">LinkContext&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">macho_section&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">sect&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">sectionsStart&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">sect&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">sectionsEnd&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">sect&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="kt">uint8_t&lt;/span> &lt;span class="n">type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sect&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">flags&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">SECTION_TYPE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="n">type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">S_MOD_INIT_FUNC_POINTERS&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">Initializer&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">inits&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Initializer&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">sect&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">addr&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">fSlide&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">containsAddress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stripPointer&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">dyld&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">throwf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;initializer function %p not in mapped image for %s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">func&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getPath&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="n">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">envp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">apple&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">programVars&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>From this code, we can notice that &lt;strong>all&lt;/strong> constructor addresses are checked &lt;strong>beforehand&lt;/strong> by the
&lt;code>containsAddress&lt;/code> function. Therefore, it makes this function a good hooking spot as it is executed before
calling the constructor itself. One can use the native SDK of
&lt;a href="https://github.com/frida/frida-gum" target="_blank" rel="noopener">frida-gum&lt;/a>
to perform this action:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="c1">// Address of ImageLoader::containsAddress in /usr/lib/dyld
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">uintptr_t&lt;/span> &lt;span class="n">containsAddress_ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">...;&lt;/span>
&lt;span class="c1">// Setup hooks with gum_interceptor_attach
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">GumAttachReturn&lt;/span> &lt;span class="n">attach_ret&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gum_interceptor_attach&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">listener_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">interceptor&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="cm">/* target */&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">containsAddress_ptr&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">GumInvocationListener&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">listener_&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="cm">/* ID */&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">containsAddress_ptr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="p">....&lt;/span>
&lt;span class="c1">// Equivalent of onEnter in Javascript
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="n">native_listener_on_enter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GumInvocationListener&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">listener&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GumInvocationContext&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">ic&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="n">uintptr_t&lt;/span> &lt;span class="n">ctor_function_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ic&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">cpu_context&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="c1">// Do stuff with ctor_function_addr
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="alert alert-note">
&lt;div>
&lt;code>containsAddress&lt;/code> is a member function, therefore &lt;code>x0&lt;/code> contains a pointer on &lt;code>this&lt;/code> and the address
to check is located in &lt;code>x1&lt;/code>.
&lt;/div>
&lt;/div>
&lt;p>By hooking &lt;code>containsAddress()&lt;/code>, we get the &lt;strong>control before&lt;/strong> the execution of the constructors.
It gives us the ability to perform the following actions that can help to identify the constructor involved in the crash:&lt;/p>
&lt;ol>
&lt;li>Trace the constructors (see:
&lt;a href="constructors_trace.log">constructors_trace.log&lt;/a>)&lt;/li>
&lt;li>Replace/disable a constructor (&lt;code>gum_interceptor_replace&lt;/code>)&lt;/li>
&lt;li>Detect the &lt;strong>first&lt;/strong> constructor and hook the next ones (&lt;code>gum_interceptor_attach&lt;/code>)&lt;/li>
&lt;/ol>
&lt;p>&lt;span class="blue">NianticLabsPlugin&lt;/span> embeds no less than 120 constructors
among those, 6&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> are involved in detecting Frida, jailbroken devices, anti-debug, etc:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Index&lt;/th>
&lt;th>Offset&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>15&lt;/td>
&lt;td>0x4369e0&lt;/td>
&lt;td>Anti-debug &amp;amp; anti-emulation&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>16&lt;/td>
&lt;td>0x00e0d8&lt;/td>
&lt;td>Frida detection&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>17&lt;/td>
&lt;td>0x26bd5c&lt;/td>
&lt;td>Anti-bypass?&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>18&lt;/td>
&lt;td>0x449b84&lt;/td>
&lt;td>Anti-jailbreak, anti-Frida&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>19&lt;/td>
&lt;td>0x731b90&lt;/td>
&lt;td>Anti-jailbreak, anti-debug, anti-frida&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>20&lt;/td>
&lt;td>0x359194&lt;/td>
&lt;td>Anti-jailbreak&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Once we reduced the set of functions involved in the crash, we can combine dynamic analysis with Frida
and emulation with Unicorn.&lt;/p>
&lt;h2 id="anti-debug">Anti-debug&lt;/h2>
&lt;p>One of the redundant checks we can find in many functions (not only the constructors) are the
anti-debugs. They always come in two parts:&lt;/p>
&lt;ol>
&lt;li>Try to &lt;em>&amp;ldquo;kill&amp;rdquo;&lt;/em> its own pid with the 0-signal&lt;/li>
&lt;li>Check if PTRACE is flagged&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="kt">void&lt;/span> &lt;span class="nf">try_kill&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getpid&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// syscall@0x436cdc
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">ret&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">kill&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// syscall@0x436d28
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>According to the man page of kill (&lt;code>man 2 kill&lt;/code>), the signal &lt;code>0&lt;/code> is used to check
that the &lt;code>pid&lt;/code> given in the first parameter really exists.&lt;/p>
&lt;blockquote>
&lt;p>[&amp;hellip;] A value of 0, however, will cause error checking to be performed (with no signal being sent). This can be used
to check the validity of pid.&lt;/p>
&lt;/blockquote>
&lt;p>This &lt;em>kill&lt;/em> operation is followed by three &lt;code>PTRACE&lt;/code> checks:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="c1">// Done three times
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">inline&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="nf">ptrace_detect&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int32_t&lt;/span> &lt;span class="n">opt&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">CTL_KERN&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">KERN_PROC&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">KERN_PROC_PID&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">getpid&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="n">kinfo_proc&lt;/span> &lt;span class="n">info&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">sysctl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">opt&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">kinfo_proc&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">info&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">kp_proc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">p_flag&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">P_TRACED&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>These three &lt;code>P_TRACED&lt;/code> checks &lt;strong>always&lt;/strong> come together:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">0x436cdc: getpid(): 6015
0x436d28: kill(6015, 0): 0
0x4374b0: sysctl(CTL_KERN, KERN_PROC, KERN_PROC_PID, 6015)
0x4371e8: sysctl(CTL_KERN, KERN_PROC, KERN_PROC_PID, 6015)
0x437398: sysctl(CTL_KERN, KERN_PROC, KERN_PROC_PID, 6015)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="frida-detection">Frida Detection&lt;/h2>
&lt;p>Frida is detected by the application through its client-server mode, which binds the localhost on the port &lt;code>27042&lt;/code>.
When PokemonGO is starting, it tries to open a socket on this port and if it manages to connect, it tests the Frida handshake.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">0x00e3b8: getifaddrs(0x16b7fb518): 0x0
0x016990: socket(&amp;#39;IPV4&amp;#39;, &amp;#39;TCP&amp;#39;, &amp;#39;0&amp;#39;): 0x8
0x019d60: bind(&amp;#39;PF_INET&amp;#39;, 0x8, &amp;#39;127.0.0.1:27042&amp;#39;)
0x01805c: close(0x8)
0x016990: socket(&amp;#39;IPV4&amp;#39;, &amp;#39;TCP&amp;#39;, &amp;#39;0&amp;#39;): 0x8
0x019d60: bind(&amp;#39;PF_INET&amp;#39;, 0x8, &amp;#39;192.168.0.26:27042&amp;#39;)
0x01805c: close(0x8)
0x00e3ec: freeifaddrs(0x10601ac00): 0x105360a00
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The application also iterates over the list of the libraries loaded in memory with the
&lt;code>_dyld_image_count&lt;/code>/&lt;code>_dyld_get_image_name&lt;/code> functions. Nevertheless, it seems that they are not used to detect
Frida libraries artifacts (like &lt;code>FridaGadget.dylib&lt;/code>).&lt;/p>
&lt;h2 id="jailbreak-detection">Jailbreak Detection&lt;/h2>
&lt;p>The application implements jailbreak detection by checking if some files are accessible or not on the device.
Most of the checks are done by using the &lt;code>access()&lt;/code> syscalls that are inlined in different places:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">0x44c390: access(&amp;#39;/bin/grep&amp;#39;, 0x0)
...
0x7326b0: access(&amp;#39;/private/var/checkra1n.dmg&amp;#39;, 0x0)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The list of the checked files is given in the
&lt;a href="#annexes">annexes of the blog post&lt;/a>.&lt;/p>
&lt;div class="alert alert-success">
&lt;div>
This list is very close to &lt;a href="https://github.com/XsF1re/vnodebypass/blob/870b21fd3566736cca285355b4faf7f289baa4d5/layout/usr/share/vnodebypass/hidePathList.plist">vnodebypass/hidePathList.plist&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>In addition to &lt;em>raw&lt;/em> &lt;code>access&lt;/code> syscall, the application enhances its detection by creating a symbolic link of the
root directory in a temporary app data directory:&lt;/p>
&lt;pre tabindex="0">&lt;code>0x734e08: symlink('/Applications/..', '/private/var/mobile/Containers/Data/Application/D933FBC9-90E7-4584-851E-CE2D5E900446/tmp/WCH38bnM0x101a9e7d0')
&lt;/code>&lt;/pre>&lt;p>Then, it performs the same checks with the app data directory as prefix: &lt;code>[...]/tmp/WCH38bnM0x101a9e7d0&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>0x7376d8: access('/private/var/mobile/Containers/Data/Application/D933FBC9-90E7-4584-851E-CE2D5E900446/tmp/3Odis0x101a9dfd0/usr/bin/passwd', 0x0)
&lt;/code>&lt;/pre>&lt;h2 id="signature-check">Signature Check&lt;/h2>
&lt;p>At some point, one function checks the integrity of the signature of the &lt;code>pokemongo&lt;/code> binary.
This check starts by opening the main &lt;code>pokemongo&lt;/code> binary from &lt;strong>the disk&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">0x7392ec: add x0, x19, #6,lsl#12
0x7392f0: add x0, x0, #0x540
0x7392f4: mov w1, #0x1000000
0x7392f8: mov x2, #0
0x7392fc: svc 0x80 ; x16 -&amp;gt; SYS_open = 5
// open(&amp;#39;/private/var/containers/Bundle/Application/[...]/pokemongo.app/pokemongo&amp;#39;): fd_pgo
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, it reads the beginning of the file in a stack buffer:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">0x74b494: ldr x0, [x19, #0xc0] ; fd
0x74b498: ldr x1, [x19, #0x130] ; buff
0x74b49c: ldr x2, [x19, #0xb8] ; buff_size
0x74b4a0: svc 0x80 ; x16 -&amp;gt; SYS_read = 3
// uint8_t macho_head[0x4167];
// 0x74b4a0: read(fd_pgo, macho_header, 0x4167);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>to iterate over the Mach-O load commands:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">; x8 points to the read&amp;#39;s buffer
0x73942c: ldr w8, [x8, #0x10] ; Number of LC_COMMANDS
for (size_t i = 0; i &amp;lt; nb_cmds; ++i) {
0x74bc40: ldr w10, [x9, #4] ; Command&amp;#39;s size
0x74ade4: ldr w9, [x9] ; command&amp;#39;s type
if (cmd.type == LC_CODE_SIGNATURE) {
0x74b1b8: ldr w10, [x10, #8] ; read signature offset -&amp;gt; 0xc3d0
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With the offset of the Mach-O &lt;code>LC_CODE_SIGNATURE&lt;/code> command, it reads the raw signature using the
&lt;code>lseek/read&lt;/code> syscalls:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">uint8_t sig_header[0x205];
0x73a978: lseek(fd_pgo, LC_CODE_SIGNATURE offset, 0x0)
0x73aecc: read(fd_pgo, &amp;amp;sig_header, 0x205);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The raw signature buffer is processed by chunks of 10 bytes in
a function that looks like a checksum:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">[...]
0x73ad58: ldrsb w13, [x12]
0x73ad5c: mov w14, #83
0x73ad60: sub w13, w14, w13
0x73ad64: ldrsb w14, [x12, #1]
0x73ad68: mov w15, #87
0x73ad6c: sub w14, w15, w14
0x73ad70: ldrsb w16, [x12, #2]
0x73ad74: mov w17, #53
0x73ad78: sub w16, w17, w16
0x73ad7c: ldrsb w17, [x12, #3]
0x73ad80: mov w0, #52
0x73ad84: sub w17, w0, w17
0x73ad88: ldrsb w0, [x12, #4]
0x73ad8c: sub w0, w15, w0
0x73ad90: ldrsb w1, [x12, #5]
0x73ad94: mov w2, #51
0x73ad98: sub w1, w2, w1
0x73ad9c: ldrsb w2, [x12, #6]
0x73ada0: mov w3, #54
0x73ada4: sub w2, w3, w2
0x73ada8: ldrsb w3, [x12, #7]
0x73adac: sub w15, w15, w3
0x73adb0: ldrsb w3, [x12, #8]
0x73adb4: mov w4, #78
0x73adb8: sub w3, w4, w3
0x73adbc: ldrsb w12, [x12, #9]
0x73adc0: mov w4, #70
0x73adc4: sub w4, w4, w12
[...]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I did not manage to identify the underlying checksum algorithm, but it involves square multiplications and
the key(?): &lt;code>SW5436NF&lt;/code>&lt;/p>
&lt;h2 id="control-fault-injection">Control-Fault Injection&lt;/h2>
&lt;p>Once we determined the functions involved in the detections, we might want to disable them in order to
run the game smoothly.
Actually, PokemonGO is protected against such bypass with global variables that assert if a function
ran successfully or not.&lt;/p>
&lt;p>This protection is equivalent to the following piece of code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">static&lt;/span> &lt;span class="k">constexpr&lt;/span> &lt;span class="n">uintptr_t&lt;/span> &lt;span class="n">GOOD&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x00627178&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// bqx ?
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">static&lt;/span> &lt;span class="n">uintptr_t&lt;/span> &lt;span class="n">MAGIC_CFI&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0xdeadc0de&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">__attribute__&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">constructor&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">frida_detect&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">is_frida_running&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">crash&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">MAGIC_CFI&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GOOD&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">__attribute__&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">constructor&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">control_fault_check&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">MAGIC_CFI&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">GOOD&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">crash&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If we only disable &lt;code>frida_detect()&lt;/code>, the application will crash because of &lt;code>control_fault_check()&lt;/code>.&lt;/p>
&lt;p>We could bypass this protection by identifying the address of the
&lt;code>MAGIC_CFI&lt;/code> in the &lt;code>__data&lt;/code> section, or by disabling the &lt;code>control_fault_check()&lt;/code>.&lt;/p>
&lt;h2 id="what-about-lief">What about LIEF?&lt;/h2>
&lt;p>As mentioned in the introduction, it started with an ongoing feature to parse Mach-O files from memory.
Basically, LIEF will&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> enable to parse Mach-O files&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> from an absolute address with this kind of API:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="c1">// 0x10234400 -&amp;gt; start of the Mach-O file
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">bin&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LIEF&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">MachO&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Parser&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">parse_from_memory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x10234400&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Depending on the user&amp;rsquo;s needs, the &lt;code>write()&lt;/code> operation will optionally undo all the relocations and the symbol bindings.
This could be useful if we aim at (re)running the file dumped (on a Apple M1?).&lt;/p>
&lt;p>As expected, the strings used within the &lt;span class="blue">NianticLabsPlugin&lt;/span> library are encoded
by the obfuscator. We could statically analyze the decoding routine (cf. Tim Blazytko&amp;rsquo;s
&lt;a href="https://synthesis.to/2021/06/30/automating_string_decryption.html" target="_blank" rel="noopener">blog post&lt;/a>)
,but another technique consists in using a property of the obfuscator&amp;rsquo;s string encoding mechanism.&lt;/p>
&lt;p>It seems that the obfuscator put &lt;strong>all&lt;/strong> the strings&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup> in the data section and decrypts &lt;strong>all of them&lt;/strong>
in a &lt;strong>single&lt;/strong> constructor function.&lt;/p>
&lt;p>For instance, if we have the string &amp;ldquo;TOKEN&amp;rdquo; to protect in the following functions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="kt">void&lt;/span> &lt;span class="nf">protect_me&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">sensitive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;TOKEN&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">protect_me_2&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">sensitive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;TOKEN2&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The obfuscator transforms and decodes the strings into something like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="c1">// __data section
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">static&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">var_TOKEN&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\x00\x1D\xDD\xEE\xAB&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">static&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">var_TOKEN_2&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\x00\x1D\xDD\xEE\xAF&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">__attribute__&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">constructor&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">decode_strings&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">decode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_TOKEN&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">decode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_TOKEN_2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">protect_me&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">sensitive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_TOKEN&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">protect_me_2&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">sensitive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var_TOKEN_2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since &lt;strong>all&lt;/strong> the strings are decoded at once in one of the first constructors, if we manage to dump the binary
right after this constructor,
we can recover the original strings for free.&lt;/p>
&lt;p>Programmatically, it can be done using (again) frida-gum SDK with the following pseudocode:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="c1">// Hook associated with ImageLoader::containsAddress
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">native_listener_on_enter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GumInvocationListener&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">listener&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">GumInvocationContext&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">ic&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">static&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">CTOR_ID&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="n">uintptr_t&lt;/span> &lt;span class="n">ctor_function_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ic&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">cpu_context&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">libname&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">module_from_addr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctor_function_addr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">libname&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s">&amp;#34;NianticLabsPlugin&amp;#34;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">CTOR_ID&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="n">uintptr_t&lt;/span> &lt;span class="n">base_address&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">base_addr_from_ptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctor_function_addr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">bin&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LIEF&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">MachO&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Parser&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">parse_from_memory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">base_address&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">bin&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/tmp/pokemongo_after_ctor.bin&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// /tmp on the iPhone
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the end, the dumped file contains the decoded strings:&lt;/p>
&lt;p>&lt;img src="strings.png" alt="Data area after LIEF dump">&lt;/p>
&lt;p>If we skim the &lt;code>__data&lt;/code> section, we can also observe the following changes:&lt;/p>
&lt;p>&lt;img src="data_dump.png" alt="Data area after LIEF dump">&lt;/p>
&lt;p>A practiced eye might notice&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup> that some strings of the section are actually
embedded in protobuf structures. We can confirm this observation by trying to infer the data as protobuf
types:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">.&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">proto_dump&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">lief&lt;/span>
&lt;span class="n">pgo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;pokemongo_after_ctor.bin&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x12A51A7&lt;/span>
&lt;span class="n">end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x12A51E2&lt;/span>
&lt;span class="n">raw_proto&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pgo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_content_from_virtual_address&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">end&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">proto_dump&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">raw_proto&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">{
#3 = 4
#4 (repeated) = 1 {
#1 = &amp;#34;CheatReputation&amp;#34;
#2 (repeated) = {
#1 = &amp;#34;UNSET&amp;#34;
#2 = 0
} {
#1 = &amp;#34;BOT&amp;#34;
#2 = 1
} {
#1 = &amp;#34;SPOOFER&amp;#34;
#2 = 2
}
}
#5 = 8
#8 = []
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="final-words">Final Words&lt;/h2>
&lt;p>The application embeds other checks in the constructors and in the functions returned by &lt;code>GetN2Api&lt;/code>. It can
make a good exercise for those that are interested in.&lt;/p>
&lt;p>Generally speaking, the application and the protections are well designed since they slow down reverse engineers.
Nevertheless, &lt;code>anti-{jb, frida, debug}&lt;/code> are quite difficult to protect as they need to interact with the OS
through functions or syscalls with unprotected parameters. As a result, and once identified, we can bypass them.&lt;/p>
&lt;p>One technique consists in injecting a library with Frida&amp;rsquo;s injector that aims at hooking
the &lt;code>containsAddress()&lt;/code> to disable/patch the functions involved in the detections:&lt;/p>
&lt;p>&lt;img src="jbfree.png" alt="PokemonGo Jailbreak bypass">&lt;/p>
&lt;video controls >
&lt;source src="pokemongo_jb_bypass.mp4" type="video/mp4">
&lt;/video>
&lt;p>Nevertheless, this technique is &lt;strong>not persistent&lt;/strong> and version-dependant.&lt;/p>
&lt;p>After writing this post, it turned out that its structure is very close to
&lt;a href="https://hot3eed.github.io/2020/08/02/starling_p2_detections_mitigations.html" target="_blank" rel="noopener">Reverse Engineering Starling Bank&lt;/a>.
In particular, we can find the same anti-debug and the same Frida detection routine. These similarities suggest
that these two application uses the same obfuscator that also provides &lt;code>anti-{jb, frida, debug}&lt;/code> as built-in.&lt;/p>
&lt;p>You might also be interested in the recent talk of
&lt;a href="https://twitter.com/elvanderb" target="_blank" rel="noopener">Eloi Benoist-Vanderbeken&lt;/a>
&lt;a href="https://2021.pass-the-salt.org/" target="_blank" rel="noopener">@Pass the Salt&lt;/a>
&lt;a href="https://archives.pass-the-salt.org/Pass%20the%20SALT/2021/videos/PTS2021-Talk-01-JailBreak_detection.mp4">
&lt;i class="fas fa-laptop-code pr-1 fa-fw">&lt;/i>&lt;/a>
&lt;a href="https://archives.pass-the-salt.org/Pass%20the%20SALT/2021/slides/PTS2021-Talk-01-JailBreak_detection.pdf">
&lt;i class="fas fa-file-pdf pr-1 fa-fw">&lt;/i>&lt;/a>
who detailed another approach to identify and bypass
jailbreak detections.&lt;/p>
&lt;div class="alert alert-">
&lt;div>
&lt;a href="https://lief.quarkslab.com/">LIEF&lt;/a> is a tool developed at &lt;a href="https://www.quarkslab.com/">Quarkslab&lt;/a> along with
&lt;a href="https://qbdi.quarkslab.com">QBDI&lt;/a> &amp;amp; &lt;a href="https://triton.quarkslab.com">Triton&lt;/a>.
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h3 id="annexes">Annexes&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Files that trigger the JB detection&lt;/th>
&lt;th>Files that should be present&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>/.bootstrapped_electra&lt;/code>&lt;/td>
&lt;td>&lt;code>/cores&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/Applications/Anemone.app&lt;/code>&lt;/td>
&lt;td>&lt;code>/dev/null&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/Applications/Cydia.app&lt;/code>&lt;/td>
&lt;td>&lt;code>/etc/hosts&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/Applications/SafeMode.app&lt;/code>&lt;/td>
&lt;td>&lt;code>/etc/passwd&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/Library/Frameworks/CydiaSubstrate.framework&lt;/code>&lt;/td>
&lt;td>&lt;code>/sbin&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/Library/MobileSubstrate/DynamicLibraries/FlyJB.dylb&lt;/code>&lt;/td>
&lt;td>&lt;code>/sbin/launchd&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/Library/MobileSubstrate/MobileSubstrate.dylib&lt;/code>&lt;/td>
&lt;td>&lt;code>/sbin/mount&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/Library/PreferenceBundles/LaunchInSafeMode.bundle&lt;/code>&lt;/td>
&lt;td>&lt;code>/usr&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/Library/PreferenceLoader/Preferences/LaunchInSafeMode.plist&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/Library/Themes&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/Library/dpkg/info/com.inoahdev.launchinsafemode.list&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/Library/dpkg/info/com.inoahdev.launchinsafemode.md5sums&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/bin/bash&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/bin/bunzip2&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/bin/bzip2&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/bin/cat&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/bin/chgrp&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/bin/chmod&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/bin/chown&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/bin/cp&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/bin/grep&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/bin/gzip&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/bin/kill&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/bin/ln&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/bin/ls&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/bin/mkdir&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/bin/mv&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/bin/sed&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/bin/sh&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/bin/su&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/bin/tar&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/binpack&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/bootstrap&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/chimera&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/electra&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/etc/apt&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/etc/profile&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/jb&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/private/var/binpack&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/private/var/checkra1n.dmg&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/private/var/lib/apt&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/usr/bin/diff&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/usr/bin/hostinfo&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/usr/bin/killall&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/usr/bin/passwd&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/usr/bin/recache&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/usr/bin/tar&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/usr/bin/which&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/usr/bin/xargs&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/usr/lib/SBInject&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/usr/lib/SBInject.dylib&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/usr/lib/TweakInject&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/usr/lib/TweakInject.dylib&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/usr/lib/TweakInjectMapsCheck.dylib&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/usr/lib/libjailbreak.dylib&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/usr/lib/libsubstitute.0.dylib&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/usr/lib/libsubstitute.dylib&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/usr/lib/libsubstrate.dylib&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/usr/libexec/sftp-server&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/usr/sbin/sshd&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/usr/share/terminfo&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/var/mobile/Library/.sbinjectSafeMode&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/var/mobile/Library/Preferences/jp.akusio.kernbypass.plist&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>iPhone 6 running on iOS 14.2 with checkra1n.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>We can identify them by trial and error.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>ETA: likely by the end of the year&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>The Mach-O format is very suitable for this feature as
the header in mapped in memory. Therefore, it eases the parsing.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>More generally, it can encode local data (strings, bytes arrays, &amp;hellip;)&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6" role="doc-endnote">
&lt;p>Protobuf strings can be identified as they usually start with &lt;code>0xA&lt;/code>, &lt;code>0xB&lt;/code>, followed by their lengths
and the string itself (see:
&lt;a href="https://developers.google.com/protocol-buffers/docs/encoding#strings" target="_blank" rel="noopener">protocol-buffers/docs/encoding&lt;/a>)&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>r2-pay: whitebox (part 2)</title><link>https://www.romainthomas.fr/post/20-09-r2con-obfuscated-whitebox-part2/</link><pubDate>Sun, 27 Sep 2020 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/post/20-09-r2con-obfuscated-whitebox-part2/</guid><description>&lt;style>
.green {
color:green;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.blue {
color: blue;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.orange {
color: #FF6347;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.red {
color: #df2b04;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.hl-comment {
color: #df2b04;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.hl-keyword {
color: #A90D91;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.hl-literal {
color: #1C01CE;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.hl-preproc {
color: #633820;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.hl-strings {
color: #C41A16;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.yellow {
color: #CC7000;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
#
&lt;/style>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In the
&lt;a href="https://www.romainthomas.fr/post/20-09-r2con-obfuscated-whitebox-part1/">first part&lt;/a> of this write-up, we described the
anti-frida, anti-debug and anti-root techniques used in the application and how to remove most of them.&lt;/p>
&lt;p>This second part digs into the JNI function &lt;code>gXftm3iswpkVgBNDUp&lt;/code> and the underlying whitebox implementation.&lt;/p>
&lt;h2 id="library-shimming">Library Shimming&lt;/h2>
&lt;p>The inputs of the function &lt;code>gXftm3iswpkVgBNDUp&lt;/code> are provided by the GUI widgets and the function
is triggered when we press the &lt;em>Generate R2Coin&lt;/em> button.
Nevertheless, the behavior of &lt;code>gXftm3iswpkVgBNDUp&lt;/code> does not rely on UI features nor
the application&amp;rsquo;s context&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>To take a closer look at the logic of &lt;code>gXftm3iswpkVgBNDUp&lt;/code>, it would be pretty useful to be able to feed
the function&amp;rsquo;s inputs with our &lt;strong>own standalone binary&lt;/strong>. Basically, we would like to achieve this kind
of interface:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">**&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">dlopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;libnative-lib.so&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RTLD_NOW&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="n">jbyteArray&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gXftm3iswpkVgBNDUp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This technique is not new and has been already described in a blog post by
&lt;a href="https://twitter.com/caleb_fenton" target="_blank" rel="noopener">Caleb Fenton&lt;/a>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>. The idea is to get
the &lt;code>JNIEnv* env&lt;/code> variable with &lt;code>JNI_CreateJavaVM&lt;/code> which is exported by the Android runtime: &lt;code>libart.so&lt;/code>.&lt;/p>
&lt;p>Once we have this variable, we can call the &lt;code>gXftm3iswpkVgBNDUp&lt;/code> function as well as manipulating the JNI buffers:&lt;/p>
&lt;ul>
&lt;li>&lt;code>env-&amp;gt;NewByteArray()&lt;/code>&lt;/li>
&lt;li>&lt;code>env-&amp;gt;GetArrayLength()&lt;/code>&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="shim_mechanism.png" alt="Shimming of whitebox library">&lt;/p>
&lt;p>Long story short, we can instantiate the Android runtime with the following piece of code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">**&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">JavaVMOption&lt;/span> &lt;span class="n">opt&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">opt&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">optionString&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;-Djava.class.path=/data/local/tmp/re.pwnme.1.0.apk&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">opt&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">optionString&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;-Djava.library.path=/data/local/tmp&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">JavaVMInitArgs&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">args&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">version&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">JNI_VERSION_1_6&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">args&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">options&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">opt&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">args&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">nOptions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">args&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ignoreUnrecognized&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">JNI_FALSE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">handler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">dlopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/system/lib64/libart.so&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RTLD_NOW&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">JNI_CreateJavaVM_f&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">decltype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">JNI_CreateJavaVM&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dlsym&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">handler&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;JNI_CreateJavaVM&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">JNI_CreateJavaVM_f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">jvm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, we can resolve the &lt;code>gXftm3iswpkVgBNDUp&lt;/code> function with the base address of &lt;code>libnative-lib.so&lt;/code>
and its offset &lt;code>0x9B41C&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">hdl&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">dlopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;libnative-lib.so&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RTLD_NOW&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">uintptr_t&lt;/span> &lt;span class="n">base_address&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_base_address&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;libnative-lib.so&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="n">gXftm3iswpkVgBNDUp_t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jbyteArray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">JNIEnv&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">jobject&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">jbyteArray&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">jbyte&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">gXftm3iswpkVgBNDUp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">gXftm3iswpkVgBNDUp_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">base_address&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">0x9B41C&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, we can run the function with our own inputs:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">pin_amount&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;0000123400004567&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">jbyteArray&lt;/span> &lt;span class="n">array&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">convert_to_jbyteArray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pin_amount&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">jbyteArray&lt;/span> &lt;span class="n">jencrypted_buffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gXftm3iswpkVgBNDUp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xF0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">uint8_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">encrypted_buffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">from_jbytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jencrypted_buffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">hex_str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">to_hex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">encrypted_buffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">LOG_INFO&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{} --&amp;gt; {}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pin_amount&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ref_str&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="alert alert-note">
&lt;div>
The whole implementation is available &lt;a href="https://github.com/romainthomas/r2pay/blob/master/shim-whitebox">here &lt;i class="fab fa-github">&lt;/i>&lt;/a>.
&lt;/div>
&lt;/div>
&lt;h2 id="function-tracing">Function Tracing&lt;/h2>
&lt;p>Now that we are able to run the &lt;code>gXftm3iswpkVgBNDUp&lt;/code> function without the GUI layer, we can easily
create an interface with
&lt;a href="https://qbdi.quarkslab.com" target="_blank" rel="noopener">QBDI&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">VM&lt;/span> &lt;span class="n">vm&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">addInstrumentedModule&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;libnative-lib.so&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="n">jbyteArray&lt;/span> &lt;span class="n">array&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">to_jarray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pin_amount&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">jbyteArray&lt;/span> &lt;span class="n">qbdi_encrypted_buffer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">call&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="cm">/* ret */&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">uintptr_t&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">qbdi_encrypted_buffer&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="cm">/* target */&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">uintptr_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gXftm3iswpkVgBNDUp&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="cm">/* params */&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="cm">/* p_0: JNIEnv* */&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">rword&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="cm">/* p_1: jobject thiz */&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">rword&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">nullptr&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="cm">/* p_2: inbuffer */&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">rword&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="mh">0xF0&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The execution in QBDI &lt;strong>without user&amp;rsquo;s callbacks&lt;/strong> takes about &lt;strong>3min 30s&lt;/strong> which is quite huge compared to
the &lt;strong>real execution&lt;/strong> that takes about &lt;strong>853ms&lt;/strong>:&lt;/p>
&lt;p>&lt;img src="benchmark.svg" alt="Performances with different configurations">&lt;/p>
&lt;p>This overhead is mostly due to the function &lt;code>0x1038f0&lt;/code> that is executed ~20 000 times. After a quick
analysis, it turns out that this function is not relevant to instrument to break the whitebox.
We can force its &lt;em>real&lt;/em> execution
(i.e. outside QBDI) &lt;strong>by removing the function&amp;rsquo;s address from the instrumented range&lt;/strong>&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">static&lt;/span> &lt;span class="k">constexpr&lt;/span> &lt;span class="n">uintptr_t&lt;/span> &lt;span class="n">HEAVY_FUNCTION&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x1038f0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">removeInstrumentedRange&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">base_address&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">HEAVY_FUNCTION&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">base_address&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">HEAVY_FUNCTION&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This small adjustment &lt;strong>drops the execution to 3'30sec&lt;/strong>.&lt;/p>
&lt;hr>
&lt;p>Some cryptographic algorithms can be fingerprinted either with predefined constants or with their memory accesses.
According to the Quarkslab&amp;rsquo;s blog post:
&lt;a href="https://blog.quarkslab.com/differential-fault-analysis-on-white-box-aes-implementations.html" target="_blank" rel="noopener">Differential Fault Analysis on White-box AES Implementations&lt;/a>,
the whitebox lookup tables are likely to be stored in the &lt;code>.data, .rodata, ...&lt;/code> sections.&lt;/p>
&lt;p>By looking at the sizes of these sections, only the &lt;code>.data&lt;/code> section seems to have an appropriate size.
We can generate a memory trace on this section to see if we can outline some patterns.
It can be made with the following piece of code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">recordMemoryAccess&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MEMORY_READ_WRITE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">addMemRangeCB&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="cm">/* .data start address */&lt;/span> &lt;span class="n">base_address&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">0x127000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="cm">/* .data end address */&lt;/span> &lt;span class="n">base_address&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">0x127000&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">0x8e000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="cm">/* Record both: reads and writes */&lt;/span> &lt;span class="n">MEMORY_READ_WRITE&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="cm">/* Memory callback */&lt;/span>
&lt;span class="p">[]&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">VM&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">vm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GPRState&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">FPRState&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">qbdi_ctx&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="cm">/*
&lt;/span>&lt;span class="cm"> * &amp;#39;for&amp;#39; loop since on AArch64 we can have multiple reads / writes
&lt;/span>&lt;span class="cm"> * at once. (e.g. stp x0, x1, [sp, #128])
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">MemoryAccess&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="nl">mem_access&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">vm&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getInstMemoryAccess&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">trace&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="n">mem_access&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">instAddress&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">base_address&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">mem_access&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">accessAddress&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">base_address&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">mem_access&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">VMAction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">CONTINUE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="alert alert-note">
&lt;div>
Generating the memory trace takes about 11sec which is acceptable.
&lt;/div>
&lt;/div>
&lt;p>It leads to the following graph in which we can notice a characteristic pattern at the end of the trace:&lt;/p>
&lt;p>&lt;img src="memory_trace.png" alt="Memory trace generated with QBDI">&lt;/p>
&lt;h2 id="fault-injection">Fault Injection&lt;/h2>
&lt;p>The pattern at the end of the trace is quite characteristic of AES-128 where we can identify 10 rounds.
&lt;img src="rounds.png" alt="AES rounds">&lt;/p>
&lt;p>We now have all the necessary information to make a &lt;em>fault injection attack&lt;/em>:&lt;/p>
&lt;ol>
&lt;li>We can identify the 9th round&lt;/li>
&lt;li>We can &lt;strong>accurately&lt;/strong> fault the &lt;code>.data&lt;/code> section thanks to the memory trace&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="injection.png" alt="Fault injection in the 9th round">&lt;/p>
&lt;div class="alert alert-note">
&lt;div>
The memory trace is available in the &lt;a href="https://github.com/romainthomas/r2pay/blob/master/assets/mem_trace.json">&lt;i class="fab fa-github">&lt;/i> mem_trace.json&lt;/a> file of the repository.
&lt;/div>
&lt;/div>
&lt;p>To efficiently make
the injection, we can first reduce the memory addresses to only keep those that are used in the last 2 rounds:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">trace_file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CWD&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="s2">&amp;#34;..&amp;#34;&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="s2">&amp;#34;assets&amp;#34;&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="s2">&amp;#34;mem_trace.json&amp;#34;&lt;/span>
&lt;span class="n">trace&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">json&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">loads&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">trace_file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read_bytes&lt;/span>&lt;span class="p">())[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c1"># Keep the entries that are involved in the last 2-rounds (empirical number)&lt;/span>
&lt;span class="n">nice_trace&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">trace&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">:]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, we can use our shim mechanism to inject the faults in the &lt;code>.data&lt;/code> section with the addresses previously selected.
Moreover, we can reduce the set of &lt;code>.data&lt;/code> addresses with the faults that introduce exactly &lt;strong>4 differences&lt;/strong> in the ciphertext:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="c1">// Make sure the .data section is writable
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">mprotect&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">base_address&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="cm">/* .data */&lt;/span> &lt;span class="mh">0x127000&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="mh">0x8e000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">PROT_READ&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">PROT_WRITE&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uintptr_t&lt;/span> &lt;span class="nl">fault_addr&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">selected_addresses&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">uint8_t&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">target_byte&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">uint8_t&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">base_address&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">fault_addr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">uint8_t&lt;/span> &lt;span class="n">backup&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">target_byte&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Fault 1 byte:
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">target_byte&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="mh">0x33&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Run the whitebox with the faulty byte
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">uint8_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">encrypted&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">encrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Restore the original byte
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">target_byte&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">backup&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Compute the number of errors
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// ...
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, with the subset of the addresses that affect exactly 4 bytes, we can generate several faults for a given
address:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uintptr_t&lt;/span> &lt;span class="nl">nice_fault_addr&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">four_bytes_fault_addresses&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">uint8_t&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">inject_fault&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">addr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PIN_AMOUNT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">nb_errors&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">genuine_value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">output&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">nb_errors&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">unique&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">second&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Record the entry ...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The aforementioned code gives an idea about how to generate the faults. One can find the whole implementation in
this file:
&lt;a href="https://github.com/romainthomas/r2pay/blob/master/shim-whitebox/src/main.cpp#L343-L365" target="_blank" rel="noopener">shim-whitebox/src/main.cpp&lt;/a> that produces
this set of files
&lt;a href="https://github.com/romainthomas/r2pay/blob/master/assets/wb-traces" target="_blank" rel="noopener">assets/wb-traces&lt;/a>.&lt;/p>
&lt;h2 id="key-extraction">Key Extraction&lt;/h2>
&lt;p>Thanks to the
&lt;a href="https://github.com/SideChannelMarvels" target="_blank" rel="noopener">&lt;i class="fab fa-github">&lt;/i> Side-Channel Marvels&lt;/a> project,
we can use
&lt;a href="https://github.com/SideChannelMarvels/JeanGrey" target="_blank" rel="noopener">JeanGrey&lt;/a> &amp;mdash; developed by Philippe Teuwen &amp;mdash; to recover the whitebox&amp;rsquo;s key from the faulty traces:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">pathlib&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">phoenixAES&lt;/span>
&lt;span class="n">CWD&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pathlib&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="vm">__file__&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>
&lt;span class="n">trace_dir&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CWD&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="s2">&amp;#34;..&amp;#34;&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="s2">&amp;#34;assets&amp;#34;&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="s2">&amp;#34;wb-traces&amp;#34;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">trace_dir&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">iterdir&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">phoenixAES&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">crack_file&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It provides the following results which enable to retrieve the key:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-console" data-lang="console">$ python wb_key_recovery.py
..8D....7F............9A....79.. injection-1a930d.trace
..8D....7F............9A....79.. injection-1a95bd.trace
....19....62....B0............8F injection-1a91b2.trace
....19....62....B0............8F injection-1a8fdf.trace
76............1E....D3....E1.... injection-1a8549.trace
......E1....A0....CD....28...... injection-1a8978.trace
....19....62....B0............8F injection-1a90ce.trace
....19....62....B0............8F injection-1a8efd.trace
r 2 p 4 y 1 s N 0 w S e c u r 3
&lt;/code>&lt;/pre>&lt;p>Finally, we can verify that &lt;strong>r2p4y1sN0wSecur3&lt;/strong> is the right key by trying to decrypt &lt;code>9497cdf1df2600e7f63778d0ae91dcbb&lt;/code>&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">Crypto.Cipher&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">AES&lt;/span>
&lt;span class="n">WB_KEY&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s2">&amp;#34;r2p4y1sN0wSecur3&amp;#34;&lt;/span>
&lt;span class="n">cipher&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AES&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">WB_KEY&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">AES&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">MODE_ECB&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cipher&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">bytes&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fromhex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;9497cdf1df2600e7f63778d0ae91dcbb&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code class="language-console" data-lang="console">$ python ./aes_test.py
0000123400004567
&lt;/code>&lt;/pre>&lt;h2 id="side-note-about-the-data-section">Side note about the &lt;code>.data&lt;/code> section&lt;/h2>
&lt;p>Most of the obfuscators encode strings so that we don&amp;rsquo;t have any clue about functions' logic. The obfuscator
used in the challenge follows this rule and running the &lt;code>strings&lt;/code> utility on the library does not reveal any interesting information.&lt;/p>
&lt;p>Nevertheless, we can find a lot of &lt;code>.datadiv_decode&amp;lt;random hex&amp;gt;&lt;/code> in the ELF constructors of the library.
As explained in the previous part, they are generated by the obfuscator and aimed to decode the strings.&lt;/p>
&lt;p>Since these functions are in the &lt;strong>ELF constructors&lt;/strong>, this means that they are executed as soon as the library is loaded.
In particular, when calling &lt;code>dlopen(...)&lt;/code> these constructors are executed. It can be confirmed by
dumping the &lt;code>.data&lt;/code> section right after &lt;code>dlopen()&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">dlopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;libnative-lib.so&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RTLD_NOW&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ofstream&lt;/span> &lt;span class="n">ofs&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">fmt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/data/local/tmp/{}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">output&lt;/span>&lt;span class="p">)};&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">base_address&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">0x127000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">ofs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* sizeof(.data) */&lt;/span> &lt;span class="mh">0x8d49f&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, we can compare the bytes distribution with
&lt;a href="https://binvis.io/" target="_blank" rel="noopener">binvis.io&lt;/a>:&lt;/p>
&lt;p>&lt;img src="data_strings.png" alt="Bytes distribution in the .data section">&lt;/p>
&lt;p>At the end of the in-memory &lt;code>.data&lt;/code> section, we can found interesting strings used to detect Frida and the
device&amp;rsquo;s root state.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Thanks again to &lt;u>Eduardo Novella&lt;/u> (
&lt;a href="https://twitter.com/enovella_" target="_blank" rel="noopener">@enovella_&lt;/a>)
and &lt;u>Gautam Arvind&lt;/u> (
&lt;a href="https://twitter.com/darvincisec" target="_blank" rel="noopener">@darvincisec&lt;/a>) for this second part of the challenge :)&lt;/p>
&lt;p>Also thanks to &lt;u>
&lt;a href="https://www.quarkslab.com" target="_blank" rel="noopener">Quarkslab&lt;/a>&lt;/u> that allowed this publication.
One can find related blog posts about whitebox attacks on the Quarkslab&amp;rsquo;s blog:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>
&lt;a href="https://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html" target="_blank" rel="noopener">Introduction to Whiteboxes and Collision-Based Attacks With QBDI
&lt;/a> by Paul Hernault (
&lt;a href="https://twitter.com/0xAcid" target="_blank" rel="noopener">@0xAcid&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
&lt;a href="https://blog.quarkslab.com/when-sidechannelmarvels-meet-lief.html" target="_blank" rel="noopener">When SideChannelMarvels meet LIEF &lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>
&lt;a href="https://blog.quarkslab.com/differential-fault-analysis-on-white-box-aes-implementations.html" target="_blank" rel="noopener">Differential Fault Analysis on White-box AES
Implementations&lt;/a> by Philippe Teuwen (
&lt;a href="https://twitter.com/doegox" target="_blank" rel="noopener">@doegox&lt;/a>).
&lt;em>I used this blog post as a reference to resolve this part of the challenge.&lt;/em>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="references">References&lt;/h3>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>
&lt;a href="https://developer.android.com/reference/android/content/Context" target="_blank" rel="noopener">https://developer.android.com/reference/android/content/Context&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>
&lt;a href="https://calebfenton.github.io/2017/04/05/creating_java_vm_from_android_native_code/" target="_blank" rel="noopener">https://calebfenton.github.io/2017/04/05/creating_java_vm_from_android_native_code/&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>QBDI will execute the function using the
&lt;a href="https://qbdi.readthedocs.io/en/stable/api_cpp.html#execution-filtering" target="_blank" rel="noopener">ExecBroker&lt;/a> mechanism.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>It is the output of the function when entering &lt;code>1234&lt;/code> in the PIN field and &lt;code>4567&lt;/code> in the amount field.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>r2-pay: anti-debug, anti-root &amp; anti-frida (part 1)</title><link>https://www.romainthomas.fr/post/20-09-r2con-obfuscated-whitebox-part1/</link><pubDate>Sun, 20 Sep 2020 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/post/20-09-r2con-obfuscated-whitebox-part1/</guid><description>&lt;style>
.green {
color:green;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.blue {
color: blue;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.orange {
color: #FF6347;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.red {
color: #df2b04;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.hl-comment {
color: #df2b04;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.hl-keyword {
color: #A90D91;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.hl-literal {
color: #1C01CE;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.hl-preproc {
color: #633820;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.hl-strings {
color: #C41A16;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
.yellow {
color: #CC7000;
font-family: 'Fira Code', monospace;
font-size: 87.5%;
}
#
&lt;/style>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This series of blog posts explains one way to resolve the r2-pay challenge released during the
&lt;a href="https://rada.re/con/2020/" target="_blank" rel="noopener">r2con2020&lt;/a> conference. This first part is about the
anti-analysis tricks used to hinder reverse-engineering while the second part will be more focused on
breaking the whitebox.&lt;/p>
&lt;p>The resolution took me more than a week-end but it covers nice topics that worth it: &lt;strong>obfuscation &amp;amp; whitebox&lt;/strong>.
It was also the opportunity to practice attacks against whiteboxes
and to test
&lt;a href="https://github.com/SideChannelMarvels/JeanGrey" target="_blank" rel="noopener">SideChannelMarvels/JeanGrey&lt;/a> developed by Philippe Teuwen (aka.
&lt;a href="https://twitter.com/doegox" target="_blank" rel="noopener">@doegox&lt;/a>).&lt;/p>
&lt;p>The challenge has been resolved with the AArch64 version on a device running on Android 9 and rooted with Magisk.&lt;/p>
&lt;div class="alert alert-note">
&lt;div>
&lt;p>Here are the files used in this write-up:&lt;/p>
&lt;p>&lt;i class="fas fa-mobile-alt">&lt;/i> &lt;a href="re.pwnme.1.0.apk">re.pwnme.1.0.apk - af019d3016720592aade7bde9890110c&lt;/a>&lt;/p>
&lt;p>&lt;i class="fas fa-shield-alt">&lt;/i> &lt;a href="libnative-lib.so">libnative-lib.so (arm64-v8a version)&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>When opening the application on a non-tempered device (or with Magisk hide enabled), we are asked to enter
a PIN and an amount that is used to generate a &lt;em>token&lt;/em>.&lt;/p>
&lt;p>To resolve the challenge, we have to find the &lt;em>master key&lt;/em> that is used to generate the token.
Few days before the CTF I was told that one of the challenges
would involve an obfuscated whitebox&amp;hellip;&lt;/p>
&lt;p>The main interface of the APK is located in the Java class &lt;code>re.pwnme.MainActivity&lt;/code> which forwards the user inputs (PIN &amp;amp; amount)
to a JNI function named &lt;code>gXftm3iswpkVgBNDUp&lt;/code>. This function takes the concatenated input $PIN\ ||\ Amount$
and returns the token as a byte array.&lt;/p>
&lt;p>The &lt;strong>static constructor&lt;/strong> of the class loads the &amp;ldquo;native-lib&amp;rdquo; library which is available for the architectures:
&lt;code>arm64-v8a&lt;/code>, &lt;code>armeabi-v7a&lt;/code>, and &lt;code>x86_64&lt;/code>. Unsurprisingly, this library is obfuscated and some symbols suggest that it has
been compiled with a fork of O-LLVM &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>&lt;img src="mainactivity_tag.png" alt="re.pwnme.MainActivity in r2pay">&lt;/p>
&lt;p>In addition, the library does not export the expected symbol &lt;code>Java_re_pwnme_MainActivity_gXftm3iswpkVgBNDUp&lt;/code> but prefers
to use the &lt;code>JNI_OnLoad&lt;/code> technique &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>. &lt;code>JNI_OnLoad()&lt;/code> is also obfuscated along with control-flow-flattening.&lt;/p>
&lt;p>The main task of the challenge is to understand the logic of the &lt;code>gXftm3iswpkVgBNDUp&lt;/code> function to figure out how the
&lt;em>token&lt;/em> is generated.&lt;/p>
&lt;h2 id="anti-root--anti-frida">Anti-Root &amp;amp; Anti-Frida&lt;/h2>
&lt;p>Along with the &lt;code>libnative-lib.so&lt;/code> library, the applications embeds another library &lt;code>libtool-checker.so&lt;/code>
whose name sounds quite familiar: it comes from the open-source project
&lt;a href="https://github.com/scottyab/rootbeer" target="_blank" rel="noopener">rootbeer&lt;/a>
which is used to detect if the device is rooted.&lt;/p>
&lt;p>Some of the root-checks are done in the MainActivity class and if the device is rooted the application raises
an exception by dividing a number with 0.&lt;/p>
&lt;p>On this point, we can disable the check by using
&lt;a href="https://frida.re/" target="_blank" rel="noopener">Frida&lt;/a> on the rootbeer&amp;rsquo;s functions involved in the detection:&lt;/p>
&lt;pre tabindex="0">&lt;code>// frida -U -l ./bypass-root.js --no-pause -f re.pwnme
Java.perform(function () {
var RootCheck = Java.use('\u266b.\u1d64');
RootCheck['₤'].implementation = function () {
console.log(&amp;quot;Skip root&amp;quot;);
return false;
}
RootCheck['θ'].overload().implementation = function () {
console.log(&amp;quot;Skip root&amp;quot;);
return false;
}
})
&lt;/code>&lt;/pre>&lt;p>Nevertheless, the application still crashes as soon as it starts and generates the following backtrace:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">F libc : Fatal signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr 0xfa929095 in tid 8875 (re.pwnme), pid 8849 (re.pwnme)
F DEBUG : *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
F DEBUG : Build fingerprint: &amp;#39;google/taimen/taimen:9/PQ3A.190801.002/5670241:user/release-keys&amp;#39;
F DEBUG : Revision: &amp;#39;rev_10&amp;#39;
F DEBUG : ABI: &amp;#39;arm64&amp;#39;
F DEBUG : pid: 8849, tid: 8875, name: re.pwnme &amp;gt;&amp;gt;&amp;gt; com.google.android.gms &amp;lt;&amp;lt;&amp;lt;
F DEBUG : signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr 0xfa929095
F DEBUG : x0 0000007f041f6610 x1 0000007f2565c800 x2 0000007f25600000 x3 000000000000001d
F DEBUG : x4 000000000000005c x5 0000000000000001 x6 0000000000000001 x7 0000000000000000
F DEBUG : x8 0000007f041f6610 x9 0000007f041f6600 x10 00000000fa929095 x11 00000000000035b2
F DEBUG : x12 00000000e34d79ac x13 00000000fffffff7 x14 00000000a139577d x15 0000000000000001
F DEBUG : x16 0000007fa66af220 x17 0000007fa65e3608 x18 0000000000000000 x19 0000007f041f6680
F DEBUG : x20 0000000000000000 x21 0000000000000000 x22 0000229100002291 x23 0000000000000000
F DEBUG : x24 0000007f041ff570 x25 0000007f04102000 x26 0000007fab1ad5e0 x27 0000007f0421a690
F DEBUG : x28 0000007f04209080 x29 0000007f041ff490
F DEBUG : sp 0000007f041f65f0 lr 0000007f0423de04 pc 0000007f0423f980
F DEBUG :
F DEBUG : backtrace:
F DEBUG : #00 pc 000000000003f980 /data/app/re.pwnme-7O3ynhSmMsg2_E5_uqbQxQ==/lib/arm64/libnative-lib.so
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The backtrace suggests that other checks are performed in the native library. By looking at the ELF&amp;rsquo;s constructors,
we can notice two functions that differ from those generated by the obfuscator:&lt;/p>
&lt;p>&lt;img src="elf_ctor.png" alt="ELF constructors involved in the detection">&lt;/p>
&lt;div class="alert alert-note">
&lt;div>
&lt;code>.datadiv_decode13003153710004289592&lt;/code> functions are in the ELF constructors since they decode global strings that need to be
available as soon as the library is loaded.
&lt;/div>
&lt;/div>
&lt;p>By tracing these functions with
&lt;a href="https://qbdi.quarkslab.com/" target="_blank" rel="noopener">QBDI&lt;/a>, we quickly understand that &lt;span class="green">sub_9080&lt;/span> iterates over
&lt;code>/proc/self/maps&lt;/code> with the syscalls &lt;span class="blue">openat&lt;/span>/&lt;span class="hl-keyword">read&lt;/span>
that are located at the addresses &lt;span class="blue">0x009870&lt;/span> and &lt;span class="hl-keyword">0x00b448&lt;/span>.&lt;/p>
&lt;p>Then, we observe the following sequence:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">0x011fb0: syscall: openat(0xffffffffffffff9c, &amp;#39;/system/lib64/libc.so&amp;#39;)
0x012884: syscall: read(51, 0x7ffc006c58, 64): &amp;#39;ELF@)@8@&amp;#39;
0x013170: syscall: lseek(51, 0x112918, 0)
0x0145f8: syscall: read(51, 0x7ffc006c18, 64)
0x0145f8: syscall: read(51, 0x7ffc006c18, 64)
0x0145f8: syscall: read(51, 0x7ffc006c18, 64): &amp;#39;/ &amp;#39;
0x0145f8: syscall: read(51, 0x7ffc006c18, 64): &amp;#39;B88&amp;#39;
0x0145f8: syscall: read(51, 0x7ffc006c18, 64): &amp;#39;J&amp;gt;&amp;#39;
0x0145f8: syscall: read(51, 0x7ffc006c18, 64): &amp;#39;RoP)&amp;#39;
0x0145f8: syscall: read(51, 0x7ffc006c18, 64): &amp;#39;\o((&amp;#39;
0x0145f8: syscall: read(51, 0x7ffc006c18, 64): &amp;#39;io&amp;#39;
0x0145f8: syscall: read(51, 0x7ffc006c18, 64): &amp;#39;xo0&amp;#39;
0x0145f8: syscall: read(51, 0x7ffc006c18, 64)
0x0145f8: syscall: read(51, 0x7ffc006c18, 64): &amp;#39;Bxx`-&amp;#39;
0x0145f8: syscall: read(51, 0x7ffc006c18, 64): &amp;#39;PP`&amp;#39;
0x0151f4: malloc(0x18): 0x7f0c21f4c0
0x0156e4: syscall: lseek(51, 0x1a650, 0)
0x015a68: malloc(0x1e60): 0x7f0acb2000
0x015fa0: syscall: read(51, 0x7f0acb2000, 0x1e60): &amp;#39;{n@b r@ v@ z@ ~@ @ @&amp;#34; @B @b @ @ @ @ @ @&amp;#34; @B @b @ @ @ @ @ @&amp;#34; @B @b @ @ @ @ @ @&amp;#34; @B @b @ @ @ @ A A&amp;#34; AB Ab A A A A &amp;#34;A &amp;amp;A&amp;#34; *AB .Ab 2A 6A :A &amp;gt;A BA FA&amp;#34; JAB NAb RA VA ZA ^A bA fA&amp;#34; jAB nAb rA vA zA ~A A A&amp;#34; AB Ab A A A A A A&amp;#34; AB Ab A A A A A A&amp;#34; AB Ab A A A A A A&amp;#34; AB Ab A A A A B B&amp;#34; BB Bb B B B B &amp;#34;B &amp;amp;B&amp;#34; *BB .Bb 2B 6B :B &amp;gt;B BB FB&amp;#34; JBB NBb RB VB ZB ^B bB fB&amp;#34; jBB nBb rB vB zB ~B B B&amp;#34; BB Bb B B B B B B&amp;#34; B ...&amp;#39;
0x016cfc: free(0x7f0acb2000) -&amp;gt; {n@b r@ v@ z@ ~@ @ @&amp;#34; @B @b @ @ @ @ @ @&amp;#34; @B @b @ @ @ @ @ @&amp;#34; @B @b @ @ @ @ @ @&amp;#34; @B @b @ @ @ @ A A&amp;#34; AB Ab A A A A &amp;#34;A &amp;amp;A&amp;#34; *AB .Ab 2A 6A :A &amp;gt;A BA FA&amp;#34; JAB NAb RA VA ZA ^A bA fA&amp;#34; jAB nAb rA vA zA ~A A A&amp;#34; AB Ab A A A A A A&amp;#34; AB Ab A A A A A A&amp;#34; AB Ab A A A A A A&amp;#34; AB Ab A A A A B B&amp;#34; BB Bb B B B B &amp;#34;B &amp;amp;B&amp;#34; *BB .Bb 2B 6B :B &amp;gt;B BB FB&amp;#34; JBB NBb RB VB ZB ^B bB fB&amp;#34; jBB nBb rB vB zB ~B B B&amp;#34; BB Bb B B B B B B&amp;#34; B ...
0x017118: syscall: close(51)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>From this output, we can infer the following logic:&lt;/p>
&lt;ol>
&lt;li>&lt;code>0x011fb0&lt;/code>: the function opens the libc&lt;/li>
&lt;li>&lt;code>0x012884&lt;/code>: it reads the ELF header&lt;/li>
&lt;li>&lt;code>0x013170&lt;/code>: it jumps to the ELF sections table&lt;/li>
&lt;li>&lt;code>0x0145f8&lt;/code>: it looks for the &lt;code>.plt&lt;/code> section&lt;/li>
&lt;li>&lt;code>0x015a68&lt;/code>, &lt;code>0x015fa0&lt;/code>: it reads the content of the &lt;code>.plt&lt;/code> section&lt;/li>
&lt;/ol>
&lt;p>These operations suggest that the function checks if the &lt;code>.plt&lt;/code> of &lt;code>/system/lib64/libc.so&lt;/code> is not tampered with.
In particular, if we use Frida on a libc&amp;rsquo;s function this check won&amp;rsquo;t pass.&lt;/p>
&lt;p>After this check, the function &lt;span class="green">sub_9080&lt;/span> spawns a thread:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">0x0195dc: pthread_create(0xf1079f10, 0x0, 0x1a690, 0x0)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The libc integrity check makes more sense as it is probably used to protect the library against a hook of &lt;code>pthread_create()&lt;/code>.&lt;/p>
&lt;p>The thread&amp;rsquo;s routine &lt;span class="red">sub_1a690&lt;/span> starts by making two calls to the mathematical function &lt;code>tan()&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">0x01b774: tan(0.): 0.
0x01b79c: tan(-7832.0): -0.00951489
0x01cc74: memcpy(0x7ffc006598, libnative-lib.so!0x1267f0, 80) -&amp;gt; !7Nl
0x01ceb8: rand()
0x01f774: tan(0.): 0.
0x01f79c: tan(-7832.0): -0.00951489
&lt;/code>&lt;/pre>&lt;/div>&lt;p>My understanding of these calls is that the application tries to protect against tools that would not support
floating-point instructions such as &lt;code>FCMP&lt;/code> or &lt;code>FMOV&lt;/code>. In addition, I think that if we mock the behavior of
&lt;code>tan()&lt;/code> with a constant value it would trigger a crash.&lt;/p>
&lt;p>&lt;img src="tan_instruction.png" alt="tan">&lt;/p>
&lt;p>Then it follows a check of &lt;code>TracerPid&lt;/code> value in &lt;code>/proc/self/status&lt;/code>. This value is set when
the process is ptrace-debugged (which is the case with gdb).
Dynamically, we observe syscalls that open &lt;code>/proc/self/status&lt;/code> and read the content
byte-per-byte:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">0x020ee0: syscall: openat(0xffffffffffffff9c, &amp;#39;/proc/self/status&amp;#39;): 51
0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &amp;#39;N&amp;#39;
0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &amp;#39;a&amp;#39;
0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &amp;#39;m&amp;#39;
0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &amp;#39;e&amp;#39;
0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &amp;#39;:&amp;#39;
0x0231e8: syscall: read(51, 0x7ffc00656c, 1)
0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &amp;#39;r&amp;#39;
0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &amp;#39;e&amp;#39;
0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &amp;#39;.&amp;#39;
0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &amp;#39;p&amp;#39;
0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &amp;#39;w&amp;#39;
0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &amp;#39;n&amp;#39;
0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &amp;#39;m&amp;#39;
0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &amp;#39;e&amp;#39;
0x0231e8: syscall: read(51, 0x7ffc00656c, 1)
0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &amp;#39;S&amp;#39;
0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &amp;#39;t&amp;#39;
0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &amp;#39;a&amp;#39;
0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &amp;#39;t&amp;#39;
0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &amp;#39;e&amp;#39;
0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &amp;#39;:&amp;#39;
...
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="anti-frida-1">Anti-Frida #1&lt;/h2>
&lt;p>Still in the thread&amp;rsquo;s routine &lt;span class="red">sub_1a690&lt;/span>, the function checks if Frida is running by looking
at all the values of &lt;code>/proc/self/task/&amp;lt;tid&amp;gt;/status&lt;/code> and by checking if one of the names is &lt;span class="red">&lt;b>&lt;u>gmain&lt;/u>&lt;/b>&lt;/span>.
It turns out that it&amp;rsquo;s the case when Frida is used in the application :-)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">0x0368e4: snprintf(&amp;#39;/proc/self/task/9719/status&amp;#39;, &amp;#39;/proc/self/task/%s/status&amp;#39;): &amp;#39;/proc/self/task/9719/status&amp;#39;
0x036a1c: syscall: openat(0xffffffffffffff9c, &amp;#39;/proc/self/task/9719/status&amp;#39;)
0x03897c: syscall: read(73, 0x7ffc400af4, 1): &amp;#39;N&amp;#39;
0x03897c: syscall: read(73, 0x7ffc400af4, 1): &amp;#39;a&amp;#39;
0x03897c: syscall: read(73, 0x7ffc400af4, 1): &amp;#39;m&amp;#39;
0x03897c: syscall: read(73, 0x7ffc400af4, 1): &amp;#39;e&amp;#39;
0x03897c: syscall: read(73, 0x7ffc400af4, 1): &amp;#39;:&amp;#39;
0x03897c: syscall: read(73, 0x7ffc400af4, 1)
0x03897c: syscall: read(73, 0x7ffc400af4, 1): &amp;#39;g&amp;#39;
0x03897c: syscall: read(73, 0x7ffc400af4, 1): &amp;#39;m&amp;#39;
0x03897c: syscall: read(73, 0x7ffc400af4, 1): &amp;#39;a&amp;#39;
0x03897c: syscall: read(73, 0x7ffc400af4, 1): &amp;#39;i&amp;#39;
0x03897c: syscall: read(73, 0x7ffc400af4, 1): &amp;#39;n&amp;#39;
0x03897c: syscall: read(73, 0x7ffc400af4, 1)
0x03897c: closedir()
# Crash!
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To bypass this check, one can statically patch the syscall or we can dynamically
change the behavior of &lt;code>snprintf(..., '/proc/self/task/%s/status')&lt;/code> in order to &lt;strong>always&lt;/strong> returns the same status (e.g. &lt;code>/proc/self/task/123/status&lt;/code>).
Concretely, it could be done by hooking &lt;code>snprintf&lt;/code> and by forcing the &lt;em>output&lt;/em> string to &lt;code>/proc/self/task/123/status&lt;/code>.&lt;/p>
&lt;h2 id="anti-frida-2">Anti-Frida #2&lt;/h2>
&lt;p>Still in the &lt;span class="red">sub_1a690&lt;/span> function, the anti-frida checks continue by inspecting the file descriptors
of the process. It iterates over &lt;code>/proc/self/fd/%s&lt;/code> and looks at the underlying symlink.&lt;/p>
&lt;p>Frida &lt;span class="blue">server&lt;/span> &amp;mdash; which is running globally on the device &amp;mdash; and Frida agent &amp;mdash; which is injected in the
process &amp;mdash; communicate with named pipes that are associated with a file descriptor.&lt;/p>
&lt;p>If Frida server is running, we can observe the following values:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">0x04308c: lstat(&amp;#39;/proc/self/fd/32&amp;#39;)
0x043448: syscall: readlinkat(0xffffffffffffff9c, &amp;#39;/proc/self/fd/32&amp;#39;, 0x7ffbffdc10, 256): &amp;#39;anon_inode:[eventfd]&amp;#39;
0x041844: readdir(&amp;#39;33&amp;#39;)
0x043078: snprintf(&amp;#39;/proc/self/fd/33&amp;#39;, &amp;#39;/proc/self/fd/%s&amp;#39;): &amp;#39;/proc/self/fd/33&amp;#39;
0x04308c: lstat(&amp;#39;/proc/self/fd/33&amp;#39;)
0x043448: syscall: readlinkat(0xffffffffffffff9c, &amp;#39;/proc/self/fd/33&amp;#39;, 0x7ffbffdc10, 256): &amp;#39;anon_inode:[eventfd]&amp;#39;
0x041844: readdir(&amp;#39;34&amp;#39;)
0x043078: snprintf(&amp;#39;/proc/self/fd/34&amp;#39;, &amp;#39;/proc/self/fd/%s&amp;#39;): &amp;#39;/proc/self/fd/34&amp;#39;
0x04308c: lstat(&amp;#39;/proc/self/fd/34&amp;#39;)
0x043448: syscall: readlinkat(0xffffffffffffff9c, &amp;#39;/proc/self/fd/34&amp;#39;, 0x7ffbffdc10, 256): &amp;#39;/data/local/tmp/re.frida.server/linjector-500&amp;#39;
# Crash!
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this case, the file descriptor &lt;code>34&lt;/code> is associated with &lt;code>/data/local/tmp/re.frida.server/linjector-500&lt;/code>
which triggers the detection and the application crashes.&lt;/p>
&lt;p>As for &lt;code>/proc/self/task/&amp;lt;tid&amp;gt;/status&lt;/code>, one can disable this check by &lt;strong>statically patching&lt;/strong> the syscalls or
by &lt;strong>dynamically changing&lt;/strong> the result of &lt;code>readlinkat()&lt;/code>. For instance, we can use
&lt;a href="https://qbdi.quarkslab.com/" target="_blank" rel="noopener">QBDI&lt;/a> to
instrument syscall instructions and process the result of &lt;code>readlinkat()&lt;/code> in an user callback:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">
&lt;span class="n">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">addMnemonicCB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SVC&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">POST_INST&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">[]&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">VMInstanceRef&lt;/span> &lt;span class="n">vm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GPRState&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">gprState&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">FPRState&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">gprState&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">x8&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">__NR_readlinkat&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">VMAction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">CONTINUE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">buf&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gprState&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">x2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;re.frida.server&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">npos&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">static&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">FAKE_VALUE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;anon_inode:[eventfd]&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Bypass Frida detection!
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">memcpy&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gprState&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">x2&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FAKE_VALUE&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c_str&lt;/span>&lt;span class="p">()),&lt;/span>
&lt;span class="n">FAKE_VALUE&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="n">gprState&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">x0&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FAKE_VALUE&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">VMAction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">CONTINUE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="n">ctx&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="anti-frida-3-">Anti-Frida #3 ?&lt;/h2>
&lt;p>I&amp;rsquo;m not sure if the following calls sequence is used to check the libc&amp;rsquo;s integrity against Frida but
at the end of the thread&amp;rsquo;s routine, we can observe these syscalls:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">0x048ff0: syscall: openat(0xffffffffffffff9c, &amp;#39;/proc/self/maps&amp;#39;): 51
0x04ae6c: syscall: read(51, 0x7ffc006578, 1): &amp;#39;1&amp;#39;
0x04ae6c: syscall: read(51, 0x7ffc006578, 1): &amp;#39;2&amp;#39;
0x04ae6c: syscall: read(51, 0x7ffc006578, 1): &amp;#39;c&amp;#39;
0x04ae6c: syscall: read(51, 0x7ffc006578, 1): &amp;#39;0&amp;#39;
0x04ae6c: syscall: read(51, 0x7ffc006578, 1): &amp;#39;0&amp;#39;
0x04ae6c: syscall: read(51, 0x7ffc006578, 1): &amp;#39;0&amp;#39;
0x04ae6c: syscall: read(51, 0x7ffc006578, 1): &amp;#39;0&amp;#39;
0x04ae6c: syscall: read(51, 0x7ffc006578, 1): &amp;#39;0&amp;#39;
...
0x0513f8: sscanf(&amp;#39;7fa65c0000-7fa65dc000 r-xp 00000000 08:07 1275/system/lib64/libc.so&amp;#39;, &amp;#39;%lx-%lx %s %s %s %s %s&amp;#39;)
0x056034: syscall: close(51)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The result of &lt;code>sscanf()&lt;/code> could be used to check the page permissions (e.g. &lt;code>r&lt;/code>&lt;span class="blue">w&lt;/span>&lt;code>xp&lt;/code>)
or to the libc&amp;rsquo;s base address (to check if it is consistent).&lt;/p>
&lt;h2 id="anti-root">Anti-Root&lt;/h2>
&lt;p>In addition to the root-beer detection, the library embeds another root detection located in the &lt;strong>second&lt;/strong> ELF constructor.
This constructor &amp;mdash; &lt;span class="yellow">sub_77D14&lt;/span> &amp;mdash; performs the same early checks as the first constructor
on the libc&amp;rsquo;s &lt;code>.plt&lt;/code> integrity before spawning another thread routine, &lt;span class="yellow">sub_98c00&lt;/span>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">0x08861c: pthread_create(0xfa780b70, 0x0, 0x98c00, 0x0)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="ctor_pthread.png" alt="ELF constructors: anti-frida and anti-root">&lt;/p>
&lt;p>By tracing the thread&amp;rsquo;s routine, we notice that it checks if &lt;code>su&lt;/code> files are present on the device through
three different calls:&lt;/p>
&lt;ol>
&lt;li>One call to &lt;code>open()&lt;/code>: &lt;span class="hl-literal">0x099180: open(&lt;span class="hl-strings">'/system/xbin/su'&lt;/span>)&lt;/span>&lt;/li>
&lt;li>One syscall to &lt;code>openat()&lt;/code>: &lt;span class="hl-literal">0x0992a4: syscall: openat(&amp;hellip;, &lt;span class="hl-strings">'/data/su'&lt;/span>)&lt;/span>&lt;/li>
&lt;li>One syscall to &lt;code>faccessat()&lt;/code>: &lt;span class="hl-literal">0x0993f0: syscall: faccessat(&lt;span class="hl-strings">'/sbin/su'&lt;/span>)&lt;/span>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">0x099180: open(&amp;#39;/data/local/su&amp;#39;): -1
0x0992a4: syscall: openat(0xffffffffffffff9c, &amp;#39;/data/local/su&amp;#39;): -2
0x0993f0: syscall: faccessat(&amp;#39;/data/local/su&amp;#39;): -2
0x099180: open(&amp;#39;/data/local/bin/su&amp;#39;): -1
0x0992a4: syscall: openat(0xffffffffffffff9c, &amp;#39;/data/local/bin/su&amp;#39;): -2
0x0993f0: syscall: faccessat(&amp;#39;/data/local/bin/su&amp;#39;): -2
0x099180: open(&amp;#39;/data/local/xbin/su&amp;#39;): -1
0x0992a4: syscall: openat(0xffffffffffffff9c, &amp;#39;/data/local/xbin/su&amp;#39;): -2
0x0993f0: syscall: faccessat(&amp;#39;/data/local/xbin/su&amp;#39;): -2
0x099180: open(&amp;#39;/sbin/su&amp;#39;): 51
0x0992a4: syscall: openat(0xffffffffffffff9c, &amp;#39;/sbin/su&amp;#39;): 52
0x0993f0: syscall: faccessat(&amp;#39;/sbin/su&amp;#39;): 52
Crash!
&lt;/code>&lt;/pre>&lt;/div>&lt;p>By forcing the results of these functions to &lt;code>-1&lt;/code> or &lt;code>-2&lt;/code>, we can disable the checks.&lt;/p>
&lt;p>Here is the list of the su-files that are used in this detection:&lt;/p>
&lt;ul>
&lt;li>&lt;span class="hl-strings">/data/local/su&lt;/span>&lt;/li>
&lt;li>&lt;span class="hl-strings">/data/local/bin/su&lt;/span>&lt;/li>
&lt;li>&lt;span class="hl-strings">/data/local/xbin/su&lt;/span>&lt;/li>
&lt;li>&lt;span class="hl-strings">/sbin/su&lt;/span>&lt;/li>
&lt;li>&lt;span class="hl-strings">/su/bin/su&lt;/span>&lt;/li>
&lt;li>&lt;span class="hl-strings">/system/bin/su&lt;/span>&lt;/li>
&lt;li>&lt;span class="hl-strings">/system/bin/.ext/su&lt;/span>&lt;/li>
&lt;li>&lt;span class="hl-strings">/system/bin/failsafe/su&lt;/span>&lt;/li>
&lt;li>&lt;span class="hl-strings">/system/sd/xbin/su&lt;/span>&lt;/li>
&lt;li>&lt;span class="hl-strings">/system/usr/we-need-root/su&lt;/span>&lt;/li>
&lt;li>&lt;span class="hl-strings">/system/xbin/su&lt;/span>&lt;/li>
&lt;li>&lt;span class="hl-strings">/cache/su&lt;/span>&lt;/li>
&lt;li>&lt;span class="hl-strings">/data/su&lt;/span>&lt;/li>
&lt;li>&lt;span class="hl-strings">/dev/su&lt;/span>&lt;/li>
&lt;/ul>
&lt;p>At the end of the thread&amp;rsquo;s routine, we can also observe the following calls that
are probably used to check if the application is running on a real Android system.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">0x099e30: syscall: faccessat(&amp;#39;/system&amp;#39;)
0x099e30: syscall: faccessat(&amp;#39;/system/bin&amp;#39;)
0x099e30: syscall: faccessat(&amp;#39;/system/sbin&amp;#39;)
0x099e30: syscall: faccessat(&amp;#39;/system/xbin&amp;#39;)
0x099e30: syscall: faccessat(&amp;#39;/vendor/bin&amp;#39;)
0x099e30: syscall: faccessat(&amp;#39;/sbin&amp;#39;)
0x099e30: syscall: faccessat(&amp;#39;/etc&amp;#39;)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="static-bypass-with-lief">Static bypass with LIEF&lt;/h2>
&lt;p>In the previous sections, we described the anti-root, anti-debug and anti-frida checks
made in the ELF constructors. The &lt;strong>same&lt;/strong> dynamic checks are also performed in the &lt;code>gXftm3iswpkVgBNDUp&lt;/code> function
at the following locations:&lt;/p>
&lt;ul>
&lt;li>&lt;span class="hl-keyword">0x09f2f8&lt;/span>: &lt;span class="hl-literal">/proc/self/status&lt;/span>&lt;/li>
&lt;li>&lt;span class="hl-keyword">0x0d4840&lt;/span>: &lt;span class="hl-literal">/proc/self/fd/&lt;/span>&lt;/li>
&lt;li>&lt;span class="hl-keyword">0x0dec8c&lt;/span>: &lt;span class="hl-literal">/proc/self/task/&amp;lt;tid&amp;gt;/status&lt;/span>&lt;/li>
&lt;/ul>
&lt;p>While the checks in &lt;code>gXftm3iswpkVgBNDUp&lt;/code> can be dynamically disabled when instrumenting the function,
the checks in the ELF constructors are annoying.&lt;/p>
&lt;p>One way to disable the checks in the thread&amp;rsquo;s routines is to disable the &lt;code>pthread_create(...)&lt;/code>. It can
be achieved by patching the &lt;code>.plt&lt;/code> entry associated with the function:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-armasm" data-lang="armasm">mov x0, xzr;
ret;
&lt;/code>&lt;/pre>&lt;p>Thanks to &lt;code>llvm-mc&lt;/code>, we can get the raw bytes of these instructions:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-console" data-lang="console">$ echo &amp;quot;mov x0, xzr;ret;&amp;quot;|llvm-mc -arch=aarch64 -show-encoding
.text
mov x0, xzr // encoding: [0xe0,0x03,0x1f,0xaa]
ret // encoding: [0xc0,0x03,0x5f,0xd6]
&lt;/code>&lt;/pre>&lt;p>Finally, we can patch the &lt;code>.plt&lt;/code> with
&lt;a href="https://lief.quarkslab.com" target="_blank" rel="noopener">LIEF&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">lief&lt;/span>
&lt;span class="n">lib&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;./libnative-lib.so&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">lib&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">patch_address&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x5870&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">0xe0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x03&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x1f&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xaa&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="n">lib&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">patch_address&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x5874&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">0xc0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x03&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x5f&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0xd6&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="n">lib&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;./libnative-lib-patched.so&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="patching.png" alt="pthread_create patches">&lt;/p>
&lt;p>Using these patches and the Frida script exposed in the first section, we are able to &lt;strong>load&lt;/strong> the application but the other
detections are triggered in &lt;code>gXftm3iswpkVgBNDUp&lt;/code>. Nevertheless, with
the Frida&amp;rsquo;s stalker or QBDI we can trace the instructions and disable the other checks.&lt;/p>
&lt;p>If one wants to completely bypass all the protections statically, here are the patches:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">lief&lt;/span>
&lt;span class="n">lib&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;./libnative-lib.so&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Keys are str objects for a better understanding :)&lt;/span>
&lt;span class="n">INST&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="s2">&amp;#34;mov x0, #0&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">0xe0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x03&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x1f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xaa&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="s2">&amp;#34;ret&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">0xc0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x03&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x5f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xd6&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="s2">&amp;#34;nop&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">0x1f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x20&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x03&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xd5&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">PATCHES&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="c1"># Patch the .plt entry of pthread_create&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="mh">0x5870&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">INST&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;mov x0, #0&amp;#34;&lt;/span>&lt;span class="p">]),&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="mh">0x5874&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">INST&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;ret&amp;#34;&lt;/span>&lt;span class="p">]),&lt;/span>
&lt;span class="c1"># Disable anti-frida checks&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="mh">0x0d718c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">INST&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;mov x0, #0&amp;#34;&lt;/span>&lt;span class="p">]),&lt;/span> &lt;span class="c1"># /proc/self/fd : patch the result of readlinkat syscall&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="mh">0x0e1940&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">INST&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;mov x0, #0&amp;#34;&lt;/span>&lt;span class="p">]),&lt;/span> &lt;span class="c1"># /proc/self/task/&amp;lt;tid&amp;gt;/status: patch the result of read syscall&lt;/span>
&lt;span class="c1"># Disable .text integrity checks&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="mh">0xB64D0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">INST&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;nop&amp;#34;&lt;/span>&lt;span class="p">]),&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">patch&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">PATCHES&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">lib&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">patch_address&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">patch&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">lib&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;libnative-lib.so&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When writing this write-up, I realized that patching the syscalls involved in the anti-frida (&lt;span class="hl-literal">/proc/self/fd/&lt;/span> and &lt;span class="hl-literal">/proc/self/task/&amp;lt;tid&amp;gt;/status&lt;/span>)
makes the application crash.&lt;/p>
&lt;p>It turns out that the library seems to implement &lt;strong>code integrity on the &lt;code>.text&lt;/code> section&lt;/strong> that I didn&amp;rsquo;t notice when running
the function through QBDI.
Nevertheless, by tracing the basic block&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>
we can identify the basic block involved in the integrity check and patch it.&lt;/p>
&lt;p>&lt;img src="code_integrity.png" alt="Code integrity patches">&lt;/p>
&lt;div class="alert alert-note">
&lt;div>
The scripts and the patched library are available &lt;a href="https://github.com/romainthomas/r2pay">here &lt;i class="fab fa-github">&lt;/i>&lt;/a>.
&lt;/div>
&lt;/div>
&lt;p>Regarding &lt;code>JNI_OnLoad()&lt;/code>, a trace generated with
&lt;a href="https://github.com/QBDI/examples/blob/d589d28b237f46d16cab3b11aa36bbb51102e307/packer-android-x86/src/libshellx_qbdi.cpp#L18-L85" target="_blank" rel="noopener">QBDI&amp;rsquo;s ExecBroker&lt;/a>
leads to following result:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">JNI_OnLoad&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="mh">0x09af3c&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">GetEnv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x7fcb507460&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x10006&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="mh">0x09b0ac&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">FindClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;re/pwnme/MainActivity&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">537&lt;/span>
&lt;span class="mh">0x09b1b4&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">RegisterNatives&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">gXftm3iswpkVgBNDUp&lt;/span> &lt;span class="p">([&lt;/span>&lt;span class="n">BB&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="n">B&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="s">&amp;#34;libnative-lib.so@0x9b41c&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, we can extract the function&amp;rsquo;s offset: &lt;span class="blue">gXftm3iswpkVgBNDUp&lt;/span>: &lt;span class="red">0x9b41c&lt;/span>.&lt;/p>
&lt;h2 id="summary--conclusion">Summary &amp;amp; Conclusion&lt;/h2>
&lt;p>Whilst Frida detections are usually based on sockets and library names in &lt;code>/proc/self/maps&lt;/code>,
this challenge introduces two detections based on named pipes:&lt;code>/proc/self/fd&lt;/code> and thread status: &lt;code>/proc/self/task/&amp;lt;tid&amp;gt;/status&lt;/code>
which are pretty cool :-)&lt;/p>
&lt;p>These checks are performed in two locations:&lt;/p>
&lt;ol>
&lt;li>The ELF constructors&lt;/li>
&lt;li>The function &lt;code>gXftm3iswpkVgBNDUp()&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>The implementation in the ELF constructors might be tricky to analyse since the functions are called before &lt;strong>any&lt;/strong>
other classical functions (which includes &lt;code>JNI_OnLoad()&lt;/code>). Nevertheless, thanks to the interface of the ELF loader,
it exposes the function &lt;code>call_array(...)&lt;/code>&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> which is handy to process the ELF constructors.&lt;/p>
&lt;div class="alert alert-note">
&lt;div>
This function is mangled as &lt;code>__dl__ZL10call_arrayIPFviPPcS1_EEvPKcPT_mbS5_&lt;/code> in &lt;code>/system/bin/linker64&lt;/code>
&lt;/div>
&lt;/div>
&lt;p>&lt;img src="protection_overview.png" alt="Overview of the anti-root and anti-frida">&lt;/p>
&lt;p>Since QBDI is not detected in this challenge, it&amp;rsquo;s a good opportunity to give it a try:&lt;/p>
&lt;center>&lt;i class="fab fa-github">&lt;/i> &lt;a href="https://github.com/QBDI/QBDI">https://github.com/QBDI/QBDI&lt;/a>&lt;/center>
&lt;h2 id="acknowledgments">Acknowledgments&lt;/h2>
&lt;p>Thanks to &lt;u>Eduardo Novella&lt;/u> (
&lt;a href="https://twitter.com/enovella_" target="_blank" rel="noopener">@enovella_&lt;/a>)
and &lt;u>Gautam Arvind&lt;/u> (
&lt;a href="https://twitter.com/darvincisec" target="_blank" rel="noopener">@darvincisec&lt;/a>) for this interesting and realistic challenge they created!&lt;/p>
&lt;p>Also thanks to &lt;u>
&lt;a href="https://www.quarkslab.com" target="_blank" rel="noopener">Quarkslab&lt;/a>&lt;/u> that allowed this publication.
For those who are interested in similar topics, you can take a look at the Quarkslab&amp;rsquo;s
&lt;a href="https://blog.quarkslab.com/" target="_blank" rel="noopener">blog&lt;/a>.&lt;/p>
&lt;h3 id="references">References&lt;/h3>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>
&lt;a href="https://github.com/GoSSIP-SJTU/Armariris" target="_blank" rel="noopener">GoSSIP-SJTU/Armariris&lt;/a> -
&lt;a href="https://github.com/GoSSIP-SJTU/Armariris/blob/0cba41329244a29c7cb94e25458191b68967b6e8/lib/Transforms/Obfuscation/StringObfuscation.cpp#L140" target="_blank" rel="noopener">&lt;code>StringObfuscation.cpp#L140&lt;/code>&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>
&lt;a href="https://developer.android.com/training/articles/perf-jni#native-libraries" target="_blank" rel="noopener">https://developer.android.com/training/articles/perf-jni#native-libraries&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>
&lt;a href="https://github.com/QBDI/QBDI/blob/a20653f07df3ae78250e7ecf28ed699b2d727027/include/QBDI/VM.h#L296-L305" target="_blank" rel="noopener">&lt;code>addVMEventCB(VMEvent::BASIC_BLOCK_ENTRY, ...);&lt;/code>&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>
&lt;a href="https://android.googlesource.com/platform/bionic/&amp;#43;/refs/tags/android-9.0.0_r60/linker/linker_soinfo.cpp#420" target="_blank" rel="noopener">&lt;code>linker/linker_soinfo.cpp:420&lt;/code>&lt;/a>&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>A Glimpse Into Tencent's Legu Packer</title><link>https://www.romainthomas.fr/post/a-glimpse-into-tencents-legu-packer/</link><pubDate>Tue, 26 Nov 2019 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/post/a-glimpse-into-tencents-legu-packer/</guid><description>&lt;style>
.packedfile {
color:green;
font-family: 'Lucida Console', monospace;
}
.keyfile {
color: blue;
font-family: 'Lucida Console', monospace;
}
.libshell {
color: #FF6347;
font-family: 'Lucida Console', monospace;
}
.tencentclass {
color: #df2b04;
font-family: 'Lucida Console', monospace;
}
&lt;/style>
&lt;div class="alert alert-note">
&lt;div>
This post has been originally posted on the &lt;a href=https://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html>Quarkslab&amp;rsquo;s Blog&lt;/a>
&lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This blog post deals with the Legu packer, an Android protector developed by Tencent that is currently one of the
state-of-the-art solutions to protect APK DEX files. The packer is updated frequently and this blog post focuses on
versions &lt;code>4.1.0.15&lt;/code> and &lt;code>4.1.0.18&lt;/code>.&lt;/p>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>An application protected with Legu is composed of two native libraries: &lt;span class="libshell">libshell-super.2019.so&lt;/span>
and &lt;code>libshella-4.1.0.XY.so&lt;/code> as well as raw binary files embedded in the resources of the APK:&lt;/p>
&lt;ul>
&lt;li>&lt;span class="keyfile">tosversion&lt;/span>&lt;/li>
&lt;li>&lt;span class="packedfile">0OO00l111l1l&lt;/span>&lt;/li>
&lt;li>&lt;code>0OO00oo01l1l&lt;/code>&lt;/li>
&lt;li>&lt;code>o0oooOO0ooOo.dat&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>The main logic of the packer is located in the native library &lt;span class="libshell">libshell-super.2019.so&lt;/span> which basically
unpacks and loads the protected DEX files from the resources.&lt;/p>
&lt;p>Some functions of the library are obfuscated but thanks to Frida/QBDI their analysis is not a big deal.&lt;/p>
&lt;h2 id="internals">Internals&lt;/h2>
&lt;p>Basically, the original DEX files are located in the &lt;span class="packedfile">assets/0OO00l111l1l&lt;/span> file along with the information required to
unpack them.&lt;/p>
&lt;p>The following figure lays out the structure of this file.&lt;/p>
&lt;p>&lt;img src="packed_file.png" alt="">&lt;/p>
&lt;p>In the &lt;span class="packedfile">assets/0OO00l111l1l&lt;/span> file, the first part contains the original DEX files with the same number of &lt;code>classes&amp;lt;N&amp;gt;.dex&lt;/code> according to the multi-DEX feature of the original APK. These
DEX files are not exactly the original ones, as their Dalvik bytecode have been &lt;em>NOP-ed&lt;/em> by Legu.
Therefore, a dump of these files only gives information about the classes' names, not the code logic:&lt;/p>
&lt;p>&lt;img src="noped.png" alt="">&lt;/p>
&lt;p>Then follows what we called a &lt;em>hashmap&lt;/em> that is used to link a class name (e.g. &lt;span class="tencentclass">Lcom/tencent/mmkv/MMKV;&lt;/span>) to an offset in
the data block located in the third part of the file.
This data block contains the original Dalvik bytecode of the methods.&lt;/p>
&lt;p>Actually, the first part that contains the altered DEX files, is compressed with &lt;strong>NRV&lt;/strong> &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.
The second part — the hashmap — is also compressed with NRV but the packer adds a layer of
encryption through a slightly modified version of &lt;strong>XTEA&lt;/strong> &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>. Finally, the last part is compressed and encrypted with the
same algorithms as the previous one.&lt;/p>
&lt;p>Regarding the &lt;em>hashmap&lt;/em>, it uses a custom structure that has been reversed and lead to a Kaitai structure available
here:
&lt;a href="https://github.com/quarkslab/legu_unpacker_2019/blob/master/legu_packed_file.ksy" target="_blank" rel="noopener">legu_packed_file.ksy&lt;/a>,
&lt;a href="https://github.com/quarkslab/legu_unpacker_2019/blob/master/legu_hashmap.ksy" target="_blank" rel="noopener">legu_hashmap.ksy&lt;/a>&lt;/p>
&lt;p>Its overall layout is exposed in the next figure:&lt;/p>
&lt;p>&lt;img src="hashmap.png" alt="">&lt;/p>
&lt;h2 id="unpacking-process">Unpacking process&lt;/h2>
&lt;p>Let&amp;rsquo;s say that the application needs to use the packed Java class &lt;span class="tencentclass">Lcom/tencent/mmkv/MMKV;&lt;/span>.&lt;/p>
&lt;p>First, the packer&amp;rsquo;s runtime transforms the class name into an integer with the &lt;code>dvmComputeUtf8Hash()&lt;/code> hash function &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>. This integer is then used
as an index into the &lt;em>hashmap&lt;/em> whose value is a structure that contains information about the class in the packed data (blue area in
the figure). The first attribute of this structure — &lt;code>utf8_hash&lt;/code> — is a copy of the hash value which is used to check that it is the right key/value association.&lt;/p>
&lt;p>The &lt;code>class_info&lt;/code> structure (blue block in the figure) next contains the packed method information (yellow area in the figure) whose size is the same as the original number of
methods in the class. This structure makes the relationship between the NOP-ed bytecode offset in the altered DEX
files and the offset in the original bytecode (red block).
Finally, the packer copies the original bytecode into the altered DEX files.&lt;/p>
&lt;p>To summarize, the first part contains the original DEX files with the Dalvik bytecode removed (&lt;em>NOP-ed&lt;/em>).
The last part contains the missing Dalvik bytecode and the second part makes the
bridge between the altered DEX files and the Dalvik bytecode.&lt;/p>
&lt;h1 id="compression--encryption">Compression &amp;amp; Encryption&lt;/h1>
&lt;p>To decrypt the hashmap and the Dalvik bytecode, the packer uses the first 16 bytes of &lt;span class="keyfile">assets/tosversion&lt;/span>
xored with a hard-coded key: &lt;code>^hHc7Ql]N9Z4:+1m~nTcA&amp;amp;3a7|?GB1z@&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">LIB_KEY&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s2">&amp;#34;^hHc7Ql]N9Z4:+1m~nTcA&amp;amp;3a7|?GB1z@&amp;#34;&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">key_derivation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x1&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">x2&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">x1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x2&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">zip&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LIB_KEY&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cycle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, it uses a slightly modified version of XTEA that is given in the next listing:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="kt">int&lt;/span> &lt;span class="nf">xtea_decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">uint32_t&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">uint32_t&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">ilen&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">nb_round&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ilen&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">key_off&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ilen&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">static&lt;/span> &lt;span class="k">constexpr&lt;/span> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">DELTA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x9e3779b9&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">key_0&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key_off&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">key_1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key_off&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="n">key_0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="n">key_1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">DELTA&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">nb_round&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">temp0&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">temp1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">nb_round&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">temp1&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">temp0&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">temp0&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">temp0&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">temp0&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">temp1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">temp1&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">temp1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">sum&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="n">DELTA&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">temp0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">temp1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After the decryption routine, the packer decompresses the data with &lt;code>NRV&lt;/code>, the same algorithm used to compress the altered DEX
files:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">key_derivation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;assets/tosversion&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;rb&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">()[:&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">nb_dex_files&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">hashmap&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nrv_decompress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">xtea_decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">blob1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">dalvik_bytecodes&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nrv_decompress&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">xtea_decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">blob2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="unpacking">Unpacking&lt;/h2>
&lt;p>Putting all the pieces together, we can &lt;strong>statically&lt;/strong> unpack protected APKs and recover the original bytecode:&lt;/p>
&lt;p>&lt;img src="unpacked.png" alt="">&lt;/p>
&lt;p>Hence, as we can automatically unpack such APKs, the unpacking process could be integrated into an automatic analysis pipeline.&lt;/p>
&lt;p>The script and the Kaitai structures are available on the Quarkslab&amp;rsquo;s repository:
&lt;a href="https://github.com/quarkslab/legu_unpacker_2019" target="_blank" rel="noopener">legu_unpacker_2019&lt;/a>,
along with a suspicious application &lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>,
&lt;a href="https://github.com/quarkslab/legu_unpacker_2019/blob/master/samples/com.intotherain.voicechange.apk" target="_blank" rel="noopener">packed&lt;/a> and
&lt;a href="https://github.com/quarkslab/legu_unpacker_2019/blob/master/samples/com.intotherain.voicechange_unpacked.apk" target="_blank" rel="noopener">unpacked&lt;/a>.&lt;/p>
&lt;h2 id="acknowledgments">Acknowledgments&lt;/h2>
&lt;p>Thanks to my colleagues who proofread this article.&lt;/p>
&lt;h3 id="references">References&lt;/h3>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>
&lt;a href="http://www.oberhumer.com/opensource/ucl/" target="_blank" rel="noopener">http://www.oberhumer.com/opensource/ucl/&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>
&lt;a href="https://en.wikipedia.org/wiki/XTEA" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/XTEA&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>
&lt;a href="http://androidxref.com/4.4.4_r1/xref/dalvik/vm/UtfString.cpp#88" target="_blank" rel="noopener">http://androidxref.com/4.4.4_r1/xref/dalvik/vm/UtfString.cpp#88&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>
&lt;a href="https://www.virustotal.com/gui/file/708e6967920dcf2789b7183d714e73ab79a2f8b3ca71929b12aadeb2c58c2867/detection" target="_blank" rel="noopener">https://www.virustotal.com/gui/file/708e6967920dcf2789b7183d714e73ab79a2f8b3ca71929b12aadeb2c58c2867/detection&lt;/a>&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Android Native Library Analysis with QBDI</title><link>https://www.romainthomas.fr/post/android-native-library-analysis-with-qbdi/</link><pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/post/android-native-library-analysis-with-qbdi/</guid><description>&lt;div class="alert alert-note">
&lt;div>
This post has been originally posted on the &lt;a href=https://blog.quarkslab.com/android-native-library-analysis-with-qbdi.html>Quarkslab&amp;rsquo;s Blog&lt;/a>
&lt;/div>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>During the past few months we improved the ARM support in QBDI. More precisely, we enhanced the QBDI&amp;rsquo;s engine
to support Thumb and Thumb2 instructions as well as Neon registers.&lt;/p>
&lt;p>Development is still in progress and we need to clean the code and add non-regression tests
compared to the x86-64 support.&lt;/p>
&lt;p>To add Thumb and Thumb2 support, we tested the DBI against well-known obfuscators such as
&lt;a href="https://epona.quarkslab.com" target="_blank" rel="noopener">Epona&lt;/a>,
&lt;a href="https://github.com/obfuscator-llvm/obfuscator" target="_blank" rel="noopener">O-LLVM&lt;/a>
or
&lt;a href="https://www.arxan.com/" target="_blank" rel="noopener">Arxan&lt;/a>, as we could expect good instruction coverage, corner cases and nice use cases.
The native code came from Android JNI libraries embedded in different APKs.&lt;/p>
&lt;p>This blog post introduces some QBDI features that could be useful to assess native code
and speedup reverse engineering.
To expose these features, we analyzed an Android SDK that aims to protect applications against API misuse.&lt;/p>
&lt;h2 id="dynamic-instrumentation-on-android">Dynamic Instrumentation on Android&lt;/h2>
&lt;p>
&lt;a href="https://www.frida.re/" target="_blank" rel="noopener">Frida&lt;/a> is one of the Android day-to-day dynamic instrumentation framework widely
used to instrument applications.
It can address both native code with inline hooking and &lt;em>Java&lt;/em> side thanks to ART instrumentation &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Frida works at the function level and in some cases we may need to have a finer granularity
at the basic-block level or at the instruction level (i.e. have &lt;em>hooks&lt;/em> on instructions)&lt;/p>
&lt;p>To address this limitation, one trick commonly used is to combine hooking with emulation.
One can use Frida to hook the function that we are interested in, then we can dump the CPU context
and the memory state of the process and eventually continue the execution through an emulator like
&lt;a href="https://miasm.re/blog/" target="_blank" rel="noopener">Miasm&lt;/a>
or
&lt;a href="https://www.unicorn-engine.org/" target="_blank" rel="noopener">Unicorn&lt;/a>&lt;/p>
&lt;p>This approach works pretty well but has a few limitations:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Speed&lt;/strong>: For large sets of functions.&lt;/li>
&lt;li>&lt;strong>External calls&lt;/strong>: One needs to mock external calls behavior (e.g. &lt;code>strlen&lt;/code>, &lt;code>malloc&lt;/code>, &amp;hellip;).&lt;/li>
&lt;li>&lt;strong>Some behaviors can be difficult to emulate&lt;/strong>: Thread, Android internal frameworks, &amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>Moreover, while it is quite simple to mock the behavior of &lt;code>strlen&lt;/code>, it may be more challenging to mock
JNI functions behavior like &lt;code>FindClass()&lt;/code>, &lt;code>GetMethodID()&lt;/code>, &lt;code>RegisterNatives()&lt;/code>, &amp;hellip;&lt;/p>
&lt;p>The design of QBDI provides a good trade-off between full instrumentation and partial emulation thanks to
the &lt;code>ExecBrocker&lt;/code> that enables to switch between instrumented code — our function — and non-instrumented
code: &lt;code>strlen()&lt;/code>, &lt;code>FindClass()&lt;/code>, &lt;code>pthread_call_once()&lt;/code>, &amp;hellip;&lt;/p>
&lt;p>This diagram represents the instrumentation flow for the different scenarios:&lt;/p>
&lt;p>&lt;img src="qbdi_flow.png" alt="">&lt;/p>
&lt;p>For those who are interested in QBDI internals you can look at the 34C3 talk by Charles and Cédric &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.
There are also examples in the GitHub repository &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>To summarize, we can bootstrap QBDI as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="c1">// QBDI main interface
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">QBDI&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">VM&lt;/span> &lt;span class="n">vm&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// QBDI CPU state for GPR registers
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">GPRState&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getGPRState&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// Setup virtual stack
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">uint8_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fakestack&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">QBDI&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">allocateVirtualStack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* size */&lt;/span>&lt;span class="mh">0x100000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">fakestack&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// {
&lt;/span>&lt;span class="c1">// Setup instrumentation ranges, callbacks etc, ...
&lt;/span>&lt;span class="c1">// }
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// Start Instrumentation:
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">uintptr_t&lt;/span> &lt;span class="n">retval&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">bool&lt;/span> &lt;span class="n">ok&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">retval&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* Address of the function to instrument */&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Instrumentation Finished
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="sdk-overview">SDK Overview&lt;/h2>
&lt;p>Among the QBDI tests, we analyzed an SDK that aims to protect applications against API abuses.
This kind of protection is used to protect API endpoints against illegitimate uses: emulator, bots, &amp;hellip;&lt;/p>
&lt;p>To protect the main application, the solution collects information about the device state: rooted, debugged,
custom, then encodes this information with a &lt;em>proprietary&lt;/em> algorithm and sends the encoded data to a server.&lt;/p>
&lt;p>The &lt;strong>server&lt;/strong> decodes the information sent by the device collector, performs analyses to check the device
integrity and sends back a token that handles the information about whether the device is corrupted or not.&lt;/p>
&lt;p>The following figure summarizes this process:&lt;/p>
&lt;p>&lt;img src="overview.png" alt="">&lt;/p>
&lt;p>Such architecture is robust and similar to the one in
&lt;a href="https://developer.android.com/training/safetynet/attestation" target="_blank" rel="noopener">Safetynet&lt;/a> &lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>. On the other hand,
the SDK has fewer permissions than Safetynet, therefore it cannot collect as much data about
the device as SafetyNet does.&lt;/p>
&lt;p>We started the analysis by monitoring the network traffic between the SDK and its server. At some point,
we can observe the following request:&lt;/p>
&lt;p>&lt;img src="network.png" alt="">&lt;/p>
&lt;p>It is JSON encoded and the characters that look like random values are the encoded information sent
by the device collector.&lt;/p>
&lt;p>The analysis of the SDK aims to address these questions:&lt;/p>
&lt;ul>
&lt;li>How the SDK checks if the device is rooted or not ?&lt;/li>
&lt;li>How the SDK detects if the application is being debugged ?&lt;/li>
&lt;li>What kind of information is collected from the device and how it is encoded ?&lt;/li>
&lt;/ul>
&lt;p>After a look at the Java layer, we found that the logic of the solution is implemented
in a JNI library that will be named &lt;code>libApp.so&lt;/code> &lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>. The library exposes the following JNI functions:&lt;/p>
&lt;p>! 
&lt;a href="exports.png">&lt;/a>&lt;/p>
&lt;p>With static analysis, we can identify that the function &lt;code>Java_XXX_JNIWrapper_ca3_14008()&lt;/code> is the one
involved in the generation of the sequence &lt;code>&amp;quot;QJRR{JJJGQJ~|MJJJ...&amp;quot;&lt;/code>. It returns the encoded data as a
&lt;code>java.lang.String&lt;/code> and takes two parameters that are not mandatory: &lt;code>bArr&lt;/code>, &lt;code>iArr&lt;/code> &lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>&lt;img src="java.png" alt="">&lt;/p>
&lt;p>The library as a whole is not especially obfuscated. Nonetheless, we find strings encoding
and syscall replacement on well-known &lt;code>libc&lt;/code> functions:&lt;/p>
&lt;ul>
&lt;li>&lt;code>read&lt;/code>&lt;/li>
&lt;li>&lt;code>openat&lt;/code>&lt;/li>
&lt;li>&lt;code>close&lt;/code>&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>This technique is commonly used to avoid hooking but the fact is that the given syscalls are wrapped
in functions that are not inlined. Hence, one can hook the functions that wrap
the associated syscall.&lt;/p>
&lt;h2 id="get-started-with-qbdi">Get Started with QBDI&lt;/h2>
&lt;p>In order to fully understand the logic of this function, we instrumented the function through QBDI &lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup> associated
with a set of instrumentation callbacks.&lt;/p>
&lt;p>These callbacks aim to provide different kinds of information that will be useful to the analyst to understand the
function logic. For instance, we can setup a first callback that records
all the syscall instructions, we can also add a callback that records memory access.&lt;/p>
&lt;p>The purpose of this blog post is to show how few — but well chosen — callbacks enable to understand the
logic of the function.&lt;/p>
&lt;p>First of all, the native library embedded in the SDK can be loaded outside of the original APK using
&lt;code>dlopen()&lt;/code> / &lt;code>dlsym()&lt;/code>.
Moreover, one can instantiate a JVM thanks to the ART runtime (&lt;code>libart.so&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">**&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">static&lt;/span> &lt;span class="k">constexpr&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">TARGET_LIB&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;libApp.so&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">hdl&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">dlopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TARGET_LIB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RTLD_NOW&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="n">jni_func_t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jstring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">JNIEnv&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="cm">/* Other parameters are not required */&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">jni_func&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">jni_func_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dlsym&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hdl&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Java_XXX_JNIWrapper_ca3_14008&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">JavaVM&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">jvm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">JNIEnv&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">ART_Kitchen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jvm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// Instantiate the JVM and initialize the jvm and env pointers
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>At this point, the &lt;code>jni_func()&lt;/code> function is tied to &lt;code>Java_XXX_JNIWrapper_ca3_14008&lt;/code> and ready to be
executed in &lt;code>main()&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">jstring&lt;/span> &lt;span class="n">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jni_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">cstring&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetStringUTFChars&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">console&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Real Output: {}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cstring&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="real_output.png" alt="">&lt;/p>
&lt;p>The output seems consistent with the network capture and the value &lt;code>&amp;quot;root: 1&amp;quot;&lt;/code> too since we are on a rooted device &lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup>&lt;/p>
&lt;p>Now, let&amp;rsquo;s run the function through QBDI:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">console&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Initializing VM ...&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">QBDI&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">VM&lt;/span> &lt;span class="n">vm&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">GPRState&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getGPRState&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kt">uint8_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fakestack&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">QBDI&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">allocateVirtualStack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x100000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">fakestack&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">console&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Instument module: {}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TARGET_LIB&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">addInstrumentedModule&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TARGET_LIB&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">console&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Simulate call in QBDI&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">jstring&lt;/span> &lt;span class="n">dbioutput&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">bool&lt;/span> &lt;span class="n">ok&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">dbioutput&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">rword&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jni_func&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">rword&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="p">)});&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ok&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">dbioutput&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">console&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;DBI output {:x}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetStringUTFChars&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dbioutput&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This code provides the following output:&lt;/p>
&lt;p>&lt;img src="dbi_output.png" alt="">&lt;/p>
&lt;p>Everything looks good, QBDI managed to &lt;strong>fully&lt;/strong> instrument the function (which includes ARM / Thumb switch)
and the result is similar to the real execution.&lt;/p>
&lt;h1 id="analysis">Analysis&lt;/h1>
&lt;p>Now that we are able to run and instrument the function,
we can start to add instrumentation callbacks to analyze its behavior.&lt;/p>
&lt;p>One of the first callbacks that is useful to setup is a callback that instruments syscall
instructions (i.e. &lt;code>svc #0&lt;/code>). To do so, we can use the &lt;code>vm.addSyscallCB(position, callback, data)&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>position&lt;/strong> - It stands for the position of the callback: Before or after the syscall.&lt;/li>
&lt;li>&lt;strong>callback&lt;/strong> - The callback itself.&lt;/li>
&lt;li>&lt;strong>data&lt;/strong> - Pointer to user data (e.g. user context that register dynamic information)&lt;/li>
&lt;/ul>
&lt;p>It leads to the following piece of code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">auto&lt;/span> &lt;span class="n">syscall_enter_cbk&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">VMInstanceRef&lt;/span> &lt;span class="n">vm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GPRState&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">gprState&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">FPRState&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fprState&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="n">InstAnalysis&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">analysis&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vm&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getInstAnalysis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ANALYSIS_INSTRUCTION&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">ANALYSIS_DISASSEMBLY&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">rword&lt;/span> &lt;span class="n">syscall_number&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gprState&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">r7&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="cm">/*
&lt;/span>&lt;span class="cm"> * std::string sys_str = lookup[syscall_number]; // Lookup table that convert syscall number to function
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="n">console&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;0x{:06x} {} ({})&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">addr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">analysis&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">disassembly&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sys_str&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">VMAction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">CONTINUE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">addSyscallCB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PREINST&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">syscall_enter_cbk&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* data */&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Before any syscall instructions, we perform a basic lookup on the syscall number stored in the &lt;strong>R7&lt;/strong> register
to resolve its name.&lt;/p>
&lt;p>It results in the following output:&lt;/p>
&lt;p>&lt;img src="syscall.1.png" alt="">&lt;/p>
&lt;p>Since we are able to resolve syscall numbers into function names, we can improve the logic of callback
to dispatch and print function parameters:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">auto&lt;/span> &lt;span class="n">syscall_enter_cbk&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span> &lt;span class="p">(...)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="cm">/*
&lt;/span>&lt;span class="cm"> * Lookup table (syscall number, function pointer)
&lt;/span>&lt;span class="cm"> * {
&lt;/span>&lt;span class="cm"> * 322 -&amp;gt; on_openat
&lt;/span>&lt;span class="cm"> * }
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">function_wrapper&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">func_lookup&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">syscall_number&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nf">function_wrapper&lt;/span>&lt;span class="p">(...)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Wrapper for openat syscall
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">VMAction&lt;/span> &lt;span class="n">on_openat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">VMInstanceRef&lt;/span> &lt;span class="n">vm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GPRState&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">gprState&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gprState&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">r1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">console&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;openat({})&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">VMAction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">CONTINUE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>By doing so on the common syscalls number, we get this new trace:&lt;/p>
&lt;p>&lt;img src="syscall.2.png" alt="">&lt;/p>
&lt;p>Based on this output, we can figure out how root check (orange area) is done. It is performed by checking
the existence of the following binaries:&lt;/p>
&lt;ul>
&lt;li>/system/bin/su&lt;/li>
&lt;li>/system/xbin/su&lt;/li>
&lt;li>/sbin/su&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>The function also checks if some directories are present on the device (&lt;code>faccessat&lt;/code> syscall):&lt;/p>
&lt;ul>
&lt;li>/data&lt;/li>
&lt;li>/tmp&lt;/li>
&lt;li>/system&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>Especially, it would be suspicious if the directory &lt;code>/tmp&lt;/code> were present on the &lt;em>device&lt;/em> while it is standard to
have &lt;code>/system&lt;/code> and &lt;code>/data&lt;/code> directories.&lt;/p>
&lt;p>Regarding the debug state of the process (blue area), it is done by looking at &lt;code>/proc/self/status&lt;/code>. After
analysis, the function checks the &lt;code>TracerPID&lt;/code> attribute
(cf
&lt;a href="https://www.vantagepoint.sg/blog/89-more-android-anti-debugging-fun" target="_blank" rel="noopener">More Android Anti-Debugging Fun - B. Mueller&lt;/a>)&lt;/p>
&lt;p>Finally, the function processes the output of &lt;code>/proc/self/maps&lt;/code> right before to returning the encoded values.
It suggests that the data collected by the solution are based on this resource.&lt;/p>
&lt;h3 id="encoding-routine">Encoding Routine&lt;/h3>
&lt;p>In the previous part we got a global overview about how the solution achieves root detection,
debug detection and what kind of data is collected (i.e. process memory map).&lt;/p>
&lt;p>However, some questions are pending:&lt;/p>
&lt;ul>
&lt;li>What part of the process memory map is used: Base addresses ? Module paths ? Permissions ?&lt;/li>
&lt;li>How the data are encoded (i.e. how &lt;code>QJRR{JJJGQJ~|MJJJ...&lt;/code> is generated) ?&lt;/li>
&lt;/ul>
&lt;p>Along with the QBDI ARM support, we also added ARM support to resolve &lt;strong>memory addresses&lt;/strong> during the
instrumentation.
It means that QBDI is now able to resolve &lt;strong>the effective memory address&lt;/strong> of instructions such as:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-armasm" data-lang="armasm">LDR R0, [R1, R2]; # Resolve R1 + R2
STR R1, [R2, R3, LSL #2]; # Resolve R2 + R3 * 4
LDRB [PC, #4]; # Resolve **real** PC + 4
&lt;/code>&lt;/pre>&lt;p>Moreover, QBDI is also able to get &lt;strong>the effective memory value&lt;/strong> that is read or written. This feature
is quite useful in the case of conditional instructions such as:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-armasm" data-lang="armasm">ITT LS;
LDRLS R0, [R4];
LDRLS R1, [R0, #4]
&lt;/code>&lt;/pre>&lt;p>The &lt;strong>effective&lt;/strong> value of &lt;code>R0&lt;/code> and &lt;code>R1&lt;/code> is stored in QBDI. It may not be
&lt;code>*(r4)&lt;/code> and &lt;code>*(r0 + 4)&lt;/code> since the &lt;code>LS&lt;/code> condition may not be verified.&lt;/p>
&lt;p>To add a callback on memory accesses, we can use the &lt;code>addMemAccessCB(...)&lt;/code> function on the VM instance:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">addMemAccessCB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MEMORY_READ_WRITE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">memory_callback&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* data */&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the given &lt;code>memory_callback(...)&lt;/code> function, we perform the following actions:&lt;/p>
&lt;ul>
&lt;li>Track memory &lt;strong>byte&lt;/strong> accesses.&lt;/li>
&lt;li>Check if the value is printable.&lt;/li>
&lt;li>Pretty print the R/W value.&lt;/li>
&lt;/ul>
&lt;p>The idea of this callback is to track memory accesses that are performed on printable characters. It enables
to quickly identify strings encoding/decoding routines.&lt;/p>
&lt;p>Here is the implementation of the callback:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">VMAction&lt;/span> &lt;span class="nf">memory_callback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">VMInstanceRef&lt;/span> &lt;span class="n">vm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GPRState&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">gprState&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">auto&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">acc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vm&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getInstMemoryAccess&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// Get last memory access
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">MemoryAccess&lt;/span> &lt;span class="n">maccess&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">acc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">back&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// Retrieve access information:
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">rword&lt;/span> &lt;span class="n">addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">maccess&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">accessAddress&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Address accessed
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">rword&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">maccess&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Value read or written
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">rword&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">maccess&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Access size
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// Only look for byte access
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">VMAction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">CONTINUE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Read / Write operation as a string
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">kind&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">maccess&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">MemoryAccessType&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">MEMORY_READ&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s">&amp;#34;[R]&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s">&amp;#34;[W]&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Cast the value into a char
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">cvalue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">static_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Check if the value read or written is printable
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">isprint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cvalue&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;0x{:x} {}: {}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">addr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">kind&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cvalue&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// Pretty print
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="c1">// Continue this execution
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">VMAction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">CONTINUE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With this new callback, we can observe such output between two &lt;code>openat()&lt;/code> syscalls involved in the
&lt;code>root&lt;/code> check routine:&lt;/p>
&lt;p>&lt;img src="su_decode.png" alt="">&lt;/p>
&lt;p>It is basically the string decoding routine in action. Note that some read operations are missing
since we only track &lt;strong>printable&lt;/strong> characters. However all write operations are present.&lt;/p>
&lt;p>The routine &lt;strong>loads&lt;/strong> characters with the instruction at address &lt;strong>0x295e&lt;/strong> and &lt;strong>stores&lt;/strong> the decoded
value at address &lt;strong>0x2972&lt;/strong>. If we look at the function that handles these two addresses, we find
the decoding routine:&lt;/p>
&lt;p>&lt;img src="decoding_routine.png" alt="">&lt;/p>
&lt;p>In the above figure, the &lt;strong>green&lt;/strong> section highlights the memory &lt;strong>load access&lt;/strong> while the &lt;strong>red&lt;/strong> one highlights
the &lt;strong>write operation&lt;/strong>. The &lt;strong>blue&lt;/strong> area is the &lt;strong>decoding logic&lt;/strong>.&lt;/p>
&lt;p>The output of &lt;strong>all&lt;/strong> read / write accesses turns out to be quite verbose on the whole execution of the function.
We can improve the instrumentation by adding two callbacks before and after function &lt;strong>calls&lt;/strong>
with this purpose:&lt;/p>
&lt;ol>
&lt;li>Before calls, we print the target address (e.g. &lt;code>0x123: blx r3 -&amp;gt; .text!0xABC&lt;/code>).&lt;/li>
&lt;li>After calls we print &lt;strong>all&lt;/strong> printable characters being read or written &lt;strong>within the called function&lt;/strong>.&lt;/li>
&lt;/ol>
&lt;p>The &lt;code>addCallCB(...)&lt;/code> is still in experimentation but it aims to put callbacks before or after call instructions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="c1">// Callback before ``call`` instructions
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">addCallCB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PRECALL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">on_call_enter&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Callback when a ``call`` returns
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">vm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">addCallCB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">POSTCALL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">on_call_exit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With these two callbacks we get the following output:&lt;/p>
&lt;p>&lt;img src="memtrace.0.png" alt="">&lt;/p>
&lt;p>By going further in the memory trace, we can observe this output:&lt;/p>
&lt;p>&lt;img src="memtrace.png" alt="">&lt;/p>
&lt;p>From this output we can infer the behavior of the collector (pseudo-code):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">f&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;/proc/self/maps&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">readlines&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="s2">&amp;#34;/&amp;#34;&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">line&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># Avoid entries such as XXX-YYY ... [anon:linker_alloc]&lt;/span>
&lt;span class="k">continue&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="s2">&amp;#34;-xp&amp;#34;&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="c1"># Process executable segments only&lt;/span>
&lt;span class="k">continue&lt;/span>
&lt;span class="n">buffer&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">encode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">line&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can also observe a sequence of&lt;/p>
&lt;ol>
&lt;li>&lt;strong>READ&lt;/strong> &lt;code>line[i]&lt;/code>&lt;/li>
&lt;li>&lt;strong>CALL&lt;/strong> &lt;code>.text!0xd2ba&lt;/code>&lt;/li>
&lt;li>&lt;strong>WRITE&lt;/strong> &lt;code>encoded(line[i])&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>It suggests that the logic of the &lt;code>encode()&lt;/code> function is implemented at address &lt;strong>0xd2ba&lt;/strong>.&lt;/p>
&lt;p>The CFG of this function is compounded by instructions that compare the input against &lt;em>magic&lt;/em> printable
values and we manually checked that it is the encoding function. Moreover this function is — by design — reversible since
the server side algorithm needs to process the &lt;em>encoded&lt;/em> data.&lt;/p>
&lt;p>&lt;img src="encoding_routine.png" alt="">&lt;/p>
&lt;h1 id="library-lifting">Library lifting&lt;/h1>
&lt;p>In the previous parts, we targeted the ARM version of the library. It turns out that SDKs which use
native libraries usually provide the libraries for all architectures (&lt;code>arm&lt;/code>, &lt;code>arm64&lt;/code>, &lt;code>x86&lt;/code>, &lt;code>x86-64&lt;/code>).&lt;/p>
&lt;p>Indeed, they do not want to limit developers to some architectures. The solution previously analyzed also
comes with a &lt;code>x86-64&lt;/code> version of &lt;code>libApp.so&lt;/code> with the exact same interface.&lt;/p>
&lt;p>Moreover, the analysis done in the previous sections shows that there are no real dependencies to the Android system:&lt;/p>
&lt;ul>
&lt;li>Syscall are standards and available on Linux.&lt;/li>
&lt;li>&lt;code>/proc/self/maps&lt;/code> and &lt;code>/proc/self/status&lt;/code> are available on Linux.&lt;/li>
&lt;/ul>
&lt;p>Thus, we can &lt;em>lift&lt;/em> the library and run it on Linux. This technique has already been described in this
blog post:
&lt;a href="https://blog.quarkslab.com/when-sidechannelmarvels-meet-lief.html" target="_blank" rel="noopener">When SideChannelMarvels meet LIEF&lt;/a>.&lt;/p>
&lt;p>In a first step, we have to patch the library with LIEF:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">lief&lt;/span>
&lt;span class="n">libApp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;libApp.so&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Patch library names&lt;/span>
&lt;span class="c1"># ===================&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;libc.so&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;libc.so.6&amp;#34;&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;liblog.so&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;libc.so.6&amp;#34;&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;libm.so&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;libm.so.6&amp;#34;&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;libdl.so&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;libdl.so.2&amp;#34;&lt;/span>
&lt;span class="c1"># Patch dynamic entries&lt;/span>
&lt;span class="c1"># =====================&lt;/span>
&lt;span class="c1"># 1. Remove ELF constructors&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">INIT_ARRAY&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">INIT_ARRAY&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DEBUG&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">INIT_ARRAYSZ&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">FINI_ARRAY&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">FINI_ARRAY&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DEBUG&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">FINI_ARRAYSZ&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="c1"># 2. Remove symbol versioning&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">VERNEEDNUM&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DEBUG&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">VERNEED&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DEBUG&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">VERDEFNUM&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DEBUG&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">VERDEF&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DEBUG&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">VERSYM&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lief&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ELF&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DYNAMIC_TAGS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DEBUG&lt;/span>
&lt;span class="n">libApp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;libApp-x86-64.so&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, we can instantiate a Linux JVM and run the native function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">JavaVM&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">jvm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">JNIEnv&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">env&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// JVM options
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">JavaVMOption&lt;/span> &lt;span class="n">opt&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">JavaVMInitArgs&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="c1">// JVM instantiation
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">JNI_CreateJavaVM&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">jvm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">**&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Load the library
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">hdl&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">dlopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;libApp-x86-64.so&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RTLD_LAZY&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">RTLD_LOCAL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Resolve the functions
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">using&lt;/span> &lt;span class="n">abi_t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">JNIEnv&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="n">jni_func_t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jstring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">JNIEnv&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">auto&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">jni_get_abi&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">abi_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dlsym&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hdl&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Java_XXX_JNIWrapper_ca3_14007&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">auto&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">jni_func&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">jni_func_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dlsym&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hdl&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Java_XXX_JNIWrapper_ca3_14008&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="c1">// Execute
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">jint&lt;/span> &lt;span class="n">abi&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jni_get_abi&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">console&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ABI: {:d}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">abi&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">jstring&lt;/span> &lt;span class="n">encoded&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jni_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">console&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ca3_14008(): {}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetStringUTFChars&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">encoded&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">EXIT_SUCCESS&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>By executing this code, we get a similar output as seen in the previous parts:&lt;/p>
&lt;p>&lt;img src="rip.png" alt="">&lt;/p>
&lt;p>We can also run the &lt;code>strace&lt;/code> utility to inspect the syscalls:&lt;/p>
&lt;p>&lt;img src="strace.png" alt="">&lt;/p>
&lt;p>Since we are able to run the function on Linux, we could also use &lt;code>gdb&lt;/code>, &lt;code>Intel PIN&lt;/code> or &lt;code>QBDI(x86-64)&lt;/code>
to analyze the library.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>While it has been quite challenging to add the whole ARM support in QBDI, it starts to work pretty well on real
use cases. Such support should also lead to interesting applications among which:&lt;/p>
&lt;ul>
&lt;li>HongFuzz / QBDI for Android.&lt;/li>
&lt;li>
&lt;a href="https://github.com/SideChannelMarvels" target="_blank" rel="noopener">SideChannelMarvels&lt;/a> integration for CPA attacks.&lt;/li>
&lt;li>Trustlets instrumentation.&lt;/li>
&lt;/ul>
&lt;p>The raw traces used in this blog post are available here: &lt;code>traces.zip &amp;lt;resources/2019-06-15-android-jni-library-p1/traces.zip&amp;gt;&lt;/code>_&lt;/p>
&lt;h2 id="acknowledgments">Acknowledgments&lt;/h2>
&lt;p>Many thanks to Charles Hubain and Cédric Tessier who developed and designed QBDI. It is really pleasant
to work on the concepts involved in this DBI.&lt;/p>
&lt;p>Thanks to the LLVM community to provide such framework without which this project would not be possible.&lt;/p>
&lt;p>Thanks to my Quarkslab colleagues who proofread this article.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Frida modifies fields of the &lt;code>art::ArtMethod&lt;/code> object associated with the Java method.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>
&lt;a href="https://qbdi.quarkslab.com/QBDI_34c3.pdf" target="_blank" rel="noopener">Slides&lt;/a> -
&lt;a href="https://media.ccc.de/v/34c3-9006-implementing_an_llvm_based_dynamic_binary_instrumentation_framework" target="_blank" rel="noopener">Talk&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>
&lt;a href="https://github.com/QBDI/QBDI/blob/master/examples" target="_blank" rel="noopener">https://github.com/QBDI/QBDI/blob/master/examples&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>DroidGuard being the SafetyNet module that collects information about the device.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>The name has been intentionally changed.&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6" role="doc-endnote">
&lt;p>Plus the &lt;code>this&lt;/code> parameter which is a &lt;code>jclass&lt;/code> object for a static method.&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7" role="doc-endnote">
&lt;p>Even though static analysis would be enough in this case.&amp;#160;&lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:8" role="doc-endnote">
&lt;p>Nexus 5X - Android 8.1.0 - Rooted with Magisk.&amp;#160;&lt;a href="#fnref:8" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>When SideChannelMarvels meet LIEF</title><link>https://www.romainthomas.fr/post/when-sidechannelmarvels-meet-lief/</link><pubDate>Thu, 03 May 2018 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/post/when-sidechannelmarvels-meet-lief/</guid><description/></item></channel></rss>